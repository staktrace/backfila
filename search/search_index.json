{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Backfila \u00b6 Backfila is a service that manages backfill state, calling into other services to do batched work. Building \u00b6 Build backfila: $ ./gradlew clean shadowJar Run the Service \u00b6 From the command line \u00b6 $ java -jar service/build/libs/service.jar From IntelliJ \u00b6 Right-click on BackfilaService.kt and select Run From Docker \u00b6 Building \u00b6 Build a Docker image of backfila: $ docker build -t backfila-0.0.1 service Running locally \u00b6 Visit Docker for Mac to install Docker on a Mac for testing. Run backfila in Docker locally: $ docker run -p 8080:8080 backfila-0.0.1 Visit the UI at http://localhost:8080/ Client \u00b6 The backfila client must be installed in your services to expose their backfill code. It also provides the batching mechanism and templates for common types of backfills. Connectors \u00b6 Connectors can be installed to provide a way to connect to your services. The included default connectors are HTTPS and Envoy. Add custom connectors using Guice map binding. Gradle \u00b6 implementation ( \"app.cash.backfila:backfila-client:0.1.0\" ) implementation ( \"app.cash.backfila:backfila-service-lib:0.1.0\" ) License \u00b6 Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#backfila","text":"Backfila is a service that manages backfill state, calling into other services to do batched work.","title":"Backfila"},{"location":"#building","text":"Build backfila: $ ./gradlew clean shadowJar","title":"Building"},{"location":"#run-the-service","text":"","title":"Run the Service"},{"location":"#from-the-command-line","text":"$ java -jar service/build/libs/service.jar","title":"From the command line"},{"location":"#from-intellij","text":"Right-click on BackfilaService.kt and select Run","title":"From IntelliJ"},{"location":"#from-docker","text":"","title":"From Docker"},{"location":"#building_1","text":"Build a Docker image of backfila: $ docker build -t backfila-0.0.1 service","title":"Building"},{"location":"#running-locally","text":"Visit Docker for Mac to install Docker on a Mac for testing. Run backfila in Docker locally: $ docker run -p 8080:8080 backfila-0.0.1 Visit the UI at http://localhost:8080/","title":"Running locally"},{"location":"#client","text":"The backfila client must be installed in your services to expose their backfill code. It also provides the batching mechanism and templates for common types of backfills.","title":"Client"},{"location":"#connectors","text":"Connectors can be installed to provide a way to connect to your services. The included default connectors are HTTPS and Envoy. Add custom connectors using Guice map binding.","title":"Connectors"},{"location":"#gradle","text":"implementation ( \"app.cash.backfila:backfila-client:0.1.0\" ) implementation ( \"app.cash.backfila:backfila-service-lib:0.1.0\" )","title":"Gradle"},{"location":"#license","text":"Copyright 2019 Square, Inc. Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Change Log \u00b6 Version 0.1.1 (2020-03-27) \u00b6 Paginated backfills page. View logs link. Version 0.1.0 (2019-09-01) \u00b6 Initial release.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-011-2020-03-27","text":"Paginated backfills page. View logs link.","title":"Version 0.1.1 (2020-03-27)"},{"location":"changelog/#version-010-2019-09-01","text":"Initial release.","title":"Version 0.1.0 (2019-09-01)"},{"location":"contributing/","text":"Contributing \u00b6 If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#contributing","text":"If you would like to contribute code to this project you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Before your code can be accepted into the project you must also sign the Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"releasing/","text":"Releasing \u00b6 Prerequisite: Sonatype (Maven Central) Account \u00b6 Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for backfila projects. Prerequisite: GPG Keys \u00b6 Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX Prerequisite: Gradle Properties \u00b6 Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg Cutting a Release \u00b6 Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"backfila:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"backfila:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` miskweb ci-build -e ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a backfila-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Releasing"},{"location":"releasing/#releasing","text":"","title":"Releasing"},{"location":"releasing/#prerequisite-sonatype-maven-central-account","text":"Create an account on the Sonatype issues site . Ask an existing publisher to open an issue requesting publishing permissions for backfila projects.","title":"Prerequisite: Sonatype (Maven Central) Account"},{"location":"releasing/#prerequisite-gpg-keys","text":"Generate a GPG key (RSA, 4096 bit, 3650 day) expiry, or use an existing one. You should leave the password empty for this key. $ gpg --full-generate-key Upload the GPG keys to public servers: $ gpg --list-keys --keyid-format LONG /Users/johnbarber/.gnupg/pubring.kbx ------------------------------ pub rsa4096/XXXXXXXXXXXXXXXX 2019-07-16 [SC] [expires: 2029-07-13] YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY uid [ultimate] John Barber <jbarber@cash.app> sub rsa4096/ZZZZZZZZZZZZZZZZ 2019-07-16 [E] [expires: 2029-07-13] $ gpg --send-keys --keyserver keyserver.ubuntu.com XXXXXXXXXXXXXXXX","title":"Prerequisite: GPG Keys"},{"location":"releasing/#prerequisite-gradle-properties","text":"Define publishing properties in ~/.gradle/gradle.properties : signing.keyId=1A2345F8 signing.password= signing.secretKeyRingFile=/Users/jwilson/.gnupg/secring.gpg signing.keyId is the GPG key\u2019s ID. Get it with this: $ gpg --list-keys --keyid-format SHORT signing.password is the password for this key. This might be empty! signing.secretKeyRingFile is the absolute path for secring.gpg . You may need to export this file manually with the following command where XXXXXXXX is the keyId above: $ gpg --keyring secring.gpg --export-secret-key XXXXXXXX > ~/.gnupg/secring.gpg","title":"Prerequisite: Gradle Properties"},{"location":"releasing/#cutting-a-release","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Set environment variables with your Sonatype credentials . export SONATYPE_NEXUS_USERNAME=johnbarber export SONATYPE_NEXUS_PASSWORD=`pbpaste` Update, build, and upload: sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g\" \\ gradle.properties sed -i \"\" \\ \"s/\\\"backfila:\\([^\\:]*\\):[^\\\"]*\\\"/\\\"backfila:\\1:$RELEASE_VERSION\\\"/g\" \\ `find . -name \"README.md\"` miskweb ci-build -e ./gradlew clean uploadArchives Visit Sonatype Nexus to promote (close then release) the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am \"Prepare for release $RELEASE_VERSION.\" git tag -a backfila-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\" sed -i \"\" \\ \"s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g\" \\ gradle.properties git commit -am \"Prepare next development version.\" git push && git push --tags","title":"Cutting a Release"},{"location":"0.x/client/","text":"client Packages \u00b6 Name Summary app.cash.backfila.client app.cash.backfila.protos.clientservice app.cash.backfila.protos.service Index \u00b6 All Types","title":"client"},{"location":"0.x/client/#packages","text":"Name Summary app.cash.backfila.client app.cash.backfila.protos.clientservice app.cash.backfila.protos.service","title":"Packages"},{"location":"0.x/client/#index","text":"All Types","title":"Index"},{"location":"0.x/client/alltypes/","text":"All Types \u00b6 Name Summary app.cash.backfila.client.BackfilaApi app.cash.backfila.protos.service.ConfigureServiceRequest app.cash.backfila.protos.service.ConfigureServiceResponse app.cash.backfila.client.Connectors app.cash.backfila.protos.service.CreateAndStartBackfillRequest Creates a backfill under the calling service and starts it. app.cash.backfila.protos.service.CreateAndStartBackfillResponse app.cash.backfila.protos.service.CreateBackfillRequest app.cash.backfila.protos.service.CreateBackfillResponse app.cash.backfila.client.EnvoyConnectorData app.cash.backfila.protos.clientservice.GetNextBatchRangeRequest app.cash.backfila.protos.clientservice.GetNextBatchRangeResponse app.cash.backfila.client.HttpConnectorData app.cash.backfila.protos.clientservice.KeyRange In this file: APIs that backfila calls on the client service. Inclusive range of primary keys. Backfila will never make assumptions about the type of the primary key, these are passed around as tokens. app.cash.backfila.protos.service.Parameter In this file: APIs that the service provides to the client. app.cash.backfila.protos.clientservice.PipelinedData Pipelined data can be any format as long as both the consumer and provider agree on it. This structure is passed around from the source to the target unchanged. app.cash.backfila.protos.clientservice.PipelinedRecord app.cash.backfila.protos.clientservice.PrepareBackfillRequest app.cash.backfila.protos.clientservice.PrepareBackfillResponse app.cash.backfila.protos.clientservice.RunBatchRequest app.cash.backfila.protos.clientservice.RunBatchResponse","title":"All Types - Backfila"},{"location":"0.x/client/alltypes/#all-types","text":"Name Summary app.cash.backfila.client.BackfilaApi app.cash.backfila.protos.service.ConfigureServiceRequest app.cash.backfila.protos.service.ConfigureServiceResponse app.cash.backfila.client.Connectors app.cash.backfila.protos.service.CreateAndStartBackfillRequest Creates a backfill under the calling service and starts it. app.cash.backfila.protos.service.CreateAndStartBackfillResponse app.cash.backfila.protos.service.CreateBackfillRequest app.cash.backfila.protos.service.CreateBackfillResponse app.cash.backfila.client.EnvoyConnectorData app.cash.backfila.protos.clientservice.GetNextBatchRangeRequest app.cash.backfila.protos.clientservice.GetNextBatchRangeResponse app.cash.backfila.client.HttpConnectorData app.cash.backfila.protos.clientservice.KeyRange In this file: APIs that backfila calls on the client service. Inclusive range of primary keys. Backfila will never make assumptions about the type of the primary key, these are passed around as tokens. app.cash.backfila.protos.service.Parameter In this file: APIs that the service provides to the client. app.cash.backfila.protos.clientservice.PipelinedData Pipelined data can be any format as long as both the consumer and provider agree on it. This structure is passed around from the source to the target unchanged. app.cash.backfila.protos.clientservice.PipelinedRecord app.cash.backfila.protos.clientservice.PrepareBackfillRequest app.cash.backfila.protos.clientservice.PrepareBackfillResponse app.cash.backfila.protos.clientservice.RunBatchRequest app.cash.backfila.protos.clientservice.RunBatchResponse","title":"All Types"},{"location":"0.x/client/app.cash.backfila.client/","text":"client / app.cash.backfila.client Package app.cash.backfila.client \u00b6 Types \u00b6 Name Summary BackfilaApi interface BackfilaApi Connectors object Connectors EnvoyConnectorData data class EnvoyConnectorData HttpConnectorData data class HttpConnectorData","title":"Package app.cash.backfila.client - Backfila"},{"location":"0.x/client/app.cash.backfila.client/#package-appcashbackfilaclient","text":"","title":"Package app.cash.backfila.client"},{"location":"0.x/client/app.cash.backfila.client/#types","text":"Name Summary BackfilaApi interface BackfilaApi Connectors object Connectors EnvoyConnectorData data class EnvoyConnectorData HttpConnectorData data class HttpConnectorData","title":"Types"},{"location":"0.x/client/app.cash.backfila.client/-backfila-api/","text":"client / app.cash.backfila.client / BackfilaApi BackfilaApi \u00b6 interface BackfilaApi Functions \u00b6 Name Summary configureService abstract fun configureService(request: ConfigureServiceRequest ): Call< ConfigureServiceResponse > createAndStartbackfill abstract fun createAndStartbackfill(request: CreateAndStartBackfillRequest ): Call< CreateAndStartBackfillResponse >","title":"BackfilaApi - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-backfila-api/#backfilaapi","text":"interface BackfilaApi","title":"BackfilaApi"},{"location":"0.x/client/app.cash.backfila.client/-backfila-api/#functions","text":"Name Summary configureService abstract fun configureService(request: ConfigureServiceRequest ): Call< ConfigureServiceResponse > createAndStartbackfill abstract fun createAndStartbackfill(request: CreateAndStartBackfillRequest ): Call< CreateAndStartBackfillResponse >","title":"Functions"},{"location":"0.x/client/app.cash.backfila.client/-backfila-api/configure-service/","text":"client / app.cash.backfila.client / BackfilaApi / configureService configureService \u00b6 @POST(\"/configure_service\") @Headers([\"Accept: application/x-protobuf\", \"Content-Type: application/x-protobuf\"]) abstract fun configureService(@Body request: ConfigureServiceRequest ): Call< ConfigureServiceResponse >","title":"configureService - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-backfila-api/configure-service/#configureservice","text":"@POST(\"/configure_service\") @Headers([\"Accept: application/x-protobuf\", \"Content-Type: application/x-protobuf\"]) abstract fun configureService(@Body request: ConfigureServiceRequest ): Call< ConfigureServiceResponse >","title":"configureService"},{"location":"0.x/client/app.cash.backfila.client/-backfila-api/create-and-startbackfill/","text":"client / app.cash.backfila.client / BackfilaApi / createAndStartbackfill createAndStartbackfill \u00b6 @POST(\"/create-and-start-backfill\") @Headers([\"Accept: application/x-protobuf\", \"Content-Type: application/x-protobuf\"]) abstract fun createAndStartbackfill(@Body request: CreateAndStartBackfillRequest ): Call< CreateAndStartBackfillResponse >","title":"createAndStartbackfill - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-backfila-api/create-and-startbackfill/#createandstartbackfill","text":"@POST(\"/create-and-start-backfill\") @Headers([\"Accept: application/x-protobuf\", \"Content-Type: application/x-protobuf\"]) abstract fun createAndStartbackfill(@Body request: CreateAndStartBackfillRequest ): Call< CreateAndStartBackfillResponse >","title":"createAndStartbackfill"},{"location":"0.x/client/app.cash.backfila.client/-connectors/","text":"client / app.cash.backfila.client / Connectors Connectors \u00b6 object Connectors Properties \u00b6 Name Summary ENVOY const val ENVOY: String HTTP const val HTTP: String","title":"Connectors - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-connectors/#connectors","text":"object Connectors","title":"Connectors"},{"location":"0.x/client/app.cash.backfila.client/-connectors/#properties","text":"Name Summary ENVOY const val ENVOY: String HTTP const val HTTP: String","title":"Properties"},{"location":"0.x/client/app.cash.backfila.client/-connectors/-e-n-v-o-y/","text":"client / app.cash.backfila.client / Connectors / ENVOY ENVOY \u00b6 const val ENVOY: String","title":"ENVOY - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-connectors/-e-n-v-o-y/#envoy","text":"const val ENVOY: String","title":"ENVOY"},{"location":"0.x/client/app.cash.backfila.client/-connectors/-h-t-t-p/","text":"client / app.cash.backfila.client / Connectors / HTTP HTTP \u00b6 const val HTTP: String","title":"HTTP - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-connectors/-h-t-t-p/#http","text":"const val HTTP: String","title":"HTTP"},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/","text":"client / app.cash.backfila.client / EnvoyConnectorData EnvoyConnectorData \u00b6 data class EnvoyConnectorData Constructors \u00b6 Name Summary <init> EnvoyConnectorData(clusterType: String ) Properties \u00b6 Name Summary clusterType val clusterType: String","title":"EnvoyConnectorData - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/#envoyconnectordata","text":"data class EnvoyConnectorData","title":"EnvoyConnectorData"},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/#constructors","text":"Name Summary <init> EnvoyConnectorData(clusterType: String )","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/#properties","text":"Name Summary clusterType val clusterType: String","title":"Properties"},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/-init-/","text":"client / app.cash.backfila.client / EnvoyConnectorData / <init> <init> \u00b6 EnvoyConnectorData(clusterType: String )","title":" init "},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/-init-/#init","text":"EnvoyConnectorData(clusterType: String )","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/cluster-type/","text":"client / app.cash.backfila.client / EnvoyConnectorData / clusterType clusterType \u00b6 val clusterType: String","title":"clusterType - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-envoy-connector-data/cluster-type/#clustertype","text":"val clusterType: String","title":"clusterType"},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/","text":"client / app.cash.backfila.client / HttpConnectorData HttpConnectorData \u00b6 data class HttpConnectorData Constructors \u00b6 Name Summary <init> HttpConnectorData(url: String ) Properties \u00b6 Name Summary url val url: String","title":"HttpConnectorData - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/#httpconnectordata","text":"data class HttpConnectorData","title":"HttpConnectorData"},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/#constructors","text":"Name Summary <init> HttpConnectorData(url: String )","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/#properties","text":"Name Summary url val url: String","title":"Properties"},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/-init-/","text":"client / app.cash.backfila.client / HttpConnectorData / <init> <init> \u00b6 HttpConnectorData(url: String )","title":" init "},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/-init-/#init","text":"HttpConnectorData(url: String )","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/url/","text":"client / app.cash.backfila.client / HttpConnectorData / url url \u00b6 val url: String","title":"url - Backfila"},{"location":"0.x/client/app.cash.backfila.client/-http-connector-data/url/#url","text":"val url: String","title":"url"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/","text":"client / app.cash.backfila.protos.clientservice Package app.cash.backfila.protos.clientservice \u00b6 Types \u00b6 Name Summary GetNextBatchRangeRequest class GetNextBatchRangeRequest : Message< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !> GetNextBatchRangeResponse class GetNextBatchRangeResponse : Message< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !> KeyRange class KeyRange : Message< KeyRange !, KeyRange.Builder !> In this file: APIs that backfila calls on the client service. Inclusive range of primary keys. Backfila will never make assumptions about the type of the primary key, these are passed around as tokens. PipelinedData class PipelinedData : Message< PipelinedData !, PipelinedData.Builder !> Pipelined data can be any format as long as both the consumer and provider agree on it. This structure is passed around from the source to the target unchanged. PipelinedRecord class PipelinedRecord : Message< PipelinedRecord !, PipelinedRecord.Builder !> PrepareBackfillRequest class PrepareBackfillRequest : Message< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !> PrepareBackfillResponse class PrepareBackfillResponse : Message< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !> RunBatchRequest class RunBatchRequest : Message< RunBatchRequest !, RunBatchRequest.Builder !> RunBatchResponse class RunBatchResponse : Message< RunBatchResponse !, RunBatchResponse.Builder !>","title":"Package app.cash.backfila.protos.clientservice - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/#package-appcashbackfilaprotosclientservice","text":"","title":"Package app.cash.backfila.protos.clientservice"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/#types","text":"Name Summary GetNextBatchRangeRequest class GetNextBatchRangeRequest : Message< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !> GetNextBatchRangeResponse class GetNextBatchRangeResponse : Message< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !> KeyRange class KeyRange : Message< KeyRange !, KeyRange.Builder !> In this file: APIs that backfila calls on the client service. Inclusive range of primary keys. Backfila will never make assumptions about the type of the primary key, these are passed around as tokens. PipelinedData class PipelinedData : Message< PipelinedData !, PipelinedData.Builder !> Pipelined data can be any format as long as both the consumer and provider agree on it. This structure is passed around from the source to the target unchanged. PipelinedRecord class PipelinedRecord : Message< PipelinedRecord !, PipelinedRecord.Builder !> PrepareBackfillRequest class PrepareBackfillRequest : Message< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !> PrepareBackfillResponse class PrepareBackfillResponse : Message< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !> RunBatchRequest class RunBatchRequest : Message< RunBatchRequest !, RunBatchRequest.Builder !> RunBatchResponse class RunBatchResponse : Message< RunBatchResponse !, RunBatchResponse.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest GetNextBatchRangeRequest \u00b6 class GetNextBatchRangeRequest : Message< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !> Constructors \u00b6 Name Summary <init> GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !) GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< GetNextBatchRangeRequest !>! backfill_id val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name val backfill_name: String ! backfill_range val backfill_range: KeyRange ! The range of the whole backfill. This determines where the first batch starts and the last batch ends. batch_size val batch_size: Long ! Max number of matching records to return in a batch range. compute_count_limit val compute_count_limit: Long ! Compute as many batches as possible until this many results. compute_time_limit_ms val compute_time_limit_ms: Long ! Compute as many batches as possible until this duration elapses. DEFAULT_BACKFILL_ID static val DEFAULT_BACKFILL_ID: String DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_BATCH_SIZE static val DEFAULT_BATCH_SIZE: Long ! DEFAULT_COMPUTE_COUNT_LIMIT static val DEFAULT_COMPUTE_COUNT_LIMIT: Long ! DEFAULT_COMPUTE_TIME_LIMIT_MS static val DEFAULT_COMPUTE_TIME_LIMIT_MS: Long ! DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! DEFAULT_PARTITION_NAME static val DEFAULT_PARTITION_NAME: String DEFAULT_PRECOMPUTING static val DEFAULT_PRECOMPUTING: Boolean ! DEFAULT_PREVIOUS_END_KEY static val DEFAULT_PREVIOUS_END_KEY: ByteString! DEFAULT_SCAN_SIZE static val DEFAULT_SCAN_SIZE: Long ! dry_run val dry_run: Boolean ! parameters val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. The values are immutable for the life of the backfill. partition_name val partition_name: String ! precomputing val precomputing: Boolean ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case. previous_end_key val previous_end_key: ByteString! End key of the previous computed batch. Can be null for the first call. scan_size val scan_size: Long ! Max number of records to scan when computing a batch range. Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): GetNextBatchRangeRequest.Builder ! toString fun toString(): String","title":"GetNextBatchRangeRequest - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/#getnextbatchrangerequest","text":"class GetNextBatchRangeRequest : Message< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !>","title":"GetNextBatchRangeRequest"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/#types","text":"Name Summary Builder class Builder : Builder< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/#constructors","text":"Name Summary <init> GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !) GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< GetNextBatchRangeRequest !>! backfill_id val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name val backfill_name: String ! backfill_range val backfill_range: KeyRange ! The range of the whole backfill. This determines where the first batch starts and the last batch ends. batch_size val batch_size: Long ! Max number of matching records to return in a batch range. compute_count_limit val compute_count_limit: Long ! Compute as many batches as possible until this many results. compute_time_limit_ms val compute_time_limit_ms: Long ! Compute as many batches as possible until this duration elapses. DEFAULT_BACKFILL_ID static val DEFAULT_BACKFILL_ID: String DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_BATCH_SIZE static val DEFAULT_BATCH_SIZE: Long ! DEFAULT_COMPUTE_COUNT_LIMIT static val DEFAULT_COMPUTE_COUNT_LIMIT: Long ! DEFAULT_COMPUTE_TIME_LIMIT_MS static val DEFAULT_COMPUTE_TIME_LIMIT_MS: Long ! DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! DEFAULT_PARTITION_NAME static val DEFAULT_PARTITION_NAME: String DEFAULT_PRECOMPUTING static val DEFAULT_PRECOMPUTING: Boolean ! DEFAULT_PREVIOUS_END_KEY static val DEFAULT_PREVIOUS_END_KEY: ByteString! DEFAULT_SCAN_SIZE static val DEFAULT_SCAN_SIZE: Long ! dry_run val dry_run: Boolean ! parameters val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. The values are immutable for the life of the backfill. partition_name val partition_name: String ! precomputing val precomputing: Boolean ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case. previous_end_key val previous_end_key: ByteString! End key of the previous computed batch. Can be null for the first call. scan_size val scan_size: Long ! Max number of records to scan when computing a batch range.","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): GetNextBatchRangeRequest.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< GetNextBatchRangeRequest !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< GetNextBatchRangeRequest !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-i-d/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_BACKFILL_ID DEFAULT_BACKFILL_ID \u00b6 static val DEFAULT_BACKFILL_ID: String","title":"DEFAULT_BACKFILL_ID - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-i-d/#default_backfill_id","text":"static val DEFAULT_BACKFILL_ID: String","title":"DEFAULT_BACKFILL_ID"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_BACKFILL_NAME DEFAULT_BACKFILL_NAME \u00b6 static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/#default_backfill_name","text":"static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-b-a-t-c-h_-s-i-z-e/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_BATCH_SIZE DEFAULT_BATCH_SIZE \u00b6 static val DEFAULT_BATCH_SIZE: Long !","title":"DEFAULT_BATCH_SIZE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-b-a-t-c-h_-s-i-z-e/#default_batch_size","text":"static val DEFAULT_BATCH_SIZE: Long !","title":"DEFAULT_BATCH_SIZE"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-c-o-m-p-u-t-e_-c-o-u-n-t_-l-i-m-i-t/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_COMPUTE_COUNT_LIMIT DEFAULT_COMPUTE_COUNT_LIMIT \u00b6 static val DEFAULT_COMPUTE_COUNT_LIMIT: Long !","title":"DEFAULT_COMPUTE_COUNT_LIMIT - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-c-o-m-p-u-t-e_-c-o-u-n-t_-l-i-m-i-t/#default_compute_count_limit","text":"static val DEFAULT_COMPUTE_COUNT_LIMIT: Long !","title":"DEFAULT_COMPUTE_COUNT_LIMIT"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-c-o-m-p-u-t-e_-t-i-m-e_-l-i-m-i-t_-m-s/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_COMPUTE_TIME_LIMIT_MS DEFAULT_COMPUTE_TIME_LIMIT_MS \u00b6 static val DEFAULT_COMPUTE_TIME_LIMIT_MS: Long !","title":"DEFAULT_COMPUTE_TIME_LIMIT_MS - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-c-o-m-p-u-t-e_-t-i-m-e_-l-i-m-i-t_-m-s/#default_compute_time_limit_ms","text":"static val DEFAULT_COMPUTE_TIME_LIMIT_MS: Long !","title":"DEFAULT_COMPUTE_TIME_LIMIT_MS"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_DRY_RUN DEFAULT_DRY_RUN \u00b6 static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/#default_dry_run","text":"static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-p-a-r-t-i-t-i-o-n_-n-a-m-e/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_PARTITION_NAME DEFAULT_PARTITION_NAME \u00b6 static val DEFAULT_PARTITION_NAME: String","title":"DEFAULT_PARTITION_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-p-a-r-t-i-t-i-o-n_-n-a-m-e/#default_partition_name","text":"static val DEFAULT_PARTITION_NAME: String","title":"DEFAULT_PARTITION_NAME"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-p-r-e-c-o-m-p-u-t-i-n-g/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_PRECOMPUTING DEFAULT_PRECOMPUTING \u00b6 static val DEFAULT_PRECOMPUTING: Boolean !","title":"DEFAULT_PRECOMPUTING - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-p-r-e-c-o-m-p-u-t-i-n-g/#default_precomputing","text":"static val DEFAULT_PRECOMPUTING: Boolean !","title":"DEFAULT_PRECOMPUTING"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-p-r-e-v-i-o-u-s_-e-n-d_-k-e-y/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_PREVIOUS_END_KEY DEFAULT_PREVIOUS_END_KEY \u00b6 static val DEFAULT_PREVIOUS_END_KEY: ByteString!","title":"DEFAULT_PREVIOUS_END_KEY - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-p-r-e-v-i-o-u-s_-e-n-d_-k-e-y/#default_previous_end_key","text":"static val DEFAULT_PREVIOUS_END_KEY: ByteString!","title":"DEFAULT_PREVIOUS_END_KEY"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-s-c-a-n_-s-i-z-e/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / DEFAULT_SCAN_SIZE DEFAULT_SCAN_SIZE \u00b6 static val DEFAULT_SCAN_SIZE: Long !","title":"DEFAULT_SCAN_SIZE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-d-e-f-a-u-l-t_-s-c-a-n_-s-i-z-e/#default_scan_size","text":"static val DEFAULT_SCAN_SIZE: Long !","title":"DEFAULT_SCAN_SIZE"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-init-/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / <init> <init> \u00b6 GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !) GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-init-/#init","text":"GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !) GetNextBatchRangeRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_size: Long !, scan_size: Long !, previous_end_key: ByteString!, backfill_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, compute_time_limit_ms: Long !, compute_count_limit: Long !, dry_run: Boolean !, precomputing: Boolean !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/backfill_id/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / backfill_id backfill_id \u00b6 val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation.","title":"backfill_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/backfill_id/#backfill_id","text":"val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation.","title":"backfill_id"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/backfill_name/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / backfill_name backfill_name \u00b6 val backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/backfill_name/#backfill_name","text":"val backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/backfill_range/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / backfill_range backfill_range \u00b6 val backfill_range: KeyRange ! The range of the whole backfill. This determines where the first batch starts and the last batch ends.","title":"backfill_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/backfill_range/#backfill_range","text":"val backfill_range: KeyRange ! The range of the whole backfill. This determines where the first batch starts and the last batch ends.","title":"backfill_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/batch_size/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / batch_size batch_size \u00b6 val batch_size: Long ! Max number of matching records to return in a batch range.","title":"batch_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/batch_size/#batch_size","text":"val batch_size: Long ! Max number of matching records to return in a batch range.","title":"batch_size"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/compute_count_limit/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / compute_count_limit compute_count_limit \u00b6 val compute_count_limit: Long ! Compute as many batches as possible until this many results.","title":"compute_count_limit - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/compute_count_limit/#compute_count_limit","text":"val compute_count_limit: Long ! Compute as many batches as possible until this many results.","title":"compute_count_limit"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/compute_time_limit_ms/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / compute_time_limit_ms compute_time_limit_ms \u00b6 val compute_time_limit_ms: Long ! Compute as many batches as possible until this duration elapses.","title":"compute_time_limit_ms - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/compute_time_limit_ms/#compute_time_limit_ms","text":"val compute_time_limit_ms: Long ! Compute as many batches as possible until this duration elapses.","title":"compute_time_limit_ms"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/dry_run/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / dry_run dry_run \u00b6 val dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/dry_run/#dry_run","text":"val dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/equals/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/hash-code/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/new-builder/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / newBuilder newBuilder \u00b6 fun newBuilder(): GetNextBatchRangeRequest.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/new-builder/#newbuilder","text":"fun newBuilder(): GetNextBatchRangeRequest.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/parameters/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / parameters parameters \u00b6 val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. The values are immutable for the life of the backfill.","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/parameters/#parameters","text":"val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. The values are immutable for the life of the backfill.","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/partition_name/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / partition_name partition_name \u00b6 val partition_name: String !","title":"partition_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/partition_name/#partition_name","text":"val partition_name: String !","title":"partition_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/precomputing/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / precomputing precomputing \u00b6 val precomputing: Boolean ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case.","title":"precomputing - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/precomputing/#precomputing","text":"val precomputing: Boolean ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case.","title":"precomputing"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/previous_end_key/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / previous_end_key previous_end_key \u00b6 val previous_end_key: ByteString! End key of the previous computed batch. Can be null for the first call.","title":"previous_end_key - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/previous_end_key/#previous_end_key","text":"val previous_end_key: ByteString! End key of the previous computed batch. Can be null for the first call.","title":"previous_end_key"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/scan_size/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / scan_size scan_size \u00b6 val scan_size: Long ! Max number of records to scan when computing a batch range.","title":"scan_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/scan_size/#scan_size","text":"val scan_size: Long ! Max number of records to scan when computing a batch range.","title":"scan_size"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/to-string/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder Builder \u00b6 class Builder : Builder< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfill_id var backfill_id: String ! backfill_name var backfill_name: String ! backfill_range var backfill_range: KeyRange ! batch_size var batch_size: Long ! compute_count_limit var compute_count_limit: Long ! compute_time_limit_ms var compute_time_limit_ms: Long ! dry_run var dry_run: Boolean ! parameters var parameters: MutableMap < String !, ByteString!>! partition_name var partition_name: String ! precomputing var precomputing: Boolean ! previous_end_key var previous_end_key: ByteString! scan_size var scan_size: Long ! Functions \u00b6 Name Summary backfill_id fun backfill_id(backfill_id: String !): GetNextBatchRangeRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name fun backfill_name(backfill_name: String !): GetNextBatchRangeRequest.Builder ! backfill_range fun backfill_range(backfill_range: KeyRange !): GetNextBatchRangeRequest.Builder ! The range of the whole backfill. This determines where the first batch starts and the last batch ends. batch_size fun batch_size(batch_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of matching records to return in a batch range. build fun build(): GetNextBatchRangeRequest ! compute_count_limit fun compute_count_limit(compute_count_limit: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this many results. compute_time_limit_ms fun compute_time_limit_ms(compute_time_limit_ms: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this duration elapses. dry_run fun dry_run(dry_run: Boolean !): GetNextBatchRangeRequest.Builder ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): GetNextBatchRangeRequest.Builder ! User provided parameters at creation. The values are immutable for the life of the backfill. partition_name fun partition_name(partition_name: String !): GetNextBatchRangeRequest.Builder ! precomputing fun precomputing(precomputing: Boolean !): GetNextBatchRangeRequest.Builder ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case. previous_end_key fun previous_end_key(previous_end_key: ByteString!): GetNextBatchRangeRequest.Builder ! End key of the previous computed batch. Can be null for the first call. scan_size fun scan_size(scan_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of records to scan when computing a batch range.","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/#builder","text":"class Builder : Builder< GetNextBatchRangeRequest !, GetNextBatchRangeRequest.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/#properties","text":"Name Summary backfill_id var backfill_id: String ! backfill_name var backfill_name: String ! backfill_range var backfill_range: KeyRange ! batch_size var batch_size: Long ! compute_count_limit var compute_count_limit: Long ! compute_time_limit_ms var compute_time_limit_ms: Long ! dry_run var dry_run: Boolean ! parameters var parameters: MutableMap < String !, ByteString!>! partition_name var partition_name: String ! precomputing var precomputing: Boolean ! previous_end_key var previous_end_key: ByteString! scan_size var scan_size: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/#functions","text":"Name Summary backfill_id fun backfill_id(backfill_id: String !): GetNextBatchRangeRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name fun backfill_name(backfill_name: String !): GetNextBatchRangeRequest.Builder ! backfill_range fun backfill_range(backfill_range: KeyRange !): GetNextBatchRangeRequest.Builder ! The range of the whole backfill. This determines where the first batch starts and the last batch ends. batch_size fun batch_size(batch_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of matching records to return in a batch range. build fun build(): GetNextBatchRangeRequest ! compute_count_limit fun compute_count_limit(compute_count_limit: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this many results. compute_time_limit_ms fun compute_time_limit_ms(compute_time_limit_ms: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this duration elapses. dry_run fun dry_run(dry_run: Boolean !): GetNextBatchRangeRequest.Builder ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): GetNextBatchRangeRequest.Builder ! User provided parameters at creation. The values are immutable for the life of the backfill. partition_name fun partition_name(partition_name: String !): GetNextBatchRangeRequest.Builder ! precomputing fun precomputing(precomputing: Boolean !): GetNextBatchRangeRequest.Builder ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case. previous_end_key fun previous_end_key(previous_end_key: ByteString!): GetNextBatchRangeRequest.Builder ! End key of the previous computed batch. Can be null for the first call. scan_size fun scan_size(scan_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of records to scan when computing a batch range.","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/backfill_id/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / backfill_id backfill_id \u00b6 fun backfill_id(backfill_id: String !): GetNextBatchRangeRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. var backfill_id: String !","title":"backfill_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/backfill_id/#backfill_id","text":"fun backfill_id(backfill_id: String !): GetNextBatchRangeRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. var backfill_id: String !","title":"backfill_id"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/backfill_name/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / backfill_name backfill_name \u00b6 fun backfill_name(backfill_name: String !): GetNextBatchRangeRequest.Builder ! var backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/backfill_name/#backfill_name","text":"fun backfill_name(backfill_name: String !): GetNextBatchRangeRequest.Builder ! var backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/backfill_range/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / backfill_range backfill_range \u00b6 fun backfill_range(backfill_range: KeyRange !): GetNextBatchRangeRequest.Builder ! The range of the whole backfill. This determines where the first batch starts and the last batch ends. var backfill_range: KeyRange !","title":"backfill_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/backfill_range/#backfill_range","text":"fun backfill_range(backfill_range: KeyRange !): GetNextBatchRangeRequest.Builder ! The range of the whole backfill. This determines where the first batch starts and the last batch ends. var backfill_range: KeyRange !","title":"backfill_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/batch_size/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / batch_size batch_size \u00b6 fun batch_size(batch_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of matching records to return in a batch range. var batch_size: Long !","title":"batch_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/batch_size/#batch_size","text":"fun batch_size(batch_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of matching records to return in a batch range. var batch_size: Long !","title":"batch_size"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / build build \u00b6 fun build(): GetNextBatchRangeRequest !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/build/#build","text":"fun build(): GetNextBatchRangeRequest !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/compute_count_limit/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / compute_count_limit compute_count_limit \u00b6 fun compute_count_limit(compute_count_limit: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this many results. var compute_count_limit: Long !","title":"compute_count_limit - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/compute_count_limit/#compute_count_limit","text":"fun compute_count_limit(compute_count_limit: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this many results. var compute_count_limit: Long !","title":"compute_count_limit"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/compute_time_limit_ms/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / compute_time_limit_ms compute_time_limit_ms \u00b6 fun compute_time_limit_ms(compute_time_limit_ms: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this duration elapses. var compute_time_limit_ms: Long !","title":"compute_time_limit_ms - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/compute_time_limit_ms/#compute_time_limit_ms","text":"fun compute_time_limit_ms(compute_time_limit_ms: Long !): GetNextBatchRangeRequest.Builder ! Compute as many batches as possible until this duration elapses. var compute_time_limit_ms: Long !","title":"compute_time_limit_ms"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/dry_run/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / dry_run dry_run \u00b6 fun dry_run(dry_run: Boolean !): GetNextBatchRangeRequest.Builder ! var dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/dry_run/#dry_run","text":"fun dry_run(dry_run: Boolean !): GetNextBatchRangeRequest.Builder ! var dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/parameters/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / parameters parameters \u00b6 fun parameters(parameters: MutableMap < String !, ByteString!>!): GetNextBatchRangeRequest.Builder ! User provided parameters at creation. The values are immutable for the life of the backfill. var parameters: MutableMap < String !, ByteString!>!","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/parameters/#parameters","text":"fun parameters(parameters: MutableMap < String !, ByteString!>!): GetNextBatchRangeRequest.Builder ! User provided parameters at creation. The values are immutable for the life of the backfill. var parameters: MutableMap < String !, ByteString!>!","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/partition_name/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / partition_name partition_name \u00b6 fun partition_name(partition_name: String !): GetNextBatchRangeRequest.Builder ! var partition_name: String !","title":"partition_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/partition_name/#partition_name","text":"fun partition_name(partition_name: String !): GetNextBatchRangeRequest.Builder ! var partition_name: String !","title":"partition_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/precomputing/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / precomputing precomputing \u00b6 fun precomputing(precomputing: Boolean !): GetNextBatchRangeRequest.Builder ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case. var precomputing: Boolean !","title":"precomputing - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/precomputing/#precomputing","text":"fun precomputing(precomputing: Boolean !): GetNextBatchRangeRequest.Builder ! Indicates if this request is used to precompute data size. Client can choose to use a more optimized query in this case. var precomputing: Boolean !","title":"precomputing"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/previous_end_key/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / previous_end_key previous_end_key \u00b6 fun previous_end_key(previous_end_key: ByteString!): GetNextBatchRangeRequest.Builder ! End key of the previous computed batch. Can be null for the first call. var previous_end_key: ByteString!","title":"previous_end_key - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/previous_end_key/#previous_end_key","text":"fun previous_end_key(previous_end_key: ByteString!): GetNextBatchRangeRequest.Builder ! End key of the previous computed batch. Can be null for the first call. var previous_end_key: ByteString!","title":"previous_end_key"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/scan_size/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeRequest / Builder / scan_size scan_size \u00b6 fun scan_size(scan_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of records to scan when computing a batch range. var scan_size: Long !","title":"scan_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-request/-builder/scan_size/#scan_size","text":"fun scan_size(scan_size: Long !): GetNextBatchRangeRequest.Builder ! Max number of records to scan when computing a batch range. var scan_size: Long !","title":"scan_size"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse GetNextBatchRangeResponse \u00b6 class GetNextBatchRangeResponse : Message< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !> Types \u00b6 Name Summary Batch class Batch : Message< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !> Builder class Builder : Builder< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !> Constructors \u00b6 Name Summary <init> GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!) GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse !>! batches val batches: MutableList < GetNextBatchRangeResponse.Batch !>! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): GetNextBatchRangeResponse.Builder ! toString fun toString(): String","title":"GetNextBatchRangeResponse - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/#getnextbatchrangeresponse","text":"class GetNextBatchRangeResponse : Message< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !>","title":"GetNextBatchRangeResponse"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/#types","text":"Name Summary Batch class Batch : Message< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !> Builder class Builder : Builder< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/#constructors","text":"Name Summary <init> GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!) GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse !>! batches val batches: MutableList < GetNextBatchRangeResponse.Batch !>!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): GetNextBatchRangeResponse.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-init-/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / <init> <init> \u00b6 GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!) GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-init-/#init","text":"GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!) GetNextBatchRangeResponse(batches: MutableList < GetNextBatchRangeResponse.Batch !>!, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/batches/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / batches batches \u00b6 val batches: MutableList < GetNextBatchRangeResponse.Batch !>!","title":"batches - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/batches/#batches","text":"val batches: MutableList < GetNextBatchRangeResponse.Batch !>!","title":"batches"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/equals/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/hash-code/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/new-builder/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / newBuilder newBuilder \u00b6 fun newBuilder(): GetNextBatchRangeResponse.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/new-builder/#newbuilder","text":"fun newBuilder(): GetNextBatchRangeResponse.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/to-string/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch Batch \u00b6 class Batch : Message< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !> Constructors \u00b6 Name Summary <init> Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !) Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse.Batch !>! batch_range val batch_range: KeyRange ! DEFAULT_MATCHING_RECORD_COUNT static val DEFAULT_MATCHING_RECORD_COUNT: Long ! DEFAULT_SCANNED_RECORD_COUNT static val DEFAULT_SCANNED_RECORD_COUNT: Long ! matching_record_count val matching_record_count: Long ! scanned_record_count val scanned_record_count: Long ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): GetNextBatchRangeResponse.Batch.Builder ! toString fun toString(): String","title":"Batch - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/#batch","text":"class Batch : Message< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !>","title":"Batch"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/#types","text":"Name Summary Builder class Builder : Builder< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/#constructors","text":"Name Summary <init> Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !) Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse.Batch !>! batch_range val batch_range: KeyRange ! DEFAULT_MATCHING_RECORD_COUNT static val DEFAULT_MATCHING_RECORD_COUNT: Long ! DEFAULT_SCANNED_RECORD_COUNT static val DEFAULT_SCANNED_RECORD_COUNT: Long ! matching_record_count val matching_record_count: Long ! scanned_record_count val scanned_record_count: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): GetNextBatchRangeResponse.Batch.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse.Batch !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< GetNextBatchRangeResponse.Batch !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-d-e-f-a-u-l-t_-m-a-t-c-h-i-n-g_-r-e-c-o-r-d_-c-o-u-n-t/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / DEFAULT_MATCHING_RECORD_COUNT DEFAULT_MATCHING_RECORD_COUNT \u00b6 static val DEFAULT_MATCHING_RECORD_COUNT: Long !","title":"DEFAULT_MATCHING_RECORD_COUNT - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-d-e-f-a-u-l-t_-m-a-t-c-h-i-n-g_-r-e-c-o-r-d_-c-o-u-n-t/#default_matching_record_count","text":"static val DEFAULT_MATCHING_RECORD_COUNT: Long !","title":"DEFAULT_MATCHING_RECORD_COUNT"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-d-e-f-a-u-l-t_-s-c-a-n-n-e-d_-r-e-c-o-r-d_-c-o-u-n-t/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / DEFAULT_SCANNED_RECORD_COUNT DEFAULT_SCANNED_RECORD_COUNT \u00b6 static val DEFAULT_SCANNED_RECORD_COUNT: Long !","title":"DEFAULT_SCANNED_RECORD_COUNT - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-d-e-f-a-u-l-t_-s-c-a-n-n-e-d_-r-e-c-o-r-d_-c-o-u-n-t/#default_scanned_record_count","text":"static val DEFAULT_SCANNED_RECORD_COUNT: Long !","title":"DEFAULT_SCANNED_RECORD_COUNT"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-init-/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / <init> <init> \u00b6 Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !) Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-init-/#init","text":"Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !) Batch(batch_range: KeyRange !, scanned_record_count: Long !, matching_record_count: Long !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/batch_range/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / batch_range batch_range \u00b6 val batch_range: KeyRange !","title":"batch_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/batch_range/#batch_range","text":"val batch_range: KeyRange !","title":"batch_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/equals/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/hash-code/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/matching_record_count/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / matching_record_count matching_record_count \u00b6 val matching_record_count: Long !","title":"matching_record_count - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/matching_record_count/#matching_record_count","text":"val matching_record_count: Long !","title":"matching_record_count"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/new-builder/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / newBuilder newBuilder \u00b6 fun newBuilder(): GetNextBatchRangeResponse.Batch.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/new-builder/#newbuilder","text":"fun newBuilder(): GetNextBatchRangeResponse.Batch.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/scanned_record_count/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / scanned_record_count scanned_record_count \u00b6 val scanned_record_count: Long !","title":"scanned_record_count - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/scanned_record_count/#scanned_record_count","text":"val scanned_record_count: Long !","title":"scanned_record_count"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/to-string/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / Builder Builder \u00b6 class Builder : Builder< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary batch_range var batch_range: KeyRange ! matching_record_count var matching_record_count: Long ! scanned_record_count var scanned_record_count: Long ! Functions \u00b6 Name Summary batch_range fun batch_range(batch_range: KeyRange !): GetNextBatchRangeResponse.Batch.Builder ! build fun build(): GetNextBatchRangeResponse.Batch ! matching_record_count fun matching_record_count(matching_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder ! scanned_record_count fun scanned_record_count(scanned_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/#builder","text":"class Builder : Builder< GetNextBatchRangeResponse.Batch !, GetNextBatchRangeResponse.Batch.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/#properties","text":"Name Summary batch_range var batch_range: KeyRange ! matching_record_count var matching_record_count: Long ! scanned_record_count var scanned_record_count: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/#functions","text":"Name Summary batch_range fun batch_range(batch_range: KeyRange !): GetNextBatchRangeResponse.Batch.Builder ! build fun build(): GetNextBatchRangeResponse.Batch ! matching_record_count fun matching_record_count(matching_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder ! scanned_record_count fun scanned_record_count(scanned_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/batch_range/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / Builder / batch_range batch_range \u00b6 fun batch_range(batch_range: KeyRange !): GetNextBatchRangeResponse.Batch.Builder ! var batch_range: KeyRange !","title":"batch_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/batch_range/#batch_range","text":"fun batch_range(batch_range: KeyRange !): GetNextBatchRangeResponse.Batch.Builder ! var batch_range: KeyRange !","title":"batch_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / Builder / build build \u00b6 fun build(): GetNextBatchRangeResponse.Batch !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/build/#build","text":"fun build(): GetNextBatchRangeResponse.Batch !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/matching_record_count/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / Builder / matching_record_count matching_record_count \u00b6 fun matching_record_count(matching_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder ! var matching_record_count: Long !","title":"matching_record_count - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/matching_record_count/#matching_record_count","text":"fun matching_record_count(matching_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder ! var matching_record_count: Long !","title":"matching_record_count"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/scanned_record_count/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Batch / Builder / scanned_record_count scanned_record_count \u00b6 fun scanned_record_count(scanned_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder ! var scanned_record_count: Long !","title":"scanned_record_count - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-batch/-builder/scanned_record_count/#scanned_record_count","text":"fun scanned_record_count(scanned_record_count: Long !): GetNextBatchRangeResponse.Batch.Builder ! var scanned_record_count: Long !","title":"scanned_record_count"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Builder Builder \u00b6 class Builder : Builder< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary batches var batches: MutableList < GetNextBatchRangeResponse.Batch !>! Functions \u00b6 Name Summary batches fun batches(batches: MutableList < GetNextBatchRangeResponse.Batch !>!): GetNextBatchRangeResponse.Builder ! build fun build(): GetNextBatchRangeResponse !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/#builder","text":"class Builder : Builder< GetNextBatchRangeResponse !, GetNextBatchRangeResponse.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/#properties","text":"Name Summary batches var batches: MutableList < GetNextBatchRangeResponse.Batch !>!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/#functions","text":"Name Summary batches fun batches(batches: MutableList < GetNextBatchRangeResponse.Batch !>!): GetNextBatchRangeResponse.Builder ! build fun build(): GetNextBatchRangeResponse !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/batches/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Builder / batches batches \u00b6 fun batches(batches: MutableList < GetNextBatchRangeResponse.Batch !>!): GetNextBatchRangeResponse.Builder ! var batches: MutableList < GetNextBatchRangeResponse.Batch !>!","title":"batches - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/batches/#batches","text":"fun batches(batches: MutableList < GetNextBatchRangeResponse.Batch !>!): GetNextBatchRangeResponse.Builder ! var batches: MutableList < GetNextBatchRangeResponse.Batch !>!","title":"batches"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / GetNextBatchRangeResponse / Builder / build build \u00b6 fun build(): GetNextBatchRangeResponse !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-get-next-batch-range-response/-builder/build/#build","text":"fun build(): GetNextBatchRangeResponse !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/","text":"client / app.cash.backfila.protos.clientservice / KeyRange KeyRange \u00b6 class KeyRange : Message< KeyRange !, KeyRange.Builder !> In this file: APIs that backfila calls on the client service. Inclusive range of primary keys. Backfila will never make assumptions about the type of the primary key, these are passed around as tokens. Types \u00b6 Name Summary Builder class Builder : Builder< KeyRange !, KeyRange.Builder !> Constructors \u00b6 Name Summary <init> KeyRange(start: ByteString!, end: ByteString!) KeyRange(start: ByteString!, end: ByteString!, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< KeyRange !>! DEFAULT_END static val DEFAULT_END: ByteString! DEFAULT_START static val DEFAULT_START: ByteString! end val end: ByteString! start val start: ByteString! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): KeyRange.Builder ! toString fun toString(): String","title":"KeyRange - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/#keyrange","text":"class KeyRange : Message< KeyRange !, KeyRange.Builder !> In this file: APIs that backfila calls on the client service. Inclusive range of primary keys. Backfila will never make assumptions about the type of the primary key, these are passed around as tokens.","title":"KeyRange"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/#types","text":"Name Summary Builder class Builder : Builder< KeyRange !, KeyRange.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/#constructors","text":"Name Summary <init> KeyRange(start: ByteString!, end: ByteString!) KeyRange(start: ByteString!, end: ByteString!, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< KeyRange !>! DEFAULT_END static val DEFAULT_END: ByteString! DEFAULT_START static val DEFAULT_START: ByteString! end val end: ByteString! start val start: ByteString!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): KeyRange.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< KeyRange !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< KeyRange !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-d-e-f-a-u-l-t_-e-n-d/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / DEFAULT_END DEFAULT_END \u00b6 static val DEFAULT_END: ByteString!","title":"DEFAULT_END - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-d-e-f-a-u-l-t_-e-n-d/#default_end","text":"static val DEFAULT_END: ByteString!","title":"DEFAULT_END"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-d-e-f-a-u-l-t_-s-t-a-r-t/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / DEFAULT_START DEFAULT_START \u00b6 static val DEFAULT_START: ByteString!","title":"DEFAULT_START - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-d-e-f-a-u-l-t_-s-t-a-r-t/#default_start","text":"static val DEFAULT_START: ByteString!","title":"DEFAULT_START"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-init-/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / <init> <init> \u00b6 KeyRange(start: ByteString!, end: ByteString!) KeyRange(start: ByteString!, end: ByteString!, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-init-/#init","text":"KeyRange(start: ByteString!, end: ByteString!) KeyRange(start: ByteString!, end: ByteString!, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/end/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / end end \u00b6 val end: ByteString!","title":"end - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/end/#end","text":"val end: ByteString!","title":"end"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/equals/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/hash-code/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/new-builder/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / newBuilder newBuilder \u00b6 fun newBuilder(): KeyRange.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/new-builder/#newbuilder","text":"fun newBuilder(): KeyRange.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/start/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / start start \u00b6 val start: ByteString!","title":"start - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/start/#start","text":"val start: ByteString!","title":"start"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/to-string/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / Builder Builder \u00b6 class Builder : Builder< KeyRange !, KeyRange.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary end var end: ByteString! start var start: ByteString! Functions \u00b6 Name Summary build fun build(): KeyRange ! end fun end(end: ByteString!): KeyRange.Builder ! start fun start(start: ByteString!): KeyRange.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/#builder","text":"class Builder : Builder< KeyRange !, KeyRange.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/#properties","text":"Name Summary end var end: ByteString! start var start: ByteString!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/#functions","text":"Name Summary build fun build(): KeyRange ! end fun end(end: ByteString!): KeyRange.Builder ! start fun start(start: ByteString!): KeyRange.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / Builder / build build \u00b6 fun build(): KeyRange !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/build/#build","text":"fun build(): KeyRange !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/end/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / Builder / end end \u00b6 fun end(end: ByteString!): KeyRange.Builder ! var end: ByteString!","title":"end - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/end/#end","text":"fun end(end: ByteString!): KeyRange.Builder ! var end: ByteString!","title":"end"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/start/","text":"client / app.cash.backfila.protos.clientservice / KeyRange / Builder / start start \u00b6 fun start(start: ByteString!): KeyRange.Builder ! var start: ByteString!","title":"start - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-key-range/-builder/start/#start","text":"fun start(start: ByteString!): KeyRange.Builder ! var start: ByteString!","title":"start"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData PipelinedData \u00b6 class PipelinedData : Message< PipelinedData !, PipelinedData.Builder !> Pipelined data can be any format as long as both the consumer and provider agree on it. This structure is passed around from the source to the target unchanged. Types \u00b6 Name Summary Builder class Builder : Builder< PipelinedData !, PipelinedData.Builder !> Constructors \u00b6 Name Summary <init> PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!) PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PipelinedData !>! metadata val metadata: MutableList <ByteString!>! records val records: MutableList < PipelinedRecord !>! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PipelinedData.Builder ! toString fun toString(): String","title":"PipelinedData - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/#pipelineddata","text":"class PipelinedData : Message< PipelinedData !, PipelinedData.Builder !> Pipelined data can be any format as long as both the consumer and provider agree on it. This structure is passed around from the source to the target unchanged.","title":"PipelinedData"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/#types","text":"Name Summary Builder class Builder : Builder< PipelinedData !, PipelinedData.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/#constructors","text":"Name Summary <init> PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!) PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PipelinedData !>! metadata val metadata: MutableList <ByteString!>! records val records: MutableList < PipelinedRecord !>!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PipelinedData.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< PipelinedData !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< PipelinedData !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-init-/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / <init> <init> \u00b6 PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!) PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-init-/#init","text":"PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!) PipelinedData(records: MutableList < PipelinedRecord !>!, metadata: MutableList <ByteString!>!, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/equals/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/hash-code/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/metadata/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / metadata metadata \u00b6 val metadata: MutableList <ByteString!>!","title":"metadata - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/metadata/#metadata","text":"val metadata: MutableList <ByteString!>!","title":"metadata"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/new-builder/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / newBuilder newBuilder \u00b6 fun newBuilder(): PipelinedData.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/new-builder/#newbuilder","text":"fun newBuilder(): PipelinedData.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/records/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / records records \u00b6 val records: MutableList < PipelinedRecord !>!","title":"records - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/records/#records","text":"val records: MutableList < PipelinedRecord !>!","title":"records"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/to-string/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / Builder Builder \u00b6 class Builder : Builder< PipelinedData !, PipelinedData.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary metadata var metadata: MutableList <ByteString!>! records var records: MutableList < PipelinedRecord !>! Functions \u00b6 Name Summary build fun build(): PipelinedData ! metadata fun metadata(metadata: MutableList <ByteString!>!): PipelinedData.Builder ! records fun records(records: MutableList < PipelinedRecord !>!): PipelinedData.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/#builder","text":"class Builder : Builder< PipelinedData !, PipelinedData.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/#properties","text":"Name Summary metadata var metadata: MutableList <ByteString!>! records var records: MutableList < PipelinedRecord !>!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/#functions","text":"Name Summary build fun build(): PipelinedData ! metadata fun metadata(metadata: MutableList <ByteString!>!): PipelinedData.Builder ! records fun records(records: MutableList < PipelinedRecord !>!): PipelinedData.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / Builder / build build \u00b6 fun build(): PipelinedData !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/build/#build","text":"fun build(): PipelinedData !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/metadata/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / Builder / metadata metadata \u00b6 fun metadata(metadata: MutableList <ByteString!>!): PipelinedData.Builder ! var metadata: MutableList <ByteString!>!","title":"metadata - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/metadata/#metadata","text":"fun metadata(metadata: MutableList <ByteString!>!): PipelinedData.Builder ! var metadata: MutableList <ByteString!>!","title":"metadata"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/records/","text":"client / app.cash.backfila.protos.clientservice / PipelinedData / Builder / records records \u00b6 fun records(records: MutableList < PipelinedRecord !>!): PipelinedData.Builder ! var records: MutableList < PipelinedRecord !>!","title":"records - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-data/-builder/records/#records","text":"fun records(records: MutableList < PipelinedRecord !>!): PipelinedData.Builder ! var records: MutableList < PipelinedRecord !>!","title":"records"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord PipelinedRecord \u00b6 class PipelinedRecord : Message< PipelinedRecord !, PipelinedRecord.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< PipelinedRecord !, PipelinedRecord.Builder !> Constructors \u00b6 Name Summary <init> PipelinedRecord(data: ByteString!) PipelinedRecord(data: ByteString!, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PipelinedRecord !>! data val data: ByteString! DEFAULT_DATA static val DEFAULT_DATA: ByteString! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PipelinedRecord.Builder ! toString fun toString(): String","title":"PipelinedRecord - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/#pipelinedrecord","text":"class PipelinedRecord : Message< PipelinedRecord !, PipelinedRecord.Builder !>","title":"PipelinedRecord"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/#types","text":"Name Summary Builder class Builder : Builder< PipelinedRecord !, PipelinedRecord.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/#constructors","text":"Name Summary <init> PipelinedRecord(data: ByteString!) PipelinedRecord(data: ByteString!, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PipelinedRecord !>! data val data: ByteString! DEFAULT_DATA static val DEFAULT_DATA: ByteString!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PipelinedRecord.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< PipelinedRecord !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< PipelinedRecord !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-d-e-f-a-u-l-t_-d-a-t-a/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / DEFAULT_DATA DEFAULT_DATA \u00b6 static val DEFAULT_DATA: ByteString!","title":"DEFAULT_DATA - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-d-e-f-a-u-l-t_-d-a-t-a/#default_data","text":"static val DEFAULT_DATA: ByteString!","title":"DEFAULT_DATA"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-init-/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / <init> <init> \u00b6 PipelinedRecord(data: ByteString!) PipelinedRecord(data: ByteString!, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-init-/#init","text":"PipelinedRecord(data: ByteString!) PipelinedRecord(data: ByteString!, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/data/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / data data \u00b6 val data: ByteString!","title":"data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/data/#data","text":"val data: ByteString!","title":"data"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/equals/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/hash-code/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/new-builder/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / newBuilder newBuilder \u00b6 fun newBuilder(): PipelinedRecord.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/new-builder/#newbuilder","text":"fun newBuilder(): PipelinedRecord.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/to-string/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / Builder Builder \u00b6 class Builder : Builder< PipelinedRecord !, PipelinedRecord.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary data var data: ByteString! Functions \u00b6 Name Summary build fun build(): PipelinedRecord ! data fun data(data: ByteString!): PipelinedRecord.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/#builder","text":"class Builder : Builder< PipelinedRecord !, PipelinedRecord.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/#properties","text":"Name Summary data var data: ByteString!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/#functions","text":"Name Summary build fun build(): PipelinedRecord ! data fun data(data: ByteString!): PipelinedRecord.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / Builder / build build \u00b6 fun build(): PipelinedRecord !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/build/#build","text":"fun build(): PipelinedRecord !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/data/","text":"client / app.cash.backfila.protos.clientservice / PipelinedRecord / Builder / data data \u00b6 fun data(data: ByteString!): PipelinedRecord.Builder ! var data: ByteString!","title":"data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-pipelined-record/-builder/data/#data","text":"fun data(data: ByteString!): PipelinedRecord.Builder ! var data: ByteString!","title":"data"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest PrepareBackfillRequest \u00b6 class PrepareBackfillRequest : Message< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !> Constructors \u00b6 Name Summary <init> PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !) PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PrepareBackfillRequest !>! backfill_id val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name val backfill_name: String ! DEFAULT_BACKFILL_ID static val DEFAULT_BACKFILL_ID: String DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! dry_run val dry_run: Boolean ! parameters val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. range val range: KeyRange ! Range populated if specified by user in UI Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PrepareBackfillRequest.Builder ! toString fun toString(): String","title":"PrepareBackfillRequest - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/#preparebackfillrequest","text":"class PrepareBackfillRequest : Message< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !>","title":"PrepareBackfillRequest"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/#types","text":"Name Summary Builder class Builder : Builder< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/#constructors","text":"Name Summary <init> PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !) PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PrepareBackfillRequest !>! backfill_id val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name val backfill_name: String ! DEFAULT_BACKFILL_ID static val DEFAULT_BACKFILL_ID: String DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! dry_run val dry_run: Boolean ! parameters val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. range val range: KeyRange ! Range populated if specified by user in UI","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PrepareBackfillRequest.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< PrepareBackfillRequest !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< PrepareBackfillRequest !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-i-d/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / DEFAULT_BACKFILL_ID DEFAULT_BACKFILL_ID \u00b6 static val DEFAULT_BACKFILL_ID: String","title":"DEFAULT_BACKFILL_ID - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-i-d/#default_backfill_id","text":"static val DEFAULT_BACKFILL_ID: String","title":"DEFAULT_BACKFILL_ID"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / DEFAULT_BACKFILL_NAME DEFAULT_BACKFILL_NAME \u00b6 static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/#default_backfill_name","text":"static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / DEFAULT_DRY_RUN DEFAULT_DRY_RUN \u00b6 static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/#default_dry_run","text":"static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-init-/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / <init> <init> \u00b6 PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !) PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-init-/#init","text":"PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !) PrepareBackfillRequest(backfill_id: String !, backfill_name: String !, range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/backfill_id/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / backfill_id backfill_id \u00b6 val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation.","title":"backfill_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/backfill_id/#backfill_id","text":"val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation.","title":"backfill_id"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/backfill_name/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / backfill_name backfill_name \u00b6 val backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/backfill_name/#backfill_name","text":"val backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/dry_run/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / dry_run dry_run \u00b6 val dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/dry_run/#dry_run","text":"val dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/equals/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/hash-code/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/new-builder/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / newBuilder newBuilder \u00b6 fun newBuilder(): PrepareBackfillRequest.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/new-builder/#newbuilder","text":"fun newBuilder(): PrepareBackfillRequest.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/parameters/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / parameters parameters \u00b6 val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation.","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/parameters/#parameters","text":"val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation.","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/range/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / range range \u00b6 val range: KeyRange ! Range populated if specified by user in UI","title":"range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/range/#range","text":"val range: KeyRange ! Range populated if specified by user in UI","title":"range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/to-string/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder Builder \u00b6 class Builder : Builder< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfill_id var backfill_id: String ! backfill_name var backfill_name: String ! dry_run var dry_run: Boolean ! parameters var parameters: MutableMap < String !, ByteString!>! range var range: KeyRange ! Functions \u00b6 Name Summary backfill_id fun backfill_id(backfill_id: String !): PrepareBackfillRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name fun backfill_name(backfill_name: String !): PrepareBackfillRequest.Builder ! build fun build(): PrepareBackfillRequest ! dry_run fun dry_run(dry_run: Boolean !): PrepareBackfillRequest.Builder ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillRequest.Builder ! User provided parameters at creation. range fun range(range: KeyRange !): PrepareBackfillRequest.Builder ! Range populated if specified by user in UI","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/#builder","text":"class Builder : Builder< PrepareBackfillRequest !, PrepareBackfillRequest.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/#properties","text":"Name Summary backfill_id var backfill_id: String ! backfill_name var backfill_name: String ! dry_run var dry_run: Boolean ! parameters var parameters: MutableMap < String !, ByteString!>! range var range: KeyRange !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/#functions","text":"Name Summary backfill_id fun backfill_id(backfill_id: String !): PrepareBackfillRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name fun backfill_name(backfill_name: String !): PrepareBackfillRequest.Builder ! build fun build(): PrepareBackfillRequest ! dry_run fun dry_run(dry_run: Boolean !): PrepareBackfillRequest.Builder ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillRequest.Builder ! User provided parameters at creation. range fun range(range: KeyRange !): PrepareBackfillRequest.Builder ! Range populated if specified by user in UI","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/backfill_id/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder / backfill_id backfill_id \u00b6 fun backfill_id(backfill_id: String !): PrepareBackfillRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. var backfill_id: String !","title":"backfill_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/backfill_id/#backfill_id","text":"fun backfill_id(backfill_id: String !): PrepareBackfillRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. var backfill_id: String !","title":"backfill_id"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/backfill_name/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder / backfill_name backfill_name \u00b6 fun backfill_name(backfill_name: String !): PrepareBackfillRequest.Builder ! var backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/backfill_name/#backfill_name","text":"fun backfill_name(backfill_name: String !): PrepareBackfillRequest.Builder ! var backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder / build build \u00b6 fun build(): PrepareBackfillRequest !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/build/#build","text":"fun build(): PrepareBackfillRequest !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/dry_run/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder / dry_run dry_run \u00b6 fun dry_run(dry_run: Boolean !): PrepareBackfillRequest.Builder ! var dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/dry_run/#dry_run","text":"fun dry_run(dry_run: Boolean !): PrepareBackfillRequest.Builder ! var dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/parameters/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder / parameters parameters \u00b6 fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillRequest.Builder ! User provided parameters at creation. var parameters: MutableMap < String !, ByteString!>!","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/parameters/#parameters","text":"fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillRequest.Builder ! User provided parameters at creation. var parameters: MutableMap < String !, ByteString!>!","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/range/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillRequest / Builder / range range \u00b6 fun range(range: KeyRange !): PrepareBackfillRequest.Builder ! Range populated if specified by user in UI var range: KeyRange !","title":"range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-request/-builder/range/#range","text":"fun range(range: KeyRange !): PrepareBackfillRequest.Builder ! Range populated if specified by user in UI var range: KeyRange !","title":"range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse PrepareBackfillResponse \u00b6 class PrepareBackfillResponse : Message< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !> Partition class Partition : Message< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !> Constructors \u00b6 Name Summary <init> PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!) PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PrepareBackfillResponse !>! parameters val parameters: MutableMap < String !, ByteString!>! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters. partitions val partitions: MutableList < PrepareBackfillResponse.Partition !>! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PrepareBackfillResponse.Builder ! toString fun toString(): String","title":"PrepareBackfillResponse - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/#preparebackfillresponse","text":"class PrepareBackfillResponse : Message< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !>","title":"PrepareBackfillResponse"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/#types","text":"Name Summary Builder class Builder : Builder< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !> Partition class Partition : Message< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/#constructors","text":"Name Summary <init> PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!) PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PrepareBackfillResponse !>! parameters val parameters: MutableMap < String !, ByteString!>! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters. partitions val partitions: MutableList < PrepareBackfillResponse.Partition !>!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PrepareBackfillResponse.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< PrepareBackfillResponse !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< PrepareBackfillResponse !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-init-/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / <init> <init> \u00b6 PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!) PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-init-/#init","text":"PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!) PrepareBackfillResponse(partitions: MutableList < PrepareBackfillResponse.Partition !>!, parameters: MutableMap < String !, ByteString!>!, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/equals/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/hash-code/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/new-builder/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / newBuilder newBuilder \u00b6 fun newBuilder(): PrepareBackfillResponse.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/new-builder/#newbuilder","text":"fun newBuilder(): PrepareBackfillResponse.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/parameters/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / parameters parameters \u00b6 val parameters: MutableMap < String !, ByteString!>! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters.","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/parameters/#parameters","text":"val parameters: MutableMap < String !, ByteString!>! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters.","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/partitions/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / partitions partitions \u00b6 val partitions: MutableList < PrepareBackfillResponse.Partition !>!","title":"partitions - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/partitions/#partitions","text":"val partitions: MutableList < PrepareBackfillResponse.Partition !>!","title":"partitions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/to-string/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Builder Builder \u00b6 class Builder : Builder< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary parameters var parameters: MutableMap < String !, ByteString!>! partitions var partitions: MutableList < PrepareBackfillResponse.Partition !>! Functions \u00b6 Name Summary build fun build(): PrepareBackfillResponse ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillResponse.Builder ! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters. partitions fun partitions(partitions: MutableList < PrepareBackfillResponse.Partition !>!): PrepareBackfillResponse.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/#builder","text":"class Builder : Builder< PrepareBackfillResponse !, PrepareBackfillResponse.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/#properties","text":"Name Summary parameters var parameters: MutableMap < String !, ByteString!>! partitions var partitions: MutableList < PrepareBackfillResponse.Partition !>!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/#functions","text":"Name Summary build fun build(): PrepareBackfillResponse ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillResponse.Builder ! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters. partitions fun partitions(partitions: MutableList < PrepareBackfillResponse.Partition !>!): PrepareBackfillResponse.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Builder / build build \u00b6 fun build(): PrepareBackfillResponse !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/build/#build","text":"fun build(): PrepareBackfillResponse !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/parameters/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Builder / parameters parameters \u00b6 fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillResponse.Builder ! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters. var parameters: MutableMap < String !, ByteString!>!","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/parameters/#parameters","text":"fun parameters(parameters: MutableMap < String !, ByteString!>!): PrepareBackfillResponse.Builder ! Parameters created by the client to keep for the life of the backfill. Every backfill call will pass these parameters back, in addition to user provided parameters. var parameters: MutableMap < String !, ByteString!>!","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/partitions/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Builder / partitions partitions \u00b6 fun partitions(partitions: MutableList < PrepareBackfillResponse.Partition !>!): PrepareBackfillResponse.Builder ! var partitions: MutableList < PrepareBackfillResponse.Partition !>!","title":"partitions - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-builder/partitions/#partitions","text":"fun partitions(partitions: MutableList < PrepareBackfillResponse.Partition !>!): PrepareBackfillResponse.Builder ! var partitions: MutableList < PrepareBackfillResponse.Partition !>!","title":"partitions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition Partition \u00b6 class Partition : Message< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !> Constructors \u00b6 Name Summary <init> Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !) Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PrepareBackfillResponse.Partition !>! backfill_range val backfill_range: KeyRange ! DEFAULT_ESTIMATED_RECORD_COUNT static val DEFAULT_ESTIMATED_RECORD_COUNT: Long ! DEFAULT_PARTITION_NAME static val DEFAULT_PARTITION_NAME: String estimated_record_count val estimated_record_count: Long ! If available, an estimate can be provided here to display while the actual count is being computed. partition_name val partition_name: String ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PrepareBackfillResponse.Partition.Builder ! toString fun toString(): String","title":"Partition - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/#partition","text":"class Partition : Message< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !>","title":"Partition"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/#types","text":"Name Summary Builder class Builder : Builder< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/#constructors","text":"Name Summary <init> Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !) Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< PrepareBackfillResponse.Partition !>! backfill_range val backfill_range: KeyRange ! DEFAULT_ESTIMATED_RECORD_COUNT static val DEFAULT_ESTIMATED_RECORD_COUNT: Long ! DEFAULT_PARTITION_NAME static val DEFAULT_PARTITION_NAME: String estimated_record_count val estimated_record_count: Long ! If available, an estimate can be provided here to display while the actual count is being computed. partition_name val partition_name: String !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): PrepareBackfillResponse.Partition.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< PrepareBackfillResponse.Partition !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< PrepareBackfillResponse.Partition !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-d-e-f-a-u-l-t_-e-s-t-i-m-a-t-e-d_-r-e-c-o-r-d_-c-o-u-n-t/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / DEFAULT_ESTIMATED_RECORD_COUNT DEFAULT_ESTIMATED_RECORD_COUNT \u00b6 static val DEFAULT_ESTIMATED_RECORD_COUNT: Long !","title":"DEFAULT_ESTIMATED_RECORD_COUNT - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-d-e-f-a-u-l-t_-e-s-t-i-m-a-t-e-d_-r-e-c-o-r-d_-c-o-u-n-t/#default_estimated_record_count","text":"static val DEFAULT_ESTIMATED_RECORD_COUNT: Long !","title":"DEFAULT_ESTIMATED_RECORD_COUNT"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-d-e-f-a-u-l-t_-p-a-r-t-i-t-i-o-n_-n-a-m-e/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / DEFAULT_PARTITION_NAME DEFAULT_PARTITION_NAME \u00b6 static val DEFAULT_PARTITION_NAME: String","title":"DEFAULT_PARTITION_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-d-e-f-a-u-l-t_-p-a-r-t-i-t-i-o-n_-n-a-m-e/#default_partition_name","text":"static val DEFAULT_PARTITION_NAME: String","title":"DEFAULT_PARTITION_NAME"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-init-/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / <init> <init> \u00b6 Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !) Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-init-/#init","text":"Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !) Partition(partition_name: String !, backfill_range: KeyRange !, estimated_record_count: Long !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/backfill_range/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / backfill_range backfill_range \u00b6 val backfill_range: KeyRange !","title":"backfill_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/backfill_range/#backfill_range","text":"val backfill_range: KeyRange !","title":"backfill_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/equals/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/estimated_record_count/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / estimated_record_count estimated_record_count \u00b6 val estimated_record_count: Long ! If available, an estimate can be provided here to display while the actual count is being computed.","title":"estimated_record_count - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/estimated_record_count/#estimated_record_count","text":"val estimated_record_count: Long ! If available, an estimate can be provided here to display while the actual count is being computed.","title":"estimated_record_count"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/hash-code/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/new-builder/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / newBuilder newBuilder \u00b6 fun newBuilder(): PrepareBackfillResponse.Partition.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/new-builder/#newbuilder","text":"fun newBuilder(): PrepareBackfillResponse.Partition.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/partition_name/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / partition_name partition_name \u00b6 val partition_name: String !","title":"partition_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/partition_name/#partition_name","text":"val partition_name: String !","title":"partition_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/to-string/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / Builder Builder \u00b6 class Builder : Builder< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfill_range var backfill_range: KeyRange ! estimated_record_count var estimated_record_count: Long ! partition_name var partition_name: String ! Functions \u00b6 Name Summary backfill_range fun backfill_range(backfill_range: KeyRange !): PrepareBackfillResponse.Partition.Builder ! build fun build(): PrepareBackfillResponse.Partition ! estimated_record_count fun estimated_record_count(estimated_record_count: Long !): PrepareBackfillResponse.Partition.Builder ! If available, an estimate can be provided here to display while the actual count is being computed. partition_name fun partition_name(partition_name: String !): PrepareBackfillResponse.Partition.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/#builder","text":"class Builder : Builder< PrepareBackfillResponse.Partition !, PrepareBackfillResponse.Partition.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/#properties","text":"Name Summary backfill_range var backfill_range: KeyRange ! estimated_record_count var estimated_record_count: Long ! partition_name var partition_name: String !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/#functions","text":"Name Summary backfill_range fun backfill_range(backfill_range: KeyRange !): PrepareBackfillResponse.Partition.Builder ! build fun build(): PrepareBackfillResponse.Partition ! estimated_record_count fun estimated_record_count(estimated_record_count: Long !): PrepareBackfillResponse.Partition.Builder ! If available, an estimate can be provided here to display while the actual count is being computed. partition_name fun partition_name(partition_name: String !): PrepareBackfillResponse.Partition.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/backfill_range/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / Builder / backfill_range backfill_range \u00b6 fun backfill_range(backfill_range: KeyRange !): PrepareBackfillResponse.Partition.Builder ! var backfill_range: KeyRange !","title":"backfill_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/backfill_range/#backfill_range","text":"fun backfill_range(backfill_range: KeyRange !): PrepareBackfillResponse.Partition.Builder ! var backfill_range: KeyRange !","title":"backfill_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / Builder / build build \u00b6 fun build(): PrepareBackfillResponse.Partition !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/build/#build","text":"fun build(): PrepareBackfillResponse.Partition !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/estimated_record_count/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / Builder / estimated_record_count estimated_record_count \u00b6 fun estimated_record_count(estimated_record_count: Long !): PrepareBackfillResponse.Partition.Builder ! If available, an estimate can be provided here to display while the actual count is being computed. var estimated_record_count: Long !","title":"estimated_record_count - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/estimated_record_count/#estimated_record_count","text":"fun estimated_record_count(estimated_record_count: Long !): PrepareBackfillResponse.Partition.Builder ! If available, an estimate can be provided here to display while the actual count is being computed. var estimated_record_count: Long !","title":"estimated_record_count"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/partition_name/","text":"client / app.cash.backfila.protos.clientservice / PrepareBackfillResponse / Partition / Builder / partition_name partition_name \u00b6 fun partition_name(partition_name: String !): PrepareBackfillResponse.Partition.Builder ! var partition_name: String !","title":"partition_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-prepare-backfill-response/-partition/-builder/partition_name/#partition_name","text":"fun partition_name(partition_name: String !): PrepareBackfillResponse.Partition.Builder ! var partition_name: String !","title":"partition_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest RunBatchRequest \u00b6 class RunBatchRequest : Message< RunBatchRequest !, RunBatchRequest.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< RunBatchRequest !, RunBatchRequest.Builder !> Constructors \u00b6 Name Summary <init> RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !) RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< RunBatchRequest !>! backfill_id val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name val backfill_name: String ! batch_range val batch_range: KeyRange ! batch_size val batch_size: Long ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour. DEFAULT_BACKFILL_ID static val DEFAULT_BACKFILL_ID: String DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_BATCH_SIZE static val DEFAULT_BATCH_SIZE: Long ! DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! DEFAULT_PARTITION_NAME static val DEFAULT_PARTITION_NAME: String dry_run val dry_run: Boolean ! parameters val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. partition_name val partition_name: String ! pipelined_data val pipelined_data: PipelinedData ! Provided data from the source backfill if this is the target backfill in a pipelined backfill. Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): RunBatchRequest.Builder ! toString fun toString(): String","title":"RunBatchRequest - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/#runbatchrequest","text":"class RunBatchRequest : Message< RunBatchRequest !, RunBatchRequest.Builder !>","title":"RunBatchRequest"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/#types","text":"Name Summary Builder class Builder : Builder< RunBatchRequest !, RunBatchRequest.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/#constructors","text":"Name Summary <init> RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !) RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< RunBatchRequest !>! backfill_id val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name val backfill_name: String ! batch_range val batch_range: KeyRange ! batch_size val batch_size: Long ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour. DEFAULT_BACKFILL_ID static val DEFAULT_BACKFILL_ID: String DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_BATCH_SIZE static val DEFAULT_BATCH_SIZE: Long ! DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! DEFAULT_PARTITION_NAME static val DEFAULT_PARTITION_NAME: String dry_run val dry_run: Boolean ! parameters val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation. partition_name val partition_name: String ! pipelined_data val pipelined_data: PipelinedData ! Provided data from the source backfill if this is the target backfill in a pipelined backfill.","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): RunBatchRequest.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< RunBatchRequest !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< RunBatchRequest !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-i-d/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / DEFAULT_BACKFILL_ID DEFAULT_BACKFILL_ID \u00b6 static val DEFAULT_BACKFILL_ID: String","title":"DEFAULT_BACKFILL_ID - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-i-d/#default_backfill_id","text":"static val DEFAULT_BACKFILL_ID: String","title":"DEFAULT_BACKFILL_ID"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / DEFAULT_BACKFILL_NAME DEFAULT_BACKFILL_NAME \u00b6 static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/#default_backfill_name","text":"static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-b-a-t-c-h_-s-i-z-e/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / DEFAULT_BATCH_SIZE DEFAULT_BATCH_SIZE \u00b6 static val DEFAULT_BATCH_SIZE: Long !","title":"DEFAULT_BATCH_SIZE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-b-a-t-c-h_-s-i-z-e/#default_batch_size","text":"static val DEFAULT_BATCH_SIZE: Long !","title":"DEFAULT_BATCH_SIZE"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / DEFAULT_DRY_RUN DEFAULT_DRY_RUN \u00b6 static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/#default_dry_run","text":"static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-p-a-r-t-i-t-i-o-n_-n-a-m-e/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / DEFAULT_PARTITION_NAME DEFAULT_PARTITION_NAME \u00b6 static val DEFAULT_PARTITION_NAME: String","title":"DEFAULT_PARTITION_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-d-e-f-a-u-l-t_-p-a-r-t-i-t-i-o-n_-n-a-m-e/#default_partition_name","text":"static val DEFAULT_PARTITION_NAME: String","title":"DEFAULT_PARTITION_NAME"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-init-/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / <init> <init> \u00b6 RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !) RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-init-/#init","text":"RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !) RunBatchRequest(backfill_id: String !, backfill_name: String !, partition_name: String !, batch_range: KeyRange !, parameters: MutableMap < String !, ByteString!>!, dry_run: Boolean !, pipelined_data: PipelinedData !, batch_size: Long !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/backfill_id/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / backfill_id backfill_id \u00b6 val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation.","title":"backfill_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/backfill_id/#backfill_id","text":"val backfill_id: String ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation.","title":"backfill_id"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/backfill_name/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / backfill_name backfill_name \u00b6 val backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/backfill_name/#backfill_name","text":"val backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/batch_range/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / batch_range batch_range \u00b6 val batch_range: KeyRange !","title":"batch_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/batch_range/#batch_range","text":"val batch_range: KeyRange !","title":"batch_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/batch_size/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / batch_size batch_size \u00b6 val batch_size: Long ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour.","title":"batch_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/batch_size/#batch_size","text":"val batch_size: Long ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour.","title":"batch_size"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/dry_run/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / dry_run dry_run \u00b6 val dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/dry_run/#dry_run","text":"val dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/equals/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/hash-code/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/new-builder/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / newBuilder newBuilder \u00b6 fun newBuilder(): RunBatchRequest.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/new-builder/#newbuilder","text":"fun newBuilder(): RunBatchRequest.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/parameters/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / parameters parameters \u00b6 val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation.","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/parameters/#parameters","text":"val parameters: MutableMap < String !, ByteString!>! User provided parameters at creation.","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/partition_name/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / partition_name partition_name \u00b6 val partition_name: String !","title":"partition_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/partition_name/#partition_name","text":"val partition_name: String !","title":"partition_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/pipelined_data/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / pipelined_data pipelined_data \u00b6 val pipelined_data: PipelinedData ! Provided data from the source backfill if this is the target backfill in a pipelined backfill.","title":"pipelined_data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/pipelined_data/#pipelined_data","text":"val pipelined_data: PipelinedData ! Provided data from the source backfill if this is the target backfill in a pipelined backfill.","title":"pipelined_data"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/to-string/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder Builder \u00b6 class Builder : Builder< RunBatchRequest !, RunBatchRequest.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfill_id var backfill_id: String ! backfill_name var backfill_name: String ! batch_range var batch_range: KeyRange ! batch_size var batch_size: Long ! dry_run var dry_run: Boolean ! parameters var parameters: MutableMap < String !, ByteString!>! partition_name var partition_name: String ! pipelined_data var pipelined_data: PipelinedData ! Functions \u00b6 Name Summary backfill_id fun backfill_id(backfill_id: String !): RunBatchRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name fun backfill_name(backfill_name: String !): RunBatchRequest.Builder ! batch_range fun batch_range(batch_range: KeyRange !): RunBatchRequest.Builder ! batch_size fun batch_size(batch_size: Long !): RunBatchRequest.Builder ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour. build fun build(): RunBatchRequest ! dry_run fun dry_run(dry_run: Boolean !): RunBatchRequest.Builder ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): RunBatchRequest.Builder ! User provided parameters at creation. partition_name fun partition_name(partition_name: String !): RunBatchRequest.Builder ! pipelined_data fun pipelined_data(pipelined_data: PipelinedData !): RunBatchRequest.Builder ! Provided data from the source backfill if this is the target backfill in a pipelined backfill.","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/#builder","text":"class Builder : Builder< RunBatchRequest !, RunBatchRequest.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/#properties","text":"Name Summary backfill_id var backfill_id: String ! backfill_name var backfill_name: String ! batch_range var batch_range: KeyRange ! batch_size var batch_size: Long ! dry_run var dry_run: Boolean ! parameters var parameters: MutableMap < String !, ByteString!>! partition_name var partition_name: String ! pipelined_data var pipelined_data: PipelinedData !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/#functions","text":"Name Summary backfill_id fun backfill_id(backfill_id: String !): RunBatchRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. backfill_name fun backfill_name(backfill_name: String !): RunBatchRequest.Builder ! batch_range fun batch_range(batch_range: KeyRange !): RunBatchRequest.Builder ! batch_size fun batch_size(batch_size: Long !): RunBatchRequest.Builder ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour. build fun build(): RunBatchRequest ! dry_run fun dry_run(dry_run: Boolean !): RunBatchRequest.Builder ! parameters fun parameters(parameters: MutableMap < String !, ByteString!>!): RunBatchRequest.Builder ! User provided parameters at creation. partition_name fun partition_name(partition_name: String !): RunBatchRequest.Builder ! pipelined_data fun pipelined_data(pipelined_data: PipelinedData !): RunBatchRequest.Builder ! Provided data from the source backfill if this is the target backfill in a pipelined backfill.","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/backfill_id/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / backfill_id backfill_id \u00b6 fun backfill_id(backfill_id: String !): RunBatchRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. var backfill_id: String !","title":"backfill_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/backfill_id/#backfill_id","text":"fun backfill_id(backfill_id: String !): RunBatchRequest.Builder ! A unique identifier for this backfill run. Can be used as a caching key since backfill metadata is immutable after creation. var backfill_id: String !","title":"backfill_id"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/backfill_name/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / backfill_name backfill_name \u00b6 fun backfill_name(backfill_name: String !): RunBatchRequest.Builder ! var backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/backfill_name/#backfill_name","text":"fun backfill_name(backfill_name: String !): RunBatchRequest.Builder ! var backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/batch_range/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / batch_range batch_range \u00b6 fun batch_range(batch_range: KeyRange !): RunBatchRequest.Builder ! var batch_range: KeyRange !","title":"batch_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/batch_range/#batch_range","text":"fun batch_range(batch_range: KeyRange !): RunBatchRequest.Builder ! var batch_range: KeyRange !","title":"batch_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/batch_size/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / batch_size batch_size \u00b6 fun batch_size(batch_size: Long !): RunBatchRequest.Builder ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour. var batch_size: Long !","title":"batch_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/batch_size/#batch_size","text":"fun batch_size(batch_size: Long !): RunBatchRequest.Builder ! Current batch size set for this backfill run. A backfila client may use choose to use this but others may run the entire range. Consult your client implementations for exact behaviour. var batch_size: Long !","title":"batch_size"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / build build \u00b6 fun build(): RunBatchRequest !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/build/#build","text":"fun build(): RunBatchRequest !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/dry_run/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / dry_run dry_run \u00b6 fun dry_run(dry_run: Boolean !): RunBatchRequest.Builder ! var dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/dry_run/#dry_run","text":"fun dry_run(dry_run: Boolean !): RunBatchRequest.Builder ! var dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/parameters/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / parameters parameters \u00b6 fun parameters(parameters: MutableMap < String !, ByteString!>!): RunBatchRequest.Builder ! User provided parameters at creation. var parameters: MutableMap < String !, ByteString!>!","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/parameters/#parameters","text":"fun parameters(parameters: MutableMap < String !, ByteString!>!): RunBatchRequest.Builder ! User provided parameters at creation. var parameters: MutableMap < String !, ByteString!>!","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/partition_name/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / partition_name partition_name \u00b6 fun partition_name(partition_name: String !): RunBatchRequest.Builder ! var partition_name: String !","title":"partition_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/partition_name/#partition_name","text":"fun partition_name(partition_name: String !): RunBatchRequest.Builder ! var partition_name: String !","title":"partition_name"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/pipelined_data/","text":"client / app.cash.backfila.protos.clientservice / RunBatchRequest / Builder / pipelined_data pipelined_data \u00b6 fun pipelined_data(pipelined_data: PipelinedData !): RunBatchRequest.Builder ! Provided data from the source backfill if this is the target backfill in a pipelined backfill. var pipelined_data: PipelinedData !","title":"pipelined_data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-request/-builder/pipelined_data/#pipelined_data","text":"fun pipelined_data(pipelined_data: PipelinedData !): RunBatchRequest.Builder ! Provided data from the source backfill if this is the target backfill in a pipelined backfill. var pipelined_data: PipelinedData !","title":"pipelined_data"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse RunBatchResponse \u00b6 class RunBatchResponse : Message< RunBatchResponse !, RunBatchResponse.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< RunBatchResponse !, RunBatchResponse.Builder !> Constructors \u00b6 Name Summary <init> RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !) RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< RunBatchResponse !>! backoff_ms val backoff_ms: Long ! How much to sleep before starting new batches. For example can be set to replication lag. DEFAULT_BACKOFF_MS static val DEFAULT_BACKOFF_MS: Long ! DEFAULT_EXCEPTION_STACK_TRACE static val DEFAULT_EXCEPTION_STACK_TRACE: String exception_stack_trace val exception_stack_trace: String ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed. pipelined_data val pipelined_data: PipelinedData ! remaining_batch_range val remaining_batch_range: KeyRange ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches. Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): RunBatchResponse.Builder ! toString fun toString(): String","title":"RunBatchResponse - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/#runbatchresponse","text":"class RunBatchResponse : Message< RunBatchResponse !, RunBatchResponse.Builder !>","title":"RunBatchResponse"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/#types","text":"Name Summary Builder class Builder : Builder< RunBatchResponse !, RunBatchResponse.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/#constructors","text":"Name Summary <init> RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !) RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< RunBatchResponse !>! backoff_ms val backoff_ms: Long ! How much to sleep before starting new batches. For example can be set to replication lag. DEFAULT_BACKOFF_MS static val DEFAULT_BACKOFF_MS: Long ! DEFAULT_EXCEPTION_STACK_TRACE static val DEFAULT_EXCEPTION_STACK_TRACE: String exception_stack_trace val exception_stack_trace: String ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed. pipelined_data val pipelined_data: PipelinedData ! remaining_batch_range val remaining_batch_range: KeyRange ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches.","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): RunBatchResponse.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< RunBatchResponse !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< RunBatchResponse !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-d-e-f-a-u-l-t_-b-a-c-k-o-f-f_-m-s/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / DEFAULT_BACKOFF_MS DEFAULT_BACKOFF_MS \u00b6 static val DEFAULT_BACKOFF_MS: Long !","title":"DEFAULT_BACKOFF_MS - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-d-e-f-a-u-l-t_-b-a-c-k-o-f-f_-m-s/#default_backoff_ms","text":"static val DEFAULT_BACKOFF_MS: Long !","title":"DEFAULT_BACKOFF_MS"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-d-e-f-a-u-l-t_-e-x-c-e-p-t-i-o-n_-s-t-a-c-k_-t-r-a-c-e/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / DEFAULT_EXCEPTION_STACK_TRACE DEFAULT_EXCEPTION_STACK_TRACE \u00b6 static val DEFAULT_EXCEPTION_STACK_TRACE: String","title":"DEFAULT_EXCEPTION_STACK_TRACE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-d-e-f-a-u-l-t_-e-x-c-e-p-t-i-o-n_-s-t-a-c-k_-t-r-a-c-e/#default_exception_stack_trace","text":"static val DEFAULT_EXCEPTION_STACK_TRACE: String","title":"DEFAULT_EXCEPTION_STACK_TRACE"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-init-/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / <init> <init> \u00b6 RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !) RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-init-/#init","text":"RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !) RunBatchResponse(backoff_ms: Long !, pipelined_data: PipelinedData !, exception_stack_trace: String !, remaining_batch_range: KeyRange !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/backoff_ms/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / backoff_ms backoff_ms \u00b6 val backoff_ms: Long ! How much to sleep before starting new batches. For example can be set to replication lag.","title":"backoff_ms - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/backoff_ms/#backoff_ms","text":"val backoff_ms: Long ! How much to sleep before starting new batches. For example can be set to replication lag.","title":"backoff_ms"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/equals/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/exception_stack_trace/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / exception_stack_trace exception_stack_trace \u00b6 val exception_stack_trace: String ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed.","title":"exception_stack_trace - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/exception_stack_trace/#exception_stack_trace","text":"val exception_stack_trace: String ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed.","title":"exception_stack_trace"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/hash-code/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/new-builder/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / newBuilder newBuilder \u00b6 fun newBuilder(): RunBatchResponse.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/new-builder/#newbuilder","text":"fun newBuilder(): RunBatchResponse.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/pipelined_data/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / pipelined_data pipelined_data \u00b6 val pipelined_data: PipelinedData !","title":"pipelined_data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/pipelined_data/#pipelined_data","text":"val pipelined_data: PipelinedData !","title":"pipelined_data"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/remaining_batch_range/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / remaining_batch_range remaining_batch_range \u00b6 val remaining_batch_range: KeyRange ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches.","title":"remaining_batch_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/remaining_batch_range/#remaining_batch_range","text":"val remaining_batch_range: KeyRange ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches.","title":"remaining_batch_range"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/to-string/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / Builder Builder \u00b6 class Builder : Builder< RunBatchResponse !, RunBatchResponse.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backoff_ms var backoff_ms: Long ! exception_stack_trace var exception_stack_trace: String ! pipelined_data var pipelined_data: PipelinedData ! remaining_batch_range var remaining_batch_range: KeyRange ! Functions \u00b6 Name Summary backoff_ms fun backoff_ms(backoff_ms: Long !): RunBatchResponse.Builder ! How much to sleep before starting new batches. For example can be set to replication lag. build fun build(): RunBatchResponse ! exception_stack_trace fun exception_stack_trace(exception_stack_trace: String !): RunBatchResponse.Builder ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed. pipelined_data fun pipelined_data(pipelined_data: PipelinedData !): RunBatchResponse.Builder ! remaining_batch_range fun remaining_batch_range(remaining_batch_range: KeyRange !): RunBatchResponse.Builder ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches.","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/#builder","text":"class Builder : Builder< RunBatchResponse !, RunBatchResponse.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/#properties","text":"Name Summary backoff_ms var backoff_ms: Long ! exception_stack_trace var exception_stack_trace: String ! pipelined_data var pipelined_data: PipelinedData ! remaining_batch_range var remaining_batch_range: KeyRange !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/#functions","text":"Name Summary backoff_ms fun backoff_ms(backoff_ms: Long !): RunBatchResponse.Builder ! How much to sleep before starting new batches. For example can be set to replication lag. build fun build(): RunBatchResponse ! exception_stack_trace fun exception_stack_trace(exception_stack_trace: String !): RunBatchResponse.Builder ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed. pipelined_data fun pipelined_data(pipelined_data: PipelinedData !): RunBatchResponse.Builder ! remaining_batch_range fun remaining_batch_range(remaining_batch_range: KeyRange !): RunBatchResponse.Builder ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches.","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/-init-/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/backoff_ms/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / Builder / backoff_ms backoff_ms \u00b6 fun backoff_ms(backoff_ms: Long !): RunBatchResponse.Builder ! How much to sleep before starting new batches. For example can be set to replication lag. var backoff_ms: Long !","title":"backoff_ms - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/backoff_ms/#backoff_ms","text":"fun backoff_ms(backoff_ms: Long !): RunBatchResponse.Builder ! How much to sleep before starting new batches. For example can be set to replication lag. var backoff_ms: Long !","title":"backoff_ms"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/build/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / Builder / build build \u00b6 fun build(): RunBatchResponse !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/build/#build","text":"fun build(): RunBatchResponse !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/exception_stack_trace/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / Builder / exception_stack_trace exception_stack_trace \u00b6 fun exception_stack_trace(exception_stack_trace: String !): RunBatchResponse.Builder ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed. var exception_stack_trace: String !","title":"exception_stack_trace - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/exception_stack_trace/#exception_stack_trace","text":"fun exception_stack_trace(exception_stack_trace: String !): RunBatchResponse.Builder ! Stacktrace that will be surfaced to the user. If this is provided this batch request is assumed to have failed. var exception_stack_trace: String !","title":"exception_stack_trace"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/pipelined_data/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / Builder / pipelined_data pipelined_data \u00b6 fun pipelined_data(pipelined_data: PipelinedData !): RunBatchResponse.Builder ! var pipelined_data: PipelinedData !","title":"pipelined_data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/pipelined_data/#pipelined_data","text":"fun pipelined_data(pipelined_data: PipelinedData !): RunBatchResponse.Builder ! var pipelined_data: PipelinedData !","title":"pipelined_data"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/remaining_batch_range/","text":"client / app.cash.backfila.protos.clientservice / RunBatchResponse / Builder / remaining_batch_range remaining_batch_range \u00b6 fun remaining_batch_range(remaining_batch_range: KeyRange !): RunBatchResponse.Builder ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches. var remaining_batch_range: KeyRange !","title":"remaining_batch_range - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.clientservice/-run-batch-response/-builder/remaining_batch_range/#remaining_batch_range","text":"fun remaining_batch_range(remaining_batch_range: KeyRange !): RunBatchResponse.Builder ! Provided data from the backfila client telling backfila what part of the batch was not completed yet. Backfila will end up resuming with a new request containing either the remaining range or the original range. This is used by Backfila clients to relay what progress was completed in situations like time consuming batches. var remaining_batch_range: KeyRange !","title":"remaining_batch_range"},{"location":"0.x/client/app.cash.backfila.protos.service/","text":"client / app.cash.backfila.protos.service Package app.cash.backfila.protos.service \u00b6 Types \u00b6 Name Summary ConfigureServiceRequest class ConfigureServiceRequest : Message< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !> ConfigureServiceResponse class ConfigureServiceResponse : Message< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !> CreateAndStartBackfillRequest class CreateAndStartBackfillRequest : Message< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !> Creates a backfill under the calling service and starts it. CreateAndStartBackfillResponse class CreateAndStartBackfillResponse : Message< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !> CreateBackfillRequest class CreateBackfillRequest : Message< CreateBackfillRequest !, CreateBackfillRequest.Builder !> CreateBackfillResponse class CreateBackfillResponse : Message< CreateBackfillResponse !, CreateBackfillResponse.Builder !> Parameter class Parameter : Message< Parameter !, Parameter.Builder !> In this file: APIs that the service provides to the client.","title":"Package app.cash.backfila.protos.service - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/#package-appcashbackfilaprotosservice","text":"","title":"Package app.cash.backfila.protos.service"},{"location":"0.x/client/app.cash.backfila.protos.service/#types","text":"Name Summary ConfigureServiceRequest class ConfigureServiceRequest : Message< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !> ConfigureServiceResponse class ConfigureServiceResponse : Message< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !> CreateAndStartBackfillRequest class CreateAndStartBackfillRequest : Message< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !> Creates a backfill under the calling service and starts it. CreateAndStartBackfillResponse class CreateAndStartBackfillResponse : Message< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !> CreateBackfillRequest class CreateBackfillRequest : Message< CreateBackfillRequest !, CreateBackfillRequest.Builder !> CreateBackfillResponse class CreateBackfillResponse : Message< CreateBackfillResponse !, CreateBackfillResponse.Builder !> Parameter class Parameter : Message< Parameter !, Parameter.Builder !> In this file: APIs that the service provides to the client.","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest ConfigureServiceRequest \u00b6 class ConfigureServiceRequest : Message< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !> Types \u00b6 Name Summary BackfillData class BackfillData : Message< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !> Builder class Builder : Builder< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !> Constructors \u00b6 Name Summary <init> ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !) ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< ConfigureServiceRequest !>! backfills val backfills: MutableList < ConfigureServiceRequest.BackfillData !>! List of all available backfills in this service connector_extra_data val connector_extra_data: String ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"} connector_type val connector_type: String ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase). DEFAULT_CONNECTOR_EXTRA_DATA static val DEFAULT_CONNECTOR_EXTRA_DATA: String DEFAULT_CONNECTOR_TYPE static val DEFAULT_CONNECTOR_TYPE: String DEFAULT_SLACK_CHANNEL static val DEFAULT_SLACK_CHANNEL: String slack_channel val slack_channel: String ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): ConfigureServiceRequest.Builder ! toString fun toString(): String","title":"ConfigureServiceRequest - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/#configureservicerequest","text":"class ConfigureServiceRequest : Message< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !>","title":"ConfigureServiceRequest"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/#types","text":"Name Summary BackfillData class BackfillData : Message< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !> Builder class Builder : Builder< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/#constructors","text":"Name Summary <init> ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !) ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< ConfigureServiceRequest !>! backfills val backfills: MutableList < ConfigureServiceRequest.BackfillData !>! List of all available backfills in this service connector_extra_data val connector_extra_data: String ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"} connector_type val connector_type: String ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase). DEFAULT_CONNECTOR_EXTRA_DATA static val DEFAULT_CONNECTOR_EXTRA_DATA: String DEFAULT_CONNECTOR_TYPE static val DEFAULT_CONNECTOR_TYPE: String DEFAULT_SLACK_CHANNEL static val DEFAULT_SLACK_CHANNEL: String slack_channel val slack_channel: String !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): ConfigureServiceRequest.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< ConfigureServiceRequest !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< ConfigureServiceRequest !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-d-e-f-a-u-l-t_-c-o-n-n-e-c-t-o-r_-e-x-t-r-a_-d-a-t-a/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / DEFAULT_CONNECTOR_EXTRA_DATA DEFAULT_CONNECTOR_EXTRA_DATA \u00b6 static val DEFAULT_CONNECTOR_EXTRA_DATA: String","title":"DEFAULT_CONNECTOR_EXTRA_DATA - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-d-e-f-a-u-l-t_-c-o-n-n-e-c-t-o-r_-e-x-t-r-a_-d-a-t-a/#default_connector_extra_data","text":"static val DEFAULT_CONNECTOR_EXTRA_DATA: String","title":"DEFAULT_CONNECTOR_EXTRA_DATA"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-d-e-f-a-u-l-t_-c-o-n-n-e-c-t-o-r_-t-y-p-e/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / DEFAULT_CONNECTOR_TYPE DEFAULT_CONNECTOR_TYPE \u00b6 static val DEFAULT_CONNECTOR_TYPE: String","title":"DEFAULT_CONNECTOR_TYPE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-d-e-f-a-u-l-t_-c-o-n-n-e-c-t-o-r_-t-y-p-e/#default_connector_type","text":"static val DEFAULT_CONNECTOR_TYPE: String","title":"DEFAULT_CONNECTOR_TYPE"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-d-e-f-a-u-l-t_-s-l-a-c-k_-c-h-a-n-n-e-l/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / DEFAULT_SLACK_CHANNEL DEFAULT_SLACK_CHANNEL \u00b6 static val DEFAULT_SLACK_CHANNEL: String","title":"DEFAULT_SLACK_CHANNEL - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-d-e-f-a-u-l-t_-s-l-a-c-k_-c-h-a-n-n-e-l/#default_slack_channel","text":"static val DEFAULT_SLACK_CHANNEL: String","title":"DEFAULT_SLACK_CHANNEL"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-init-/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / <init> <init> \u00b6 ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !) ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-init-/#init","text":"ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !) ConfigureServiceRequest(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!, connector_type: String !, connector_extra_data: String !, slack_channel: String !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/backfills/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / backfills backfills \u00b6 val backfills: MutableList < ConfigureServiceRequest.BackfillData !>! List of all available backfills in this service","title":"backfills - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/backfills/#backfills","text":"val backfills: MutableList < ConfigureServiceRequest.BackfillData !>! List of all available backfills in this service","title":"backfills"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/connector_extra_data/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / connector_extra_data connector_extra_data \u00b6 val connector_extra_data: String ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"}","title":"connector_extra_data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/connector_extra_data/#connector_extra_data","text":"val connector_extra_data: String ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"}","title":"connector_extra_data"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/connector_type/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / connector_type connector_type \u00b6 val connector_type: String ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase).","title":"connector_type - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/connector_type/#connector_type","text":"val connector_type: String ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase).","title":"connector_type"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/equals/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/hash-code/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/new-builder/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / newBuilder newBuilder \u00b6 fun newBuilder(): ConfigureServiceRequest.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/new-builder/#newbuilder","text":"fun newBuilder(): ConfigureServiceRequest.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/slack_channel/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / slack_channel slack_channel \u00b6 val slack_channel: String !","title":"slack_channel - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/slack_channel/#slack_channel","text":"val slack_channel: String !","title":"slack_channel"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/to-string/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData BackfillData \u00b6 class BackfillData : Message< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !> Constructors \u00b6 Name Summary <init> BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !) BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< ConfigureServiceRequest.BackfillData !>! DEFAULT_DESCRIPTION static val DEFAULT_DESCRIPTION: String DEFAULT_NAME static val DEFAULT_NAME: String DEFAULT_REQUIRES_APPROVAL static val DEFAULT_REQUIRES_APPROVAL: Boolean ! DEFAULT_TYPE_CONSUMED static val DEFAULT_TYPE_CONSUMED: String DEFAULT_TYPE_PROVIDED static val DEFAULT_TYPE_PROVIDED: String description val description: String ! Description to show in the UI. name val name: String ! Identifies the backfill. Must be unique per service. parameters val parameters: MutableList < Parameter !>! Parameters the backfill will accept. An input is displayed in the UI for each parameter. requires_approval val requires_approval: Boolean ! If true the backfill will need approval from another user before it can be started. type_consumed val type_consumed: String ! type_provided val type_provided: String ! The class name of pipelined data, only set if backfill supports pipelining. Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): ConfigureServiceRequest.BackfillData.Builder ! toString fun toString(): String","title":"BackfillData - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/#backfilldata","text":"class BackfillData : Message< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !>","title":"BackfillData"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/#types","text":"Name Summary Builder class Builder : Builder< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/#constructors","text":"Name Summary <init> BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !) BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< ConfigureServiceRequest.BackfillData !>! DEFAULT_DESCRIPTION static val DEFAULT_DESCRIPTION: String DEFAULT_NAME static val DEFAULT_NAME: String DEFAULT_REQUIRES_APPROVAL static val DEFAULT_REQUIRES_APPROVAL: Boolean ! DEFAULT_TYPE_CONSUMED static val DEFAULT_TYPE_CONSUMED: String DEFAULT_TYPE_PROVIDED static val DEFAULT_TYPE_PROVIDED: String description val description: String ! Description to show in the UI. name val name: String ! Identifies the backfill. Must be unique per service. parameters val parameters: MutableList < Parameter !>! Parameters the backfill will accept. An input is displayed in the UI for each parameter. requires_approval val requires_approval: Boolean ! If true the backfill will need approval from another user before it can be started. type_consumed val type_consumed: String ! type_provided val type_provided: String ! The class name of pipelined data, only set if backfill supports pipelining.","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): ConfigureServiceRequest.BackfillData.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< ConfigureServiceRequest.BackfillData !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< ConfigureServiceRequest.BackfillData !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-d-e-s-c-r-i-p-t-i-o-n/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / DEFAULT_DESCRIPTION DEFAULT_DESCRIPTION \u00b6 static val DEFAULT_DESCRIPTION: String","title":"DEFAULT_DESCRIPTION - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-d-e-s-c-r-i-p-t-i-o-n/#default_description","text":"static val DEFAULT_DESCRIPTION: String","title":"DEFAULT_DESCRIPTION"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-n-a-m-e/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / DEFAULT_NAME DEFAULT_NAME \u00b6 static val DEFAULT_NAME: String","title":"DEFAULT_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-n-a-m-e/#default_name","text":"static val DEFAULT_NAME: String","title":"DEFAULT_NAME"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-r-e-q-u-i-r-e-s_-a-p-p-r-o-v-a-l/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / DEFAULT_REQUIRES_APPROVAL DEFAULT_REQUIRES_APPROVAL \u00b6 static val DEFAULT_REQUIRES_APPROVAL: Boolean !","title":"DEFAULT_REQUIRES_APPROVAL - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-r-e-q-u-i-r-e-s_-a-p-p-r-o-v-a-l/#default_requires_approval","text":"static val DEFAULT_REQUIRES_APPROVAL: Boolean !","title":"DEFAULT_REQUIRES_APPROVAL"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-t-y-p-e_-c-o-n-s-u-m-e-d/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / DEFAULT_TYPE_CONSUMED DEFAULT_TYPE_CONSUMED \u00b6 static val DEFAULT_TYPE_CONSUMED: String","title":"DEFAULT_TYPE_CONSUMED - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-t-y-p-e_-c-o-n-s-u-m-e-d/#default_type_consumed","text":"static val DEFAULT_TYPE_CONSUMED: String","title":"DEFAULT_TYPE_CONSUMED"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-t-y-p-e_-p-r-o-v-i-d-e-d/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / DEFAULT_TYPE_PROVIDED DEFAULT_TYPE_PROVIDED \u00b6 static val DEFAULT_TYPE_PROVIDED: String","title":"DEFAULT_TYPE_PROVIDED - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-d-e-f-a-u-l-t_-t-y-p-e_-p-r-o-v-i-d-e-d/#default_type_provided","text":"static val DEFAULT_TYPE_PROVIDED: String","title":"DEFAULT_TYPE_PROVIDED"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-init-/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / <init> <init> \u00b6 BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !) BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-init-/#init","text":"BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !) BackfillData(name: String !, description: String !, parameters: MutableList < Parameter !>!, type_provided: String !, type_consumed: String !, requires_approval: Boolean !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/description/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / description description \u00b6 val description: String ! Description to show in the UI.","title":"description - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/description/#description","text":"val description: String ! Description to show in the UI.","title":"description"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/equals/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/hash-code/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/name/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / name name \u00b6 val name: String ! Identifies the backfill. Must be unique per service.","title":"name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/name/#name","text":"val name: String ! Identifies the backfill. Must be unique per service.","title":"name"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/new-builder/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / newBuilder newBuilder \u00b6 fun newBuilder(): ConfigureServiceRequest.BackfillData.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/new-builder/#newbuilder","text":"fun newBuilder(): ConfigureServiceRequest.BackfillData.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/parameters/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / parameters parameters \u00b6 val parameters: MutableList < Parameter !>! Parameters the backfill will accept. An input is displayed in the UI for each parameter.","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/parameters/#parameters","text":"val parameters: MutableList < Parameter !>! Parameters the backfill will accept. An input is displayed in the UI for each parameter.","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/requires_approval/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / requires_approval requires_approval \u00b6 val requires_approval: Boolean ! If true the backfill will need approval from another user before it can be started.","title":"requires_approval - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/requires_approval/#requires_approval","text":"val requires_approval: Boolean ! If true the backfill will need approval from another user before it can be started.","title":"requires_approval"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/to-string/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/type_consumed/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / type_consumed type_consumed \u00b6 val type_consumed: String !","title":"type_consumed - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/type_consumed/#type_consumed","text":"val type_consumed: String !","title":"type_consumed"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/type_provided/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / type_provided type_provided \u00b6 val type_provided: String ! The class name of pipelined data, only set if backfill supports pipelining.","title":"type_provided - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/type_provided/#type_provided","text":"val type_provided: String ! The class name of pipelined data, only set if backfill supports pipelining.","title":"type_provided"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder Builder \u00b6 class Builder : Builder< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary description var description: String ! name var name: String ! parameters var parameters: MutableList < Parameter !>! requires_approval var requires_approval: Boolean ! type_consumed var type_consumed: String ! type_provided var type_provided: String ! Functions \u00b6 Name Summary build fun build(): ConfigureServiceRequest.BackfillData ! description fun description(description: String !): ConfigureServiceRequest.BackfillData.Builder ! Description to show in the UI. name fun name(name: String !): ConfigureServiceRequest.BackfillData.Builder ! Identifies the backfill. Must be unique per service. parameters fun parameters(parameters: MutableList < Parameter !>!): ConfigureServiceRequest.BackfillData.Builder ! Parameters the backfill will accept. An input is displayed in the UI for each parameter. requires_approval fun requires_approval(requires_approval: Boolean !): ConfigureServiceRequest.BackfillData.Builder ! If true the backfill will need approval from another user before it can be started. type_consumed fun type_consumed(type_consumed: String !): ConfigureServiceRequest.BackfillData.Builder ! type_provided fun type_provided(type_provided: String !): ConfigureServiceRequest.BackfillData.Builder ! The class name of pipelined data, only set if backfill supports pipelining.","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/#builder","text":"class Builder : Builder< ConfigureServiceRequest.BackfillData !, ConfigureServiceRequest.BackfillData.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/#properties","text":"Name Summary description var description: String ! name var name: String ! parameters var parameters: MutableList < Parameter !>! requires_approval var requires_approval: Boolean ! type_consumed var type_consumed: String ! type_provided var type_provided: String !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/#functions","text":"Name Summary build fun build(): ConfigureServiceRequest.BackfillData ! description fun description(description: String !): ConfigureServiceRequest.BackfillData.Builder ! Description to show in the UI. name fun name(name: String !): ConfigureServiceRequest.BackfillData.Builder ! Identifies the backfill. Must be unique per service. parameters fun parameters(parameters: MutableList < Parameter !>!): ConfigureServiceRequest.BackfillData.Builder ! Parameters the backfill will accept. An input is displayed in the UI for each parameter. requires_approval fun requires_approval(requires_approval: Boolean !): ConfigureServiceRequest.BackfillData.Builder ! If true the backfill will need approval from another user before it can be started. type_consumed fun type_consumed(type_consumed: String !): ConfigureServiceRequest.BackfillData.Builder ! type_provided fun type_provided(type_provided: String !): ConfigureServiceRequest.BackfillData.Builder ! The class name of pipelined data, only set if backfill supports pipelining.","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/-init-/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/build/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / build build \u00b6 fun build(): ConfigureServiceRequest.BackfillData !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/build/#build","text":"fun build(): ConfigureServiceRequest.BackfillData !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/description/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / description description \u00b6 fun description(description: String !): ConfigureServiceRequest.BackfillData.Builder ! Description to show in the UI. var description: String !","title":"description - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/description/#description","text":"fun description(description: String !): ConfigureServiceRequest.BackfillData.Builder ! Description to show in the UI. var description: String !","title":"description"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/name/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / name name \u00b6 fun name(name: String !): ConfigureServiceRequest.BackfillData.Builder ! Identifies the backfill. Must be unique per service. var name: String !","title":"name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/name/#name","text":"fun name(name: String !): ConfigureServiceRequest.BackfillData.Builder ! Identifies the backfill. Must be unique per service. var name: String !","title":"name"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/parameters/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / parameters parameters \u00b6 fun parameters(parameters: MutableList < Parameter !>!): ConfigureServiceRequest.BackfillData.Builder ! Parameters the backfill will accept. An input is displayed in the UI for each parameter. var parameters: MutableList < Parameter !>!","title":"parameters - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/parameters/#parameters","text":"fun parameters(parameters: MutableList < Parameter !>!): ConfigureServiceRequest.BackfillData.Builder ! Parameters the backfill will accept. An input is displayed in the UI for each parameter. var parameters: MutableList < Parameter !>!","title":"parameters"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/requires_approval/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / requires_approval requires_approval \u00b6 fun requires_approval(requires_approval: Boolean !): ConfigureServiceRequest.BackfillData.Builder ! If true the backfill will need approval from another user before it can be started. var requires_approval: Boolean !","title":"requires_approval - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/requires_approval/#requires_approval","text":"fun requires_approval(requires_approval: Boolean !): ConfigureServiceRequest.BackfillData.Builder ! If true the backfill will need approval from another user before it can be started. var requires_approval: Boolean !","title":"requires_approval"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/type_consumed/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / type_consumed type_consumed \u00b6 fun type_consumed(type_consumed: String !): ConfigureServiceRequest.BackfillData.Builder ! var type_consumed: String !","title":"type_consumed - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/type_consumed/#type_consumed","text":"fun type_consumed(type_consumed: String !): ConfigureServiceRequest.BackfillData.Builder ! var type_consumed: String !","title":"type_consumed"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/type_provided/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / BackfillData / Builder / type_provided type_provided \u00b6 fun type_provided(type_provided: String !): ConfigureServiceRequest.BackfillData.Builder ! The class name of pipelined data, only set if backfill supports pipelining. var type_provided: String !","title":"type_provided - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-backfill-data/-builder/type_provided/#type_provided","text":"fun type_provided(type_provided: String !): ConfigureServiceRequest.BackfillData.Builder ! The class name of pipelined data, only set if backfill supports pipelining. var type_provided: String !","title":"type_provided"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / Builder Builder \u00b6 class Builder : Builder< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfills var backfills: MutableList < ConfigureServiceRequest.BackfillData !>! connector_extra_data var connector_extra_data: String ! connector_type var connector_type: String ! slack_channel var slack_channel: String ! Functions \u00b6 Name Summary backfills fun backfills(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!): ConfigureServiceRequest.Builder ! List of all available backfills in this service build fun build(): ConfigureServiceRequest ! connector_extra_data fun connector_extra_data(connector_extra_data: String !): ConfigureServiceRequest.Builder ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"} connector_type fun connector_type(connector_type: String !): ConfigureServiceRequest.Builder ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase). slack_channel fun slack_channel(slack_channel: String !): ConfigureServiceRequest.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/#builder","text":"class Builder : Builder< ConfigureServiceRequest !, ConfigureServiceRequest.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/#properties","text":"Name Summary backfills var backfills: MutableList < ConfigureServiceRequest.BackfillData !>! connector_extra_data var connector_extra_data: String ! connector_type var connector_type: String ! slack_channel var slack_channel: String !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/#functions","text":"Name Summary backfills fun backfills(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!): ConfigureServiceRequest.Builder ! List of all available backfills in this service build fun build(): ConfigureServiceRequest ! connector_extra_data fun connector_extra_data(connector_extra_data: String !): ConfigureServiceRequest.Builder ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"} connector_type fun connector_type(connector_type: String !): ConfigureServiceRequest.Builder ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase). slack_channel fun slack_channel(slack_channel: String !): ConfigureServiceRequest.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/-init-/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/backfills/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / Builder / backfills backfills \u00b6 fun backfills(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!): ConfigureServiceRequest.Builder ! List of all available backfills in this service var backfills: MutableList < ConfigureServiceRequest.BackfillData !>!","title":"backfills - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/backfills/#backfills","text":"fun backfills(backfills: MutableList < ConfigureServiceRequest.BackfillData !>!): ConfigureServiceRequest.Builder ! List of all available backfills in this service var backfills: MutableList < ConfigureServiceRequest.BackfillData !>!","title":"backfills"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/build/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / Builder / build build \u00b6 fun build(): ConfigureServiceRequest !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/build/#build","text":"fun build(): ConfigureServiceRequest !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/connector_extra_data/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / Builder / connector_extra_data connector_extra_data \u00b6 fun connector_extra_data(connector_extra_data: String !): ConfigureServiceRequest.Builder ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"} var connector_extra_data: String !","title":"connector_extra_data - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/connector_extra_data/#connector_extra_data","text":"fun connector_extra_data(connector_extra_data: String !): ConfigureServiceRequest.Builder ! Extra data that is passed through to the connector corresponding to connector_type. Suggested encoding is JSON. For example ENVOY type could have the cluster type as extra data: e.g.: {\"cluster_type\": \"production-jobs\"} var connector_extra_data: String !","title":"connector_extra_data"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/connector_type/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / Builder / connector_type connector_type \u00b6 fun connector_type(connector_type: String !): ConfigureServiceRequest.Builder ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase). var connector_type: String !","title":"connector_type - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/connector_type/#connector_type","text":"fun connector_type(connector_type: String !): ConfigureServiceRequest.Builder ! This isn\u2019t encoded as protobuf so connector implementations can be added without modifying protos (thus avoiding modifying the core backfila codebase). var connector_type: String !","title":"connector_type"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/slack_channel/","text":"client / app.cash.backfila.protos.service / ConfigureServiceRequest / Builder / slack_channel slack_channel \u00b6 fun slack_channel(slack_channel: String !): ConfigureServiceRequest.Builder ! var slack_channel: String !","title":"slack_channel - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-request/-builder/slack_channel/#slack_channel","text":"fun slack_channel(slack_channel: String !): ConfigureServiceRequest.Builder ! var slack_channel: String !","title":"slack_channel"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse ConfigureServiceResponse \u00b6 class ConfigureServiceResponse : Message< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !> Constructors \u00b6 Name Summary <init> ConfigureServiceResponse() ConfigureServiceResponse(unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< ConfigureServiceResponse !>! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): ConfigureServiceResponse.Builder ! toString fun toString(): String","title":"ConfigureServiceResponse - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/#configureserviceresponse","text":"class ConfigureServiceResponse : Message< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !>","title":"ConfigureServiceResponse"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/#types","text":"Name Summary Builder class Builder : Builder< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/#constructors","text":"Name Summary <init> ConfigureServiceResponse() ConfigureServiceResponse(unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< ConfigureServiceResponse !>!","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): ConfigureServiceResponse.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< ConfigureServiceResponse !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< ConfigureServiceResponse !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-init-/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / <init> <init> \u00b6 ConfigureServiceResponse() ConfigureServiceResponse(unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-init-/#init","text":"ConfigureServiceResponse() ConfigureServiceResponse(unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/equals/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/hash-code/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/new-builder/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / newBuilder newBuilder \u00b6 fun newBuilder(): ConfigureServiceResponse.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/new-builder/#newbuilder","text":"fun newBuilder(): ConfigureServiceResponse.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/to-string/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / Builder Builder \u00b6 class Builder : Builder< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !> Constructors \u00b6 Name Summary <init> Builder() Functions \u00b6 Name Summary build fun build(): ConfigureServiceResponse !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/#builder","text":"class Builder : Builder< ConfigureServiceResponse !, ConfigureServiceResponse.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/#functions","text":"Name Summary build fun build(): ConfigureServiceResponse !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/-init-/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/build/","text":"client / app.cash.backfila.protos.service / ConfigureServiceResponse / Builder / build build \u00b6 fun build(): ConfigureServiceResponse !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-configure-service-response/-builder/build/#build","text":"fun build(): ConfigureServiceResponse !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest CreateAndStartBackfillRequest \u00b6 class CreateAndStartBackfillRequest : Message< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !> Creates a backfill under the calling service and starts it. Types \u00b6 Name Summary Builder class Builder : Builder< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !> Constructors \u00b6 Name Summary <init> CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !) CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateAndStartBackfillRequest !>! create_request val create_request: CreateBackfillRequest ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateAndStartBackfillRequest.Builder ! toString fun toString(): String","title":"CreateAndStartBackfillRequest - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/#createandstartbackfillrequest","text":"class CreateAndStartBackfillRequest : Message< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !> Creates a backfill under the calling service and starts it.","title":"CreateAndStartBackfillRequest"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/#types","text":"Name Summary Builder class Builder : Builder< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/#constructors","text":"Name Summary <init> CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !) CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateAndStartBackfillRequest !>! create_request val create_request: CreateBackfillRequest !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateAndStartBackfillRequest.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< CreateAndStartBackfillRequest !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< CreateAndStartBackfillRequest !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-init-/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / <init> <init> \u00b6 CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !) CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-init-/#init","text":"CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !) CreateAndStartBackfillRequest(create_request: CreateBackfillRequest !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/create_request/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / create_request create_request \u00b6 val create_request: CreateBackfillRequest !","title":"create_request - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/create_request/#create_request","text":"val create_request: CreateBackfillRequest !","title":"create_request"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/equals/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/hash-code/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/new-builder/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / newBuilder newBuilder \u00b6 fun newBuilder(): CreateAndStartBackfillRequest.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/new-builder/#newbuilder","text":"fun newBuilder(): CreateAndStartBackfillRequest.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/to-string/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / Builder Builder \u00b6 class Builder : Builder< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary create_request var create_request: CreateBackfillRequest ! Functions \u00b6 Name Summary build fun build(): CreateAndStartBackfillRequest ! create_request fun create_request(create_request: CreateBackfillRequest !): CreateAndStartBackfillRequest.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/#builder","text":"class Builder : Builder< CreateAndStartBackfillRequest !, CreateAndStartBackfillRequest.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/#properties","text":"Name Summary create_request var create_request: CreateBackfillRequest !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/#functions","text":"Name Summary build fun build(): CreateAndStartBackfillRequest ! create_request fun create_request(create_request: CreateBackfillRequest !): CreateAndStartBackfillRequest.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/-init-/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/build/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / Builder / build build \u00b6 fun build(): CreateAndStartBackfillRequest !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/build/#build","text":"fun build(): CreateAndStartBackfillRequest !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/create_request/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillRequest / Builder / create_request create_request \u00b6 fun create_request(create_request: CreateBackfillRequest !): CreateAndStartBackfillRequest.Builder ! var create_request: CreateBackfillRequest !","title":"create_request - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-request/-builder/create_request/#create_request","text":"fun create_request(create_request: CreateBackfillRequest !): CreateAndStartBackfillRequest.Builder ! var create_request: CreateBackfillRequest !","title":"create_request"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse CreateAndStartBackfillResponse \u00b6 class CreateAndStartBackfillResponse : Message< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !> Constructors \u00b6 Name Summary <init> CreateAndStartBackfillResponse(backfill_run_id: Long !) CreateAndStartBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateAndStartBackfillResponse !>! backfill_run_id val backfill_run_id: Long ! DEFAULT_BACKFILL_RUN_ID static val DEFAULT_BACKFILL_RUN_ID: Long ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateAndStartBackfillResponse.Builder ! toString fun toString(): String","title":"CreateAndStartBackfillResponse - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/#createandstartbackfillresponse","text":"class CreateAndStartBackfillResponse : Message< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !>","title":"CreateAndStartBackfillResponse"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/#types","text":"Name Summary Builder class Builder : Builder< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/#constructors","text":"Name Summary <init> CreateAndStartBackfillResponse(backfill_run_id: Long !) CreateAndStartBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateAndStartBackfillResponse !>! backfill_run_id val backfill_run_id: Long ! DEFAULT_BACKFILL_RUN_ID static val DEFAULT_BACKFILL_RUN_ID: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateAndStartBackfillResponse.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< CreateAndStartBackfillResponse !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< CreateAndStartBackfillResponse !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-r-u-n_-i-d/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / DEFAULT_BACKFILL_RUN_ID DEFAULT_BACKFILL_RUN_ID \u00b6 static val DEFAULT_BACKFILL_RUN_ID: Long !","title":"DEFAULT_BACKFILL_RUN_ID - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-r-u-n_-i-d/#default_backfill_run_id","text":"static val DEFAULT_BACKFILL_RUN_ID: Long !","title":"DEFAULT_BACKFILL_RUN_ID"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-init-/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / <init> <init> \u00b6 CreateAndStartBackfillResponse(backfill_run_id: Long !) CreateAndStartBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-init-/#init","text":"CreateAndStartBackfillResponse(backfill_run_id: Long !) CreateAndStartBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/backfill_run_id/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / backfill_run_id backfill_run_id \u00b6 val backfill_run_id: Long !","title":"backfill_run_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/backfill_run_id/#backfill_run_id","text":"val backfill_run_id: Long !","title":"backfill_run_id"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/equals/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/hash-code/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/new-builder/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / newBuilder newBuilder \u00b6 fun newBuilder(): CreateAndStartBackfillResponse.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/new-builder/#newbuilder","text":"fun newBuilder(): CreateAndStartBackfillResponse.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/to-string/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / Builder Builder \u00b6 class Builder : Builder< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfill_run_id var backfill_run_id: Long ! Functions \u00b6 Name Summary backfill_run_id fun backfill_run_id(backfill_run_id: Long !): CreateAndStartBackfillResponse.Builder ! build fun build(): CreateAndStartBackfillResponse !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/#builder","text":"class Builder : Builder< CreateAndStartBackfillResponse !, CreateAndStartBackfillResponse.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/#properties","text":"Name Summary backfill_run_id var backfill_run_id: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/#functions","text":"Name Summary backfill_run_id fun backfill_run_id(backfill_run_id: Long !): CreateAndStartBackfillResponse.Builder ! build fun build(): CreateAndStartBackfillResponse !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/-init-/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/backfill_run_id/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / Builder / backfill_run_id backfill_run_id \u00b6 fun backfill_run_id(backfill_run_id: Long !): CreateAndStartBackfillResponse.Builder ! var backfill_run_id: Long !","title":"backfill_run_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/backfill_run_id/#backfill_run_id","text":"fun backfill_run_id(backfill_run_id: Long !): CreateAndStartBackfillResponse.Builder ! var backfill_run_id: Long !","title":"backfill_run_id"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/build/","text":"client / app.cash.backfila.protos.service / CreateAndStartBackfillResponse / Builder / build build \u00b6 fun build(): CreateAndStartBackfillResponse !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-and-start-backfill-response/-builder/build/#build","text":"fun build(): CreateAndStartBackfillResponse !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest CreateBackfillRequest \u00b6 class CreateBackfillRequest : Message< CreateBackfillRequest !, CreateBackfillRequest.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< CreateBackfillRequest !, CreateBackfillRequest.Builder !> Constructors \u00b6 Name Summary <init> CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !) CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateBackfillRequest !>! backfill_name val backfill_name: String ! backoff_schedule val backoff_schedule: String ! batch_size val batch_size: Long ! DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_BACKOFF_SCHEDULE static val DEFAULT_BACKOFF_SCHEDULE: String DEFAULT_BATCH_SIZE static val DEFAULT_BATCH_SIZE: Long ! DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! DEFAULT_EXTRA_SLEEP_MS static val DEFAULT_EXTRA_SLEEP_MS: Long ! DEFAULT_NUM_THREADS static val DEFAULT_NUM_THREADS: Int ! DEFAULT_PKEY_RANGE_END static val DEFAULT_PKEY_RANGE_END: ByteString! DEFAULT_PKEY_RANGE_START static val DEFAULT_PKEY_RANGE_START: ByteString! DEFAULT_SCAN_SIZE static val DEFAULT_SCAN_SIZE: Long ! dry_run val dry_run: Boolean ! extra_sleep_ms val extra_sleep_ms: Long ! num_threads val num_threads: Int ! parameter_map val parameter_map: MutableMap < String !, ByteString!>! Parameters that go to the client service. pkey_range_end val pkey_range_end: ByteString! pkey_range_start val pkey_range_start: ByteString! scan_size val scan_size: Long ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateBackfillRequest.Builder ! toString fun toString(): String","title":"CreateBackfillRequest - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/#createbackfillrequest","text":"class CreateBackfillRequest : Message< CreateBackfillRequest !, CreateBackfillRequest.Builder !>","title":"CreateBackfillRequest"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/#types","text":"Name Summary Builder class Builder : Builder< CreateBackfillRequest !, CreateBackfillRequest.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/#constructors","text":"Name Summary <init> CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !) CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateBackfillRequest !>! backfill_name val backfill_name: String ! backoff_schedule val backoff_schedule: String ! batch_size val batch_size: Long ! DEFAULT_BACKFILL_NAME static val DEFAULT_BACKFILL_NAME: String DEFAULT_BACKOFF_SCHEDULE static val DEFAULT_BACKOFF_SCHEDULE: String DEFAULT_BATCH_SIZE static val DEFAULT_BATCH_SIZE: Long ! DEFAULT_DRY_RUN static val DEFAULT_DRY_RUN: Boolean ! DEFAULT_EXTRA_SLEEP_MS static val DEFAULT_EXTRA_SLEEP_MS: Long ! DEFAULT_NUM_THREADS static val DEFAULT_NUM_THREADS: Int ! DEFAULT_PKEY_RANGE_END static val DEFAULT_PKEY_RANGE_END: ByteString! DEFAULT_PKEY_RANGE_START static val DEFAULT_PKEY_RANGE_START: ByteString! DEFAULT_SCAN_SIZE static val DEFAULT_SCAN_SIZE: Long ! dry_run val dry_run: Boolean ! extra_sleep_ms val extra_sleep_ms: Long ! num_threads val num_threads: Int ! parameter_map val parameter_map: MutableMap < String !, ByteString!>! Parameters that go to the client service. pkey_range_end val pkey_range_end: ByteString! pkey_range_start val pkey_range_start: ByteString! scan_size val scan_size: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateBackfillRequest.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< CreateBackfillRequest !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< CreateBackfillRequest !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_BACKFILL_NAME DEFAULT_BACKFILL_NAME \u00b6 static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-n-a-m-e/#default_backfill_name","text":"static val DEFAULT_BACKFILL_NAME: String","title":"DEFAULT_BACKFILL_NAME"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-o-f-f_-s-c-h-e-d-u-l-e/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_BACKOFF_SCHEDULE DEFAULT_BACKOFF_SCHEDULE \u00b6 static val DEFAULT_BACKOFF_SCHEDULE: String","title":"DEFAULT_BACKOFF_SCHEDULE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-b-a-c-k-o-f-f_-s-c-h-e-d-u-l-e/#default_backoff_schedule","text":"static val DEFAULT_BACKOFF_SCHEDULE: String","title":"DEFAULT_BACKOFF_SCHEDULE"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-b-a-t-c-h_-s-i-z-e/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_BATCH_SIZE DEFAULT_BATCH_SIZE \u00b6 static val DEFAULT_BATCH_SIZE: Long !","title":"DEFAULT_BATCH_SIZE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-b-a-t-c-h_-s-i-z-e/#default_batch_size","text":"static val DEFAULT_BATCH_SIZE: Long !","title":"DEFAULT_BATCH_SIZE"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_DRY_RUN DEFAULT_DRY_RUN \u00b6 static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-d-r-y_-r-u-n/#default_dry_run","text":"static val DEFAULT_DRY_RUN: Boolean !","title":"DEFAULT_DRY_RUN"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-e-x-t-r-a_-s-l-e-e-p_-m-s/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_EXTRA_SLEEP_MS DEFAULT_EXTRA_SLEEP_MS \u00b6 static val DEFAULT_EXTRA_SLEEP_MS: Long !","title":"DEFAULT_EXTRA_SLEEP_MS - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-e-x-t-r-a_-s-l-e-e-p_-m-s/#default_extra_sleep_ms","text":"static val DEFAULT_EXTRA_SLEEP_MS: Long !","title":"DEFAULT_EXTRA_SLEEP_MS"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-n-u-m_-t-h-r-e-a-d-s/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_NUM_THREADS DEFAULT_NUM_THREADS \u00b6 static val DEFAULT_NUM_THREADS: Int !","title":"DEFAULT_NUM_THREADS - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-n-u-m_-t-h-r-e-a-d-s/#default_num_threads","text":"static val DEFAULT_NUM_THREADS: Int !","title":"DEFAULT_NUM_THREADS"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-p-k-e-y_-r-a-n-g-e_-e-n-d/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_PKEY_RANGE_END DEFAULT_PKEY_RANGE_END \u00b6 static val DEFAULT_PKEY_RANGE_END: ByteString!","title":"DEFAULT_PKEY_RANGE_END - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-p-k-e-y_-r-a-n-g-e_-e-n-d/#default_pkey_range_end","text":"static val DEFAULT_PKEY_RANGE_END: ByteString!","title":"DEFAULT_PKEY_RANGE_END"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-p-k-e-y_-r-a-n-g-e_-s-t-a-r-t/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_PKEY_RANGE_START DEFAULT_PKEY_RANGE_START \u00b6 static val DEFAULT_PKEY_RANGE_START: ByteString!","title":"DEFAULT_PKEY_RANGE_START - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-p-k-e-y_-r-a-n-g-e_-s-t-a-r-t/#default_pkey_range_start","text":"static val DEFAULT_PKEY_RANGE_START: ByteString!","title":"DEFAULT_PKEY_RANGE_START"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-s-c-a-n_-s-i-z-e/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / DEFAULT_SCAN_SIZE DEFAULT_SCAN_SIZE \u00b6 static val DEFAULT_SCAN_SIZE: Long !","title":"DEFAULT_SCAN_SIZE - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-d-e-f-a-u-l-t_-s-c-a-n_-s-i-z-e/#default_scan_size","text":"static val DEFAULT_SCAN_SIZE: Long !","title":"DEFAULT_SCAN_SIZE"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-init-/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / <init> <init> \u00b6 CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !) CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-init-/#init","text":"CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !) CreateBackfillRequest(backfill_name: String !, scan_size: Long !, batch_size: Long !, num_threads: Int !, pkey_range_start: ByteString!, pkey_range_end: ByteString!, parameter_map: MutableMap < String !, ByteString!>!, dry_run: Boolean !, backoff_schedule: String !, extra_sleep_ms: Long !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/backfill_name/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / backfill_name backfill_name \u00b6 val backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/backfill_name/#backfill_name","text":"val backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/backoff_schedule/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / backoff_schedule backoff_schedule \u00b6 val backoff_schedule: String !","title":"backoff_schedule - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/backoff_schedule/#backoff_schedule","text":"val backoff_schedule: String !","title":"backoff_schedule"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/batch_size/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / batch_size batch_size \u00b6 val batch_size: Long !","title":"batch_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/batch_size/#batch_size","text":"val batch_size: Long !","title":"batch_size"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/dry_run/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / dry_run dry_run \u00b6 val dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/dry_run/#dry_run","text":"val dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/equals/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/extra_sleep_ms/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / extra_sleep_ms extra_sleep_ms \u00b6 val extra_sleep_ms: Long !","title":"extra_sleep_ms - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/extra_sleep_ms/#extra_sleep_ms","text":"val extra_sleep_ms: Long !","title":"extra_sleep_ms"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/hash-code/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/new-builder/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / newBuilder newBuilder \u00b6 fun newBuilder(): CreateBackfillRequest.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/new-builder/#newbuilder","text":"fun newBuilder(): CreateBackfillRequest.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/num_threads/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / num_threads num_threads \u00b6 val num_threads: Int !","title":"num_threads - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/num_threads/#num_threads","text":"val num_threads: Int !","title":"num_threads"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/parameter_map/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / parameter_map parameter_map \u00b6 val parameter_map: MutableMap < String !, ByteString!>! Parameters that go to the client service.","title":"parameter_map - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/parameter_map/#parameter_map","text":"val parameter_map: MutableMap < String !, ByteString!>! Parameters that go to the client service.","title":"parameter_map"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/pkey_range_end/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / pkey_range_end pkey_range_end \u00b6 val pkey_range_end: ByteString!","title":"pkey_range_end - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/pkey_range_end/#pkey_range_end","text":"val pkey_range_end: ByteString!","title":"pkey_range_end"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/pkey_range_start/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / pkey_range_start pkey_range_start \u00b6 val pkey_range_start: ByteString!","title":"pkey_range_start - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/pkey_range_start/#pkey_range_start","text":"val pkey_range_start: ByteString!","title":"pkey_range_start"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/scan_size/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / scan_size scan_size \u00b6 val scan_size: Long !","title":"scan_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/scan_size/#scan_size","text":"val scan_size: Long !","title":"scan_size"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/to-string/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder Builder \u00b6 class Builder : Builder< CreateBackfillRequest !, CreateBackfillRequest.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfill_name var backfill_name: String ! backoff_schedule var backoff_schedule: String ! batch_size var batch_size: Long ! dry_run var dry_run: Boolean ! extra_sleep_ms var extra_sleep_ms: Long ! num_threads var num_threads: Int ! parameter_map var parameter_map: MutableMap < String !, ByteString!>! pkey_range_end var pkey_range_end: ByteString! pkey_range_start var pkey_range_start: ByteString! scan_size var scan_size: Long ! Functions \u00b6 Name Summary backfill_name fun backfill_name(backfill_name: String !): CreateBackfillRequest.Builder ! backoff_schedule fun backoff_schedule(backoff_schedule: String !): CreateBackfillRequest.Builder ! batch_size fun batch_size(batch_size: Long !): CreateBackfillRequest.Builder ! build fun build(): CreateBackfillRequest ! dry_run fun dry_run(dry_run: Boolean !): CreateBackfillRequest.Builder ! extra_sleep_ms fun extra_sleep_ms(extra_sleep_ms: Long !): CreateBackfillRequest.Builder ! num_threads fun num_threads(num_threads: Int !): CreateBackfillRequest.Builder ! parameter_map fun parameter_map(parameter_map: MutableMap < String !, ByteString!>!): CreateBackfillRequest.Builder ! Parameters that go to the client service. pkey_range_end fun pkey_range_end(pkey_range_end: ByteString!): CreateBackfillRequest.Builder ! pkey_range_start fun pkey_range_start(pkey_range_start: ByteString!): CreateBackfillRequest.Builder ! scan_size fun scan_size(scan_size: Long !): CreateBackfillRequest.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/#builder","text":"class Builder : Builder< CreateBackfillRequest !, CreateBackfillRequest.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/#properties","text":"Name Summary backfill_name var backfill_name: String ! backoff_schedule var backoff_schedule: String ! batch_size var batch_size: Long ! dry_run var dry_run: Boolean ! extra_sleep_ms var extra_sleep_ms: Long ! num_threads var num_threads: Int ! parameter_map var parameter_map: MutableMap < String !, ByteString!>! pkey_range_end var pkey_range_end: ByteString! pkey_range_start var pkey_range_start: ByteString! scan_size var scan_size: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/#functions","text":"Name Summary backfill_name fun backfill_name(backfill_name: String !): CreateBackfillRequest.Builder ! backoff_schedule fun backoff_schedule(backoff_schedule: String !): CreateBackfillRequest.Builder ! batch_size fun batch_size(batch_size: Long !): CreateBackfillRequest.Builder ! build fun build(): CreateBackfillRequest ! dry_run fun dry_run(dry_run: Boolean !): CreateBackfillRequest.Builder ! extra_sleep_ms fun extra_sleep_ms(extra_sleep_ms: Long !): CreateBackfillRequest.Builder ! num_threads fun num_threads(num_threads: Int !): CreateBackfillRequest.Builder ! parameter_map fun parameter_map(parameter_map: MutableMap < String !, ByteString!>!): CreateBackfillRequest.Builder ! Parameters that go to the client service. pkey_range_end fun pkey_range_end(pkey_range_end: ByteString!): CreateBackfillRequest.Builder ! pkey_range_start fun pkey_range_start(pkey_range_start: ByteString!): CreateBackfillRequest.Builder ! scan_size fun scan_size(scan_size: Long !): CreateBackfillRequest.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/-init-/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/backfill_name/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / backfill_name backfill_name \u00b6 fun backfill_name(backfill_name: String !): CreateBackfillRequest.Builder ! var backfill_name: String !","title":"backfill_name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/backfill_name/#backfill_name","text":"fun backfill_name(backfill_name: String !): CreateBackfillRequest.Builder ! var backfill_name: String !","title":"backfill_name"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/backoff_schedule/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / backoff_schedule backoff_schedule \u00b6 fun backoff_schedule(backoff_schedule: String !): CreateBackfillRequest.Builder ! var backoff_schedule: String !","title":"backoff_schedule - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/backoff_schedule/#backoff_schedule","text":"fun backoff_schedule(backoff_schedule: String !): CreateBackfillRequest.Builder ! var backoff_schedule: String !","title":"backoff_schedule"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/batch_size/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / batch_size batch_size \u00b6 fun batch_size(batch_size: Long !): CreateBackfillRequest.Builder ! var batch_size: Long !","title":"batch_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/batch_size/#batch_size","text":"fun batch_size(batch_size: Long !): CreateBackfillRequest.Builder ! var batch_size: Long !","title":"batch_size"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/build/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / build build \u00b6 fun build(): CreateBackfillRequest !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/build/#build","text":"fun build(): CreateBackfillRequest !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/dry_run/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / dry_run dry_run \u00b6 fun dry_run(dry_run: Boolean !): CreateBackfillRequest.Builder ! var dry_run: Boolean !","title":"dry_run - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/dry_run/#dry_run","text":"fun dry_run(dry_run: Boolean !): CreateBackfillRequest.Builder ! var dry_run: Boolean !","title":"dry_run"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/extra_sleep_ms/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / extra_sleep_ms extra_sleep_ms \u00b6 fun extra_sleep_ms(extra_sleep_ms: Long !): CreateBackfillRequest.Builder ! var extra_sleep_ms: Long !","title":"extra_sleep_ms - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/extra_sleep_ms/#extra_sleep_ms","text":"fun extra_sleep_ms(extra_sleep_ms: Long !): CreateBackfillRequest.Builder ! var extra_sleep_ms: Long !","title":"extra_sleep_ms"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/num_threads/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / num_threads num_threads \u00b6 fun num_threads(num_threads: Int !): CreateBackfillRequest.Builder ! var num_threads: Int !","title":"num_threads - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/num_threads/#num_threads","text":"fun num_threads(num_threads: Int !): CreateBackfillRequest.Builder ! var num_threads: Int !","title":"num_threads"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/parameter_map/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / parameter_map parameter_map \u00b6 fun parameter_map(parameter_map: MutableMap < String !, ByteString!>!): CreateBackfillRequest.Builder ! Parameters that go to the client service. var parameter_map: MutableMap < String !, ByteString!>!","title":"parameter_map - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/parameter_map/#parameter_map","text":"fun parameter_map(parameter_map: MutableMap < String !, ByteString!>!): CreateBackfillRequest.Builder ! Parameters that go to the client service. var parameter_map: MutableMap < String !, ByteString!>!","title":"parameter_map"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/pkey_range_end/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / pkey_range_end pkey_range_end \u00b6 fun pkey_range_end(pkey_range_end: ByteString!): CreateBackfillRequest.Builder ! var pkey_range_end: ByteString!","title":"pkey_range_end - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/pkey_range_end/#pkey_range_end","text":"fun pkey_range_end(pkey_range_end: ByteString!): CreateBackfillRequest.Builder ! var pkey_range_end: ByteString!","title":"pkey_range_end"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/pkey_range_start/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / pkey_range_start pkey_range_start \u00b6 fun pkey_range_start(pkey_range_start: ByteString!): CreateBackfillRequest.Builder ! var pkey_range_start: ByteString!","title":"pkey_range_start - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/pkey_range_start/#pkey_range_start","text":"fun pkey_range_start(pkey_range_start: ByteString!): CreateBackfillRequest.Builder ! var pkey_range_start: ByteString!","title":"pkey_range_start"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/scan_size/","text":"client / app.cash.backfila.protos.service / CreateBackfillRequest / Builder / scan_size scan_size \u00b6 fun scan_size(scan_size: Long !): CreateBackfillRequest.Builder ! var scan_size: Long !","title":"scan_size - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-request/-builder/scan_size/#scan_size","text":"fun scan_size(scan_size: Long !): CreateBackfillRequest.Builder ! var scan_size: Long !","title":"scan_size"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse CreateBackfillResponse \u00b6 class CreateBackfillResponse : Message< CreateBackfillResponse !, CreateBackfillResponse.Builder !> Types \u00b6 Name Summary Builder class Builder : Builder< CreateBackfillResponse !, CreateBackfillResponse.Builder !> Constructors \u00b6 Name Summary <init> CreateBackfillResponse(backfill_run_id: Long !) CreateBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateBackfillResponse !>! backfill_run_id val backfill_run_id: Long ! DEFAULT_BACKFILL_RUN_ID static val DEFAULT_BACKFILL_RUN_ID: Long ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateBackfillResponse.Builder ! toString fun toString(): String","title":"CreateBackfillResponse - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/#createbackfillresponse","text":"class CreateBackfillResponse : Message< CreateBackfillResponse !, CreateBackfillResponse.Builder !>","title":"CreateBackfillResponse"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/#types","text":"Name Summary Builder class Builder : Builder< CreateBackfillResponse !, CreateBackfillResponse.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/#constructors","text":"Name Summary <init> CreateBackfillResponse(backfill_run_id: Long !) CreateBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< CreateBackfillResponse !>! backfill_run_id val backfill_run_id: Long ! DEFAULT_BACKFILL_RUN_ID static val DEFAULT_BACKFILL_RUN_ID: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): CreateBackfillResponse.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< CreateBackfillResponse !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< CreateBackfillResponse !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-r-u-n_-i-d/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / DEFAULT_BACKFILL_RUN_ID DEFAULT_BACKFILL_RUN_ID \u00b6 static val DEFAULT_BACKFILL_RUN_ID: Long !","title":"DEFAULT_BACKFILL_RUN_ID - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-d-e-f-a-u-l-t_-b-a-c-k-f-i-l-l_-r-u-n_-i-d/#default_backfill_run_id","text":"static val DEFAULT_BACKFILL_RUN_ID: Long !","title":"DEFAULT_BACKFILL_RUN_ID"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-init-/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / <init> <init> \u00b6 CreateBackfillResponse(backfill_run_id: Long !) CreateBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-init-/#init","text":"CreateBackfillResponse(backfill_run_id: Long !) CreateBackfillResponse(backfill_run_id: Long !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/backfill_run_id/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / backfill_run_id backfill_run_id \u00b6 val backfill_run_id: Long !","title":"backfill_run_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/backfill_run_id/#backfill_run_id","text":"val backfill_run_id: Long !","title":"backfill_run_id"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/equals/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/hash-code/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/new-builder/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / newBuilder newBuilder \u00b6 fun newBuilder(): CreateBackfillResponse.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/new-builder/#newbuilder","text":"fun newBuilder(): CreateBackfillResponse.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/to-string/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / Builder Builder \u00b6 class Builder : Builder< CreateBackfillResponse !, CreateBackfillResponse.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary backfill_run_id var backfill_run_id: Long ! Functions \u00b6 Name Summary backfill_run_id fun backfill_run_id(backfill_run_id: Long !): CreateBackfillResponse.Builder ! build fun build(): CreateBackfillResponse !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/#builder","text":"class Builder : Builder< CreateBackfillResponse !, CreateBackfillResponse.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/#properties","text":"Name Summary backfill_run_id var backfill_run_id: Long !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/#functions","text":"Name Summary backfill_run_id fun backfill_run_id(backfill_run_id: Long !): CreateBackfillResponse.Builder ! build fun build(): CreateBackfillResponse !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/-init-/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/backfill_run_id/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / Builder / backfill_run_id backfill_run_id \u00b6 fun backfill_run_id(backfill_run_id: Long !): CreateBackfillResponse.Builder ! var backfill_run_id: Long !","title":"backfill_run_id - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/backfill_run_id/#backfill_run_id","text":"fun backfill_run_id(backfill_run_id: Long !): CreateBackfillResponse.Builder ! var backfill_run_id: Long !","title":"backfill_run_id"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/build/","text":"client / app.cash.backfila.protos.service / CreateBackfillResponse / Builder / build build \u00b6 fun build(): CreateBackfillResponse !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-create-backfill-response/-builder/build/#build","text":"fun build(): CreateBackfillResponse !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/","text":"client / app.cash.backfila.protos.service / Parameter Parameter \u00b6 class Parameter : Message< Parameter !, Parameter.Builder !> In this file: APIs that the service provides to the client. Types \u00b6 Name Summary Builder class Builder : Builder< Parameter !, Parameter.Builder !> Constructors \u00b6 Name Summary <init> Parameter(name: String !, description: String !) Parameter(name: String !, description: String !, unknownFields: ByteString!) Properties \u00b6 Name Summary ADAPTER static val ADAPTER: ProtoAdapter< Parameter !>! DEFAULT_DESCRIPTION static val DEFAULT_DESCRIPTION: String DEFAULT_NAME static val DEFAULT_NAME: String description val description: String ! Description to show in the UI. name val name: String ! Functions \u00b6 Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): Parameter.Builder ! toString fun toString(): String","title":"Parameter - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/#parameter","text":"class Parameter : Message< Parameter !, Parameter.Builder !> In this file: APIs that the service provides to the client.","title":"Parameter"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/#types","text":"Name Summary Builder class Builder : Builder< Parameter !, Parameter.Builder !>","title":"Types"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/#constructors","text":"Name Summary <init> Parameter(name: String !, description: String !) Parameter(name: String !, description: String !, unknownFields: ByteString!)","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/#properties","text":"Name Summary ADAPTER static val ADAPTER: ProtoAdapter< Parameter !>! DEFAULT_DESCRIPTION static val DEFAULT_DESCRIPTION: String DEFAULT_NAME static val DEFAULT_NAME: String description val description: String ! Description to show in the UI. name val name: String !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(): Parameter.Builder ! toString fun toString(): String","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-a-d-a-p-t-e-r/","text":"client / app.cash.backfila.protos.service / Parameter / ADAPTER ADAPTER \u00b6 static val ADAPTER: ProtoAdapter< Parameter !>!","title":"ADAPTER - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-a-d-a-p-t-e-r/#adapter","text":"static val ADAPTER: ProtoAdapter< Parameter !>!","title":"ADAPTER"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-d-e-f-a-u-l-t_-d-e-s-c-r-i-p-t-i-o-n/","text":"client / app.cash.backfila.protos.service / Parameter / DEFAULT_DESCRIPTION DEFAULT_DESCRIPTION \u00b6 static val DEFAULT_DESCRIPTION: String","title":"DEFAULT_DESCRIPTION - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-d-e-f-a-u-l-t_-d-e-s-c-r-i-p-t-i-o-n/#default_description","text":"static val DEFAULT_DESCRIPTION: String","title":"DEFAULT_DESCRIPTION"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-d-e-f-a-u-l-t_-n-a-m-e/","text":"client / app.cash.backfila.protos.service / Parameter / DEFAULT_NAME DEFAULT_NAME \u00b6 static val DEFAULT_NAME: String","title":"DEFAULT_NAME - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-d-e-f-a-u-l-t_-n-a-m-e/#default_name","text":"static val DEFAULT_NAME: String","title":"DEFAULT_NAME"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-init-/","text":"client / app.cash.backfila.protos.service / Parameter / <init> <init> \u00b6 Parameter(name: String !, description: String !) Parameter(name: String !, description: String !, unknownFields: ByteString!)","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-init-/#init","text":"Parameter(name: String !, description: String !) Parameter(name: String !, description: String !, unknownFields: ByteString!)","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/description/","text":"client / app.cash.backfila.protos.service / Parameter / description description \u00b6 val description: String ! Description to show in the UI.","title":"description - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/description/#description","text":"val description: String ! Description to show in the UI.","title":"description"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/equals/","text":"client / app.cash.backfila.protos.service / Parameter / equals equals \u00b6 fun equals(other: Any ?): Boolean","title":"equals - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/hash-code/","text":"client / app.cash.backfila.protos.service / Parameter / hashCode hashCode \u00b6 fun hashCode(): Int","title":"hashCode - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/name/","text":"client / app.cash.backfila.protos.service / Parameter / name name \u00b6 val name: String !","title":"name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/name/#name","text":"val name: String !","title":"name"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/new-builder/","text":"client / app.cash.backfila.protos.service / Parameter / newBuilder newBuilder \u00b6 fun newBuilder(): Parameter.Builder !","title":"newBuilder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/new-builder/#newbuilder","text":"fun newBuilder(): Parameter.Builder !","title":"newBuilder"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/to-string/","text":"client / app.cash.backfila.protos.service / Parameter / toString toString \u00b6 fun toString(): String","title":"toString - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/","text":"client / app.cash.backfila.protos.service / Parameter / Builder Builder \u00b6 class Builder : Builder< Parameter !, Parameter.Builder !> Constructors \u00b6 Name Summary <init> Builder() Properties \u00b6 Name Summary description var description: String ! name var name: String ! Functions \u00b6 Name Summary build fun build(): Parameter ! description fun description(description: String !): Parameter.Builder ! Description to show in the UI. name fun name(name: String !): Parameter.Builder !","title":"Builder - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/#builder","text":"class Builder : Builder< Parameter !, Parameter.Builder !>","title":"Builder"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/#constructors","text":"Name Summary <init> Builder()","title":"Constructors"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/#properties","text":"Name Summary description var description: String ! name var name: String !","title":"Properties"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/#functions","text":"Name Summary build fun build(): Parameter ! description fun description(description: String !): Parameter.Builder ! Description to show in the UI. name fun name(name: String !): Parameter.Builder !","title":"Functions"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/-init-/","text":"client / app.cash.backfila.protos.service / Parameter / Builder / <init> <init> \u00b6 Builder()","title":" init "},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/build/","text":"client / app.cash.backfila.protos.service / Parameter / Builder / build build \u00b6 fun build(): Parameter !","title":"build - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/build/#build","text":"fun build(): Parameter !","title":"build"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/description/","text":"client / app.cash.backfila.protos.service / Parameter / Builder / description description \u00b6 fun description(description: String !): Parameter.Builder ! Description to show in the UI. var description: String !","title":"description - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/description/#description","text":"fun description(description: String !): Parameter.Builder ! Description to show in the UI. var description: String !","title":"description"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/name/","text":"client / app.cash.backfila.protos.service / Parameter / Builder / name name \u00b6 fun name(name: String !): Parameter.Builder ! var name: String !","title":"name - Backfila"},{"location":"0.x/client/app.cash.backfila.protos.service/-parameter/-builder/name/#name","text":"fun name(name: String !): Parameter.Builder ! var name: String !","title":"name"},{"location":"0.x/client-misk/","text":"client-misk Packages \u00b6 Name Summary app.cash.backfila.client.misk app.cash.backfila.client.misk.client app.cash.backfila.client.misk.embedded app.cash.backfila.client.misk.internal app.cash.backfila.client.misk.spi Index \u00b6 All Types","title":"client-service"},{"location":"0.x/client-misk/#packages","text":"Name Summary app.cash.backfila.client.misk app.cash.backfila.client.misk.client app.cash.backfila.client.misk.embedded app.cash.backfila.client.misk.internal app.cash.backfila.client.misk.spi","title":"Packages"},{"location":"0.x/client-misk/#index","text":"All Types","title":"Index"},{"location":"0.x/client-misk/alltypes/","text":"All Types \u00b6 Name Summary app.cash.backfila.client.misk.embedded.Backfila Programmatic access to backfila runs. This is useful in tests and development; in production use the Backfila dashboard UI. app.cash.backfila.client.misk.client.BackfilaClientConfig Configures connectivity to the Backfila service. app.cash.backfila.client.misk.client.BackfilaClientLoggingSetupProvider app.cash.backfila.client.misk.client.BackfilaClientMDCLoggingSetupProvider app.cash.backfila.client.misk.client.BackfilaClientModule Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule . app.cash.backfila.client.misk.client.BackfilaClientNoLoggingSetupProvider app.cash.backfila.client.misk.BackfilaManagementClient app.cash.backfila.client.misk.spi.BackfilaParametersOperator app.cash.backfila.client.misk.Backfill Backfill base type that is cached on a per backfill run case. Must be thread-safe for calls using the same backfill run id. app.cash.backfila.client.misk.spi.BackfillBackend Service provider interface for backends like Hibernate and DynamoDb. Backends construct operators that actually run the backfill. app.cash.backfila.client.misk.BackfillConfig app.cash.backfila.client.misk.BackfillModule Backfila-using applications install at minimum 3 things. app.cash.backfila.client.misk.spi.BackfillOperator Backends provide these operators that are invoked to run the underlying backfill logic. app.cash.backfila.client.misk.internal.BackfillOperatorFactory Creates BackfillOperators using the registered Backends. app.cash.backfila.client.misk.spi.BackfillRegistration app.cash.backfila.client.misk.embedded.BackfillRun Get an instance of this from Backfila . app.cash.backfila.client.misk.internal.BatchSnapshot app.cash.backfila.client.misk.Description Annotation used on your backfill class and parameters class constructor to send metadata to Backfila. app.cash.backfila.client.misk.embedded.EmbeddedBackfilaModule Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule . app.cash.backfila.client.misk.internal.EmptyBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one. app.cash.backfila.client.misk.NoParameters Placeholder class to represent when a backfill has no Parameters. app.cash.backfila.client.misk.internal.PartitionCursor Immutable snapshot of a cursor.","title":"All Types - Backfila"},{"location":"0.x/client-misk/alltypes/#all-types","text":"Name Summary app.cash.backfila.client.misk.embedded.Backfila Programmatic access to backfila runs. This is useful in tests and development; in production use the Backfila dashboard UI. app.cash.backfila.client.misk.client.BackfilaClientConfig Configures connectivity to the Backfila service. app.cash.backfila.client.misk.client.BackfilaClientLoggingSetupProvider app.cash.backfila.client.misk.client.BackfilaClientMDCLoggingSetupProvider app.cash.backfila.client.misk.client.BackfilaClientModule Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule . app.cash.backfila.client.misk.client.BackfilaClientNoLoggingSetupProvider app.cash.backfila.client.misk.BackfilaManagementClient app.cash.backfila.client.misk.spi.BackfilaParametersOperator app.cash.backfila.client.misk.Backfill Backfill base type that is cached on a per backfill run case. Must be thread-safe for calls using the same backfill run id. app.cash.backfila.client.misk.spi.BackfillBackend Service provider interface for backends like Hibernate and DynamoDb. Backends construct operators that actually run the backfill. app.cash.backfila.client.misk.BackfillConfig app.cash.backfila.client.misk.BackfillModule Backfila-using applications install at minimum 3 things. app.cash.backfila.client.misk.spi.BackfillOperator Backends provide these operators that are invoked to run the underlying backfill logic. app.cash.backfila.client.misk.internal.BackfillOperatorFactory Creates BackfillOperators using the registered Backends. app.cash.backfila.client.misk.spi.BackfillRegistration app.cash.backfila.client.misk.embedded.BackfillRun Get an instance of this from Backfila . app.cash.backfila.client.misk.internal.BatchSnapshot app.cash.backfila.client.misk.Description Annotation used on your backfill class and parameters class constructor to send metadata to Backfila. app.cash.backfila.client.misk.embedded.EmbeddedBackfilaModule Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule . app.cash.backfila.client.misk.internal.EmptyBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one. app.cash.backfila.client.misk.NoParameters Placeholder class to represent when a backfill has no Parameters. app.cash.backfila.client.misk.internal.PartitionCursor Immutable snapshot of a cursor.","title":"All Types"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/","text":"client-misk / app.cash.backfila.client.misk Package app.cash.backfila.client.misk \u00b6 Types \u00b6 Name Summary BackfilaManagementClient interface BackfilaManagementClient Backfill interface Backfill Backfill base type that is cached on a per backfill run case. Must be thread-safe for calls using the same backfill run id. BackfillConfig data class BackfillConfig<Param : Any > BackfillModule class BackfillModule : KAbstractModule Backfila-using applications install at minimum 3 things. NoParameters class NoParameters Placeholder class to represent when a backfill has no Parameters. Annotations \u00b6 Name Summary Description annotation class Description Annotation used on your backfill class and parameters class constructor to send metadata to Backfila.","title":"Package app.cash.backfila.client.misk - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/#package-appcashbackfilaclientmisk","text":"","title":"Package app.cash.backfila.client.misk"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/#types","text":"Name Summary BackfilaManagementClient interface BackfilaManagementClient Backfill interface Backfill Backfill base type that is cached on a per backfill run case. Must be thread-safe for calls using the same backfill run id. BackfillConfig data class BackfillConfig<Param : Any > BackfillModule class BackfillModule : KAbstractModule Backfila-using applications install at minimum 3 things. NoParameters class NoParameters Placeholder class to represent when a backfill has no Parameters.","title":"Types"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/#annotations","text":"Name Summary Description annotation class Description Annotation used on your backfill class and parameters class constructor to send metadata to Backfila.","title":"Annotations"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill/","text":"client-misk / app.cash.backfila.client.misk / Backfill Backfill \u00b6 interface Backfill Backfill base type that is cached on a per backfill run case. Must be thread-safe for calls using the same backfill run id.","title":"Backfill - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill/#backfill","text":"interface Backfill Backfill base type that is cached on a per backfill run case. Must be thread-safe for calls using the same backfill run id.","title":"Backfill"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfila-management-client/","text":"client-misk / app.cash.backfila.client.misk / BackfilaManagementClient BackfilaManagementClient \u00b6 interface BackfilaManagementClient Functions \u00b6 Name Summary createAndStart abstract fun <B : Backfill > createAndStart(backfillClass: Class < B >, dry_run: Boolean , num_threads: Int ? = null, parameters: Any ? = null, extra_sleep_ms: Long ? = null, backoff_schedule: String ? = null, batch_size: Long ? = null, scan_size: Long ? = null, pkey_range_start: ByteString? = null, pkey_range_end: ByteString? = null): Unit","title":"BackfilaManagementClient - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfila-management-client/#backfilamanagementclient","text":"interface BackfilaManagementClient","title":"BackfilaManagementClient"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfila-management-client/#functions","text":"Name Summary createAndStart abstract fun <B : Backfill > createAndStart(backfillClass: Class < B >, dry_run: Boolean , num_threads: Int ? = null, parameters: Any ? = null, extra_sleep_ms: Long ? = null, backoff_schedule: String ? = null, batch_size: Long ? = null, scan_size: Long ? = null, pkey_range_start: ByteString? = null, pkey_range_end: ByteString? = null): Unit","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfila-management-client/create-and-start/","text":"client-misk / app.cash.backfila.client.misk / BackfilaManagementClient / createAndStart createAndStart \u00b6 abstract fun <B : Backfill > createAndStart(backfillClass: Class < B >, dry_run: Boolean , num_threads: Int ? = null, parameters: Any ? = null, extra_sleep_ms: Long ? = null, backoff_schedule: String ? = null, batch_size: Long ? = null, scan_size: Long ? = null, pkey_range_start: ByteString? = null, pkey_range_end: ByteString? = null): Unit","title":"createAndStart - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfila-management-client/create-and-start/#createandstart","text":"abstract fun <B : Backfill > createAndStart(backfillClass: Class < B >, dry_run: Boolean , num_threads: Int ? = null, parameters: Any ? = null, extra_sleep_ms: Long ? = null, backoff_schedule: String ? = null, batch_size: Long ? = null, scan_size: Long ? = null, pkey_range_start: ByteString? = null, pkey_range_end: ByteString? = null): Unit","title":"createAndStart"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/","text":"client-misk / app.cash.backfila.client.misk / BackfillConfig BackfillConfig \u00b6 data class BackfillConfig<Param : Any > Constructors \u00b6 Name Summary <init> BackfillConfig(parameters: Param , dryRun: Boolean = true) Properties \u00b6 Name Summary dryRun val dryRun: Boolean parameters val parameters: Param","title":"BackfillConfig - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/#backfillconfig","text":"data class BackfillConfig<Param : Any >","title":"BackfillConfig"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/#constructors","text":"Name Summary <init> BackfillConfig(parameters: Param , dryRun: Boolean = true)","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/#properties","text":"Name Summary dryRun val dryRun: Boolean parameters val parameters: Param","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/-init-/","text":"client-misk / app.cash.backfila.client.misk / BackfillConfig / <init> <init> \u00b6 BackfillConfig(parameters: Param , dryRun: Boolean = true)","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/-init-/#init","text":"BackfillConfig(parameters: Param , dryRun: Boolean = true)","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/dry-run/","text":"client-misk / app.cash.backfila.client.misk / BackfillConfig / dryRun dryRun \u00b6 val dryRun: Boolean","title":"dryRun - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/dry-run/#dryrun","text":"val dryRun: Boolean","title":"dryRun"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/parameters/","text":"client-misk / app.cash.backfila.client.misk / BackfillConfig / parameters parameters \u00b6 val parameters: Param","title":"parameters - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-config/parameters/#parameters","text":"val parameters: Param","title":"parameters"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/","text":"client-misk / app.cash.backfila.client.misk / BackfillModule BackfillModule \u00b6 class BackfillModule : KAbstractModule Backfila-using applications install at minimum 3 things. This module One or more specific client backend implementation modules such as HibernateBackfillModule Either: EmbeddedBackfilaModule (testing and development) or BackfilaClientModule (staging and production). Constructors \u00b6 Name Summary <init> BackfillModule(config: BackfilaClientConfig , loggingSetupProvider: KClass <out BackfilaClientLoggingSetupProvider > = BackfilaClientNoLoggingSetupProvider::class) Backfila-using applications install at minimum 3 things. Functions \u00b6 Name Summary configure fun configure(): Unit provideMoshi fun provideMoshi(): Moshi","title":"BackfillModule - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/#backfillmodule","text":"class BackfillModule : KAbstractModule Backfila-using applications install at minimum 3 things. This module One or more specific client backend implementation modules such as HibernateBackfillModule Either: EmbeddedBackfilaModule (testing and development) or BackfilaClientModule (staging and production).","title":"BackfillModule"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/#constructors","text":"Name Summary <init> BackfillModule(config: BackfilaClientConfig , loggingSetupProvider: KClass <out BackfilaClientLoggingSetupProvider > = BackfilaClientNoLoggingSetupProvider::class) Backfila-using applications install at minimum 3 things.","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/#functions","text":"Name Summary configure fun configure(): Unit provideMoshi fun provideMoshi(): Moshi","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/-init-/","text":"client-misk / app.cash.backfila.client.misk / BackfillModule / <init> <init> \u00b6 BackfillModule(config: BackfilaClientConfig , loggingSetupProvider: KClass <out BackfilaClientLoggingSetupProvider > = BackfilaClientNoLoggingSetupProvider::class) Backfila-using applications install at minimum 3 things. This module One or more specific client backend implementation modules such as HibernateBackfillModule Either: EmbeddedBackfilaModule (testing and development) or BackfilaClientModule (staging and production).","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/-init-/#init","text":"BackfillModule(config: BackfilaClientConfig , loggingSetupProvider: KClass <out BackfilaClientLoggingSetupProvider > = BackfilaClientNoLoggingSetupProvider::class) Backfila-using applications install at minimum 3 things. This module One or more specific client backend implementation modules such as HibernateBackfillModule Either: EmbeddedBackfilaModule (testing and development) or BackfilaClientModule (staging and production).","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/configure/","text":"client-misk / app.cash.backfila.client.misk / BackfillModule / configure configure \u00b6 protected fun configure(): Unit","title":"configure - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/configure/#configure","text":"protected fun configure(): Unit","title":"configure"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/provide-moshi/","text":"client-misk / app.cash.backfila.client.misk / BackfillModule / provideMoshi provideMoshi \u00b6 @Singleton @Provides fun provideMoshi(): Moshi","title":"provideMoshi - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-backfill-module/provide-moshi/#providemoshi","text":"@Singleton @Provides fun provideMoshi(): Moshi","title":"provideMoshi"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/","text":"client-misk / app.cash.backfila.client.misk / Description Description \u00b6 @Target([AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.CLASS]) annotation class Description Annotation used on your backfill class and parameters class constructor to send metadata to Backfila. Constructors \u00b6 Name Summary <init> Description(text: String ) Annotation used on your backfill class and parameters class constructor to send metadata to Backfila. Properties \u00b6 Name Summary text val text: String","title":"Description - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/#description","text":"@Target([AnnotationTarget.VALUE_PARAMETER, AnnotationTarget.CLASS]) annotation class Description Annotation used on your backfill class and parameters class constructor to send metadata to Backfila.","title":"Description"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/#constructors","text":"Name Summary <init> Description(text: String ) Annotation used on your backfill class and parameters class constructor to send metadata to Backfila.","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/#properties","text":"Name Summary text val text: String","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/-init-/","text":"client-misk / app.cash.backfila.client.misk / Description / <init> <init> \u00b6 Description(text: String ) Annotation used on your backfill class and parameters class constructor to send metadata to Backfila.","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/-init-/#init","text":"Description(text: String ) Annotation used on your backfill class and parameters class constructor to send metadata to Backfila.","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/text/","text":"client-misk / app.cash.backfila.client.misk / Description / text text \u00b6 val text: String","title":"text - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-description/text/#text","text":"val text: String","title":"text"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-no-parameters/","text":"client-misk / app.cash.backfila.client.misk / NoParameters NoParameters \u00b6 class NoParameters Placeholder class to represent when a backfill has no Parameters. Constructors \u00b6 Name Summary <init> NoParameters() Placeholder class to represent when a backfill has no Parameters.","title":"NoParameters - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-no-parameters/#noparameters","text":"class NoParameters Placeholder class to represent when a backfill has no Parameters.","title":"NoParameters"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-no-parameters/#constructors","text":"Name Summary <init> NoParameters() Placeholder class to represent when a backfill has no Parameters.","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-no-parameters/-init-/","text":"client-misk / app.cash.backfila.client.misk / NoParameters / <init> <init> \u00b6 NoParameters() Placeholder class to represent when a backfill has no Parameters.","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk/-no-parameters/-init-/#init","text":"NoParameters() Placeholder class to represent when a backfill has no Parameters.","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/","text":"client-misk / app.cash.backfila.client.misk.client Package app.cash.backfila.client.misk.client \u00b6 Types \u00b6 Name Summary BackfilaClientConfig data class BackfilaClientConfig Configures connectivity to the Backfila service. BackfilaClientLoggingSetupProvider interface BackfilaClientLoggingSetupProvider BackfilaClientMDCLoggingSetupProvider class BackfilaClientMDCLoggingSetupProvider : BackfilaClientLoggingSetupProvider BackfilaClientModule class BackfilaClientModule : KAbstractModule Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule . BackfilaClientNoLoggingSetupProvider class BackfilaClientNoLoggingSetupProvider : BackfilaClientLoggingSetupProvider","title":"Package app.cash.backfila.client.misk.client - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/#package-appcashbackfilaclientmiskclient","text":"","title":"Package app.cash.backfila.client.misk.client"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/#types","text":"Name Summary BackfilaClientConfig data class BackfilaClientConfig Configures connectivity to the Backfila service. BackfilaClientLoggingSetupProvider interface BackfilaClientLoggingSetupProvider BackfilaClientMDCLoggingSetupProvider class BackfilaClientMDCLoggingSetupProvider : BackfilaClientLoggingSetupProvider BackfilaClientModule class BackfilaClientModule : KAbstractModule Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule . BackfilaClientNoLoggingSetupProvider class BackfilaClientNoLoggingSetupProvider : BackfilaClientLoggingSetupProvider","title":"Types"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientConfig BackfilaClientConfig \u00b6 data class BackfilaClientConfig Configures connectivity to the Backfila service. Constructors \u00b6 Name Summary <init> BackfilaClientConfig(url: String , slack_channel: String ?) Configures connectivity to the Backfila service. Properties \u00b6 Name Summary slack_channel val slack_channel: String ? url val url: String The URL of your service so backfila can call into it.","title":"BackfilaClientConfig - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/#backfilaclientconfig","text":"data class BackfilaClientConfig Configures connectivity to the Backfila service.","title":"BackfilaClientConfig"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/#constructors","text":"Name Summary <init> BackfilaClientConfig(url: String , slack_channel: String ?) Configures connectivity to the Backfila service.","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/#properties","text":"Name Summary slack_channel val slack_channel: String ? url val url: String The URL of your service so backfila can call into it.","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/-init-/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientConfig / <init> <init> \u00b6 BackfilaClientConfig(url: String , slack_channel: String ?) Configures connectivity to the Backfila service.","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/-init-/#init","text":"BackfilaClientConfig(url: String , slack_channel: String ?) Configures connectivity to the Backfila service.","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/slack_channel/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientConfig / slack_channel slack_channel \u00b6 val slack_channel: String ?","title":"slack_channel - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/slack_channel/#slack_channel","text":"val slack_channel: String ?","title":"slack_channel"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/url/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientConfig / url url \u00b6 val url: String The URL of your service so backfila can call into it.","title":"url - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-config/url/#url","text":"val url: String The URL of your service so backfila can call into it.","title":"url"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientLoggingSetupProvider BackfilaClientLoggingSetupProvider \u00b6 interface BackfilaClientLoggingSetupProvider Functions \u00b6 Name Summary withBackfillPartitionLogging abstract fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T withBackfillRunLogging abstract fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T Inheritors \u00b6 Name Summary BackfilaClientMDCLoggingSetupProvider class BackfilaClientMDCLoggingSetupProvider : BackfilaClientLoggingSetupProvider BackfilaClientNoLoggingSetupProvider class BackfilaClientNoLoggingSetupProvider : BackfilaClientLoggingSetupProvider","title":"BackfilaClientLoggingSetupProvider - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/#backfilaclientloggingsetupprovider","text":"interface BackfilaClientLoggingSetupProvider","title":"BackfilaClientLoggingSetupProvider"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/#functions","text":"Name Summary withBackfillPartitionLogging abstract fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T withBackfillRunLogging abstract fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/#inheritors","text":"Name Summary BackfilaClientMDCLoggingSetupProvider class BackfilaClientMDCLoggingSetupProvider : BackfilaClientLoggingSetupProvider BackfilaClientNoLoggingSetupProvider class BackfilaClientNoLoggingSetupProvider : BackfilaClientLoggingSetupProvider","title":"Inheritors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/with-backfill-partition-logging/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientLoggingSetupProvider / withBackfillPartitionLogging withBackfillPartitionLogging \u00b6 abstract fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T","title":"withBackfillPartitionLogging - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/with-backfill-partition-logging/#withbackfillpartitionlogging","text":"abstract fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T","title":"withBackfillPartitionLogging"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/with-backfill-run-logging/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientLoggingSetupProvider / withBackfillRunLogging withBackfillRunLogging \u00b6 abstract fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T","title":"withBackfillRunLogging - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-logging-setup-provider/with-backfill-run-logging/#withbackfillrunlogging","text":"abstract fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T","title":"withBackfillRunLogging"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider BackfilaClientMDCLoggingSetupProvider \u00b6 class BackfilaClientMDCLoggingSetupProvider : BackfilaClientLoggingSetupProvider Constructors \u00b6 Name Summary <init> BackfilaClientMDCLoggingSetupProvider() Functions \u00b6 Name Summary withBackfillPartitionLogging fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T withBackfillRunLogging fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T Companion Object Properties \u00b6 Name Summary logger val logger: KLogger MDC_BACKFILL_ID const val MDC_BACKFILL_ID: String MDC_BACKFILL_NAME const val MDC_BACKFILL_NAME: String MDC_PARTITION_NAME const val MDC_PARTITION_NAME: String","title":"BackfilaClientMDCLoggingSetupProvider - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/#backfilaclientmdcloggingsetupprovider","text":"class BackfilaClientMDCLoggingSetupProvider : BackfilaClientLoggingSetupProvider","title":"BackfilaClientMDCLoggingSetupProvider"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/#constructors","text":"Name Summary <init> BackfilaClientMDCLoggingSetupProvider()","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/#functions","text":"Name Summary withBackfillPartitionLogging fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T withBackfillRunLogging fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/#companion-object-properties","text":"Name Summary logger val logger: KLogger MDC_BACKFILL_ID const val MDC_BACKFILL_ID: String MDC_BACKFILL_NAME const val MDC_BACKFILL_NAME: String MDC_PARTITION_NAME const val MDC_PARTITION_NAME: String","title":"Companion Object Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-init-/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider / <init> <init> \u00b6 BackfilaClientMDCLoggingSetupProvider()","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-init-/#init","text":"BackfilaClientMDCLoggingSetupProvider()","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-m-d-c_-b-a-c-k-f-i-l-l_-i-d/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider / MDC_BACKFILL_ID MDC_BACKFILL_ID \u00b6 const val MDC_BACKFILL_ID: String","title":"MDC_BACKFILL_ID - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-m-d-c_-b-a-c-k-f-i-l-l_-i-d/#mdc_backfill_id","text":"const val MDC_BACKFILL_ID: String","title":"MDC_BACKFILL_ID"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-m-d-c_-b-a-c-k-f-i-l-l_-n-a-m-e/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider / MDC_BACKFILL_NAME MDC_BACKFILL_NAME \u00b6 const val MDC_BACKFILL_NAME: String","title":"MDC_BACKFILL_NAME - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-m-d-c_-b-a-c-k-f-i-l-l_-n-a-m-e/#mdc_backfill_name","text":"const val MDC_BACKFILL_NAME: String","title":"MDC_BACKFILL_NAME"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-m-d-c_-p-a-r-t-i-t-i-o-n_-n-a-m-e/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider / MDC_PARTITION_NAME MDC_PARTITION_NAME \u00b6 const val MDC_PARTITION_NAME: String","title":"MDC_PARTITION_NAME - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/-m-d-c_-p-a-r-t-i-t-i-o-n_-n-a-m-e/#mdc_partition_name","text":"const val MDC_PARTITION_NAME: String","title":"MDC_PARTITION_NAME"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/logger/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider / logger logger \u00b6 val logger: KLogger","title":"logger - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/logger/#logger","text":"val logger: KLogger","title":"logger"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/with-backfill-partition-logging/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider / withBackfillPartitionLogging withBackfillPartitionLogging \u00b6 fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillPartitionLogging","title":"withBackfillPartitionLogging - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/with-backfill-partition-logging/#withbackfillpartitionlogging","text":"fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillPartitionLogging","title":"withBackfillPartitionLogging"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/with-backfill-run-logging/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientMDCLoggingSetupProvider / withBackfillRunLogging withBackfillRunLogging \u00b6 fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillRunLogging","title":"withBackfillRunLogging - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-m-d-c-logging-setup-provider/with-backfill-run-logging/#withbackfillrunlogging","text":"fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillRunLogging","title":"withBackfillRunLogging"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientModule BackfilaClientModule \u00b6 class BackfilaClientModule : KAbstractModule Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule . Constructors \u00b6 Name Summary <init> BackfilaClientModule() Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule . Functions \u00b6 Name Summary configure fun configure(): Unit","title":"BackfilaClientModule - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/#backfilaclientmodule","text":"class BackfilaClientModule : KAbstractModule Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule .","title":"BackfilaClientModule"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/#constructors","text":"Name Summary <init> BackfilaClientModule() Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule .","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/#functions","text":"Name Summary configure fun configure(): Unit","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/-init-/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientModule / <init> <init> \u00b6 BackfilaClientModule() Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule .","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/-init-/#init","text":"BackfilaClientModule() Use this to connect to a real Backfila service in staging or production. You will also need to install a BackfillModule .","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/configure/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientModule / configure configure \u00b6 protected fun configure(): Unit","title":"configure - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-module/configure/#configure","text":"protected fun configure(): Unit","title":"configure"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientNoLoggingSetupProvider BackfilaClientNoLoggingSetupProvider \u00b6 class BackfilaClientNoLoggingSetupProvider : BackfilaClientLoggingSetupProvider Constructors \u00b6 Name Summary <init> BackfilaClientNoLoggingSetupProvider() Functions \u00b6 Name Summary withBackfillPartitionLogging fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T withBackfillRunLogging fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T","title":"BackfilaClientNoLoggingSetupProvider - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/#backfilaclientnologgingsetupprovider","text":"class BackfilaClientNoLoggingSetupProvider : BackfilaClientLoggingSetupProvider","title":"BackfilaClientNoLoggingSetupProvider"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/#constructors","text":"Name Summary <init> BackfilaClientNoLoggingSetupProvider()","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/#functions","text":"Name Summary withBackfillPartitionLogging fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T withBackfillRunLogging fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/-init-/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientNoLoggingSetupProvider / <init> <init> \u00b6 BackfilaClientNoLoggingSetupProvider()","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/-init-/#init","text":"BackfilaClientNoLoggingSetupProvider()","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/with-backfill-partition-logging/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientNoLoggingSetupProvider / withBackfillPartitionLogging withBackfillPartitionLogging \u00b6 fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillPartitionLogging","title":"withBackfillPartitionLogging - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/with-backfill-partition-logging/#withbackfillpartitionlogging","text":"fun <T> withBackfillPartitionLogging(backfillName: String , backfillId: String , partitionName: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillPartitionLogging","title":"withBackfillPartitionLogging"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/with-backfill-run-logging/","text":"client-misk / app.cash.backfila.client.misk.client / BackfilaClientNoLoggingSetupProvider / withBackfillRunLogging withBackfillRunLogging \u00b6 fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillRunLogging","title":"withBackfillRunLogging - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.client/-backfila-client-no-logging-setup-provider/with-backfill-run-logging/#withbackfillrunlogging","text":"fun <T> withBackfillRunLogging(backfillName: String , backfillId: String , wrapped: () -> T ): T Overrides BackfilaClientLoggingSetupProvider.withBackfillRunLogging","title":"withBackfillRunLogging"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/","text":"client-misk / app.cash.backfila.client.misk.embedded Package app.cash.backfila.client.misk.embedded \u00b6 Types \u00b6 Name Summary Backfila interface Backfila Programmatic access to backfila runs. This is useful in tests and development; in production use the Backfila dashboard UI. BackfillRun interface BackfillRun<B : Backfill > Get an instance of this from Backfila . EmbeddedBackfilaModule class EmbeddedBackfilaModule : KAbstractModule Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule . Functions \u00b6 Name Summary createDryRun fun <Type : Backfill > Backfila .createDryRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type > createWetRun fun <Type : Backfill > Backfila .createWetRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"Package app.cash.backfila.client.misk.embedded - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/#package-appcashbackfilaclientmiskembedded","text":"","title":"Package app.cash.backfila.client.misk.embedded"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/#types","text":"Name Summary Backfila interface Backfila Programmatic access to backfila runs. This is useful in tests and development; in production use the Backfila dashboard UI. BackfillRun interface BackfillRun<B : Backfill > Get an instance of this from Backfila . EmbeddedBackfilaModule class EmbeddedBackfilaModule : KAbstractModule Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule .","title":"Types"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/#functions","text":"Name Summary createDryRun fun <Type : Backfill > Backfila .createDryRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type > createWetRun fun <Type : Backfill > Backfila .createWetRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/create-dry-run/","text":"client-misk / app.cash.backfila.client.misk.embedded / createDryRun createDryRun \u00b6 inline fun <reified Type : Backfill > Backfila .createDryRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"createDryRun - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/create-dry-run/#createdryrun","text":"inline fun <reified Type : Backfill > Backfila .createDryRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"createDryRun"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/create-wet-run/","text":"client-misk / app.cash.backfila.client.misk.embedded / createWetRun createWetRun \u00b6 inline fun <reified Type : Backfill > Backfila .createWetRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"createWetRun - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/create-wet-run/#createwetrun","text":"inline fun <reified Type : Backfill > Backfila .createWetRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"createWetRun"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/","text":"client-misk / app.cash.backfila.client.misk.embedded / Backfila Backfila \u00b6 interface Backfila Programmatic access to backfila runs. This is useful in tests and development; in production use the Backfila dashboard UI. Properties \u00b6 Name Summary configureServiceData abstract val configureServiceData: ConfigureServiceRequest? Functions \u00b6 Name Summary createDryRun abstract fun <Type : Backfill > createDryRun(backfill: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type > createWetRun abstract fun <Type : Backfill > createWetRun(backfillType: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type > Extension Functions \u00b6 Name Summary createDryRun fun <Type : Backfill > Backfila .createDryRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type > createWetRun fun <Type : Backfill > Backfila .createWetRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"Backfila - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/#backfila","text":"interface Backfila Programmatic access to backfila runs. This is useful in tests and development; in production use the Backfila dashboard UI.","title":"Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/#properties","text":"Name Summary configureServiceData abstract val configureServiceData: ConfigureServiceRequest?","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/#functions","text":"Name Summary createDryRun abstract fun <Type : Backfill > createDryRun(backfill: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type > createWetRun abstract fun <Type : Backfill > createWetRun(backfillType: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type >","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/#extension-functions","text":"Name Summary createDryRun fun <Type : Backfill > Backfila .createDryRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type > createWetRun fun <Type : Backfill > Backfila .createWetRun(parameters: Any ? = null, parameterData: Map < String , ByteString> = mapOf(), rangeStart: String ? = null, rangeEnd: String ? = null): BackfillRun < Type >","title":"Extension Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/configure-service-data/","text":"client-misk / app.cash.backfila.client.misk.embedded / Backfila / configureServiceData configureServiceData \u00b6 abstract val configureServiceData: ConfigureServiceRequest?","title":"configureServiceData - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/configure-service-data/#configureservicedata","text":"abstract val configureServiceData: ConfigureServiceRequest?","title":"configureServiceData"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/create-dry-run/","text":"client-misk / app.cash.backfila.client.misk.embedded / Backfila / createDryRun createDryRun \u00b6 abstract fun <Type : Backfill > createDryRun(backfill: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type >","title":"createDryRun - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/create-dry-run/#createdryrun","text":"abstract fun <Type : Backfill > createDryRun(backfill: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type >","title":"createDryRun"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/create-wet-run/","text":"client-misk / app.cash.backfila.client.misk.embedded / Backfila / createWetRun createWetRun \u00b6 abstract fun <Type : Backfill > createWetRun(backfillType: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type >","title":"createWetRun - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfila/create-wet-run/#createwetrun","text":"abstract fun <Type : Backfill > createWetRun(backfillType: KClass < Type >, parameters: Map < String , ByteString>, rangeStart: String ?, rangeEnd: String ?): BackfillRun < Type >","title":"createWetRun"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun BackfillRun \u00b6 interface BackfillRun<B : Backfill > Get an instance of this from Backfila . Properties \u00b6 Name Summary backfill abstract val backfill: B batchesToRunSnapshot abstract val batchesToRunSnapshot: List < BatchSnapshot > batchSize abstract var batchSize: Long computeCountLimit abstract var computeCountLimit: Long dryRun abstract val dryRun: Boolean parameters abstract val parameters: Map < String , ByteString> partitionProgressSnapshot abstract val partitionProgressSnapshot: Map < String , PartitionCursor > precomputeMatchingCount abstract val precomputeMatchingCount: Long precomputeScannedCount abstract val precomputeScannedCount: Long prepareBackfillResponse abstract val prepareBackfillResponse: PrepareBackfillResponse rangeEnd abstract val rangeEnd: String ? rangeStart abstract val rangeStart: String ? scanSize abstract var scanSize: Long Functions \u00b6 Name Summary complete abstract fun complete(): Boolean execute open fun execute(): Unit Prepares, scans and runs the whole backfill. finishedPrecomputing abstract fun finishedPrecomputing(): Boolean finishedScanning abstract fun finishedScanning(): Boolean partitionScan abstract fun partitionScan(partitionName: String ): GetNextBatchRangeResponse Does a single scan for batches on the partition provided. precomputeRemaining abstract fun precomputeRemaining(): Unit precomputeScan abstract fun precomputeScan(): GetNextBatchRangeResponse runAllScanned abstract fun runAllScanned(): Unit Runs all the batches that are scanned and ready to run. runBatch abstract fun runBatch(): Unit Throws an error if there is no batch to run. scanRemaining abstract fun scanRemaining(): Unit Scans all the remaining batches and places them in the queue to run. singleScan abstract fun singleScan(): GetNextBatchRangeResponse Does a single scan for batches on any partition.","title":"BackfillRun - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/#backfillrun","text":"interface BackfillRun<B : Backfill > Get an instance of this from Backfila .","title":"BackfillRun"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/#properties","text":"Name Summary backfill abstract val backfill: B batchesToRunSnapshot abstract val batchesToRunSnapshot: List < BatchSnapshot > batchSize abstract var batchSize: Long computeCountLimit abstract var computeCountLimit: Long dryRun abstract val dryRun: Boolean parameters abstract val parameters: Map < String , ByteString> partitionProgressSnapshot abstract val partitionProgressSnapshot: Map < String , PartitionCursor > precomputeMatchingCount abstract val precomputeMatchingCount: Long precomputeScannedCount abstract val precomputeScannedCount: Long prepareBackfillResponse abstract val prepareBackfillResponse: PrepareBackfillResponse rangeEnd abstract val rangeEnd: String ? rangeStart abstract val rangeStart: String ? scanSize abstract var scanSize: Long","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/#functions","text":"Name Summary complete abstract fun complete(): Boolean execute open fun execute(): Unit Prepares, scans and runs the whole backfill. finishedPrecomputing abstract fun finishedPrecomputing(): Boolean finishedScanning abstract fun finishedScanning(): Boolean partitionScan abstract fun partitionScan(partitionName: String ): GetNextBatchRangeResponse Does a single scan for batches on the partition provided. precomputeRemaining abstract fun precomputeRemaining(): Unit precomputeScan abstract fun precomputeScan(): GetNextBatchRangeResponse runAllScanned abstract fun runAllScanned(): Unit Runs all the batches that are scanned and ready to run. runBatch abstract fun runBatch(): Unit Throws an error if there is no batch to run. scanRemaining abstract fun scanRemaining(): Unit Scans all the remaining batches and places them in the queue to run. singleScan abstract fun singleScan(): GetNextBatchRangeResponse Does a single scan for batches on any partition.","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/backfill/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / backfill backfill \u00b6 abstract val backfill: B","title":"backfill - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/backfill/#backfill","text":"abstract val backfill: B","title":"backfill"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/batch-size/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / batchSize batchSize \u00b6 abstract var batchSize: Long","title":"batchSize - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/batch-size/#batchsize","text":"abstract var batchSize: Long","title":"batchSize"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/batches-to-run-snapshot/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / batchesToRunSnapshot batchesToRunSnapshot \u00b6 abstract val batchesToRunSnapshot: List < BatchSnapshot >","title":"batchesToRunSnapshot - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/batches-to-run-snapshot/#batchestorunsnapshot","text":"abstract val batchesToRunSnapshot: List < BatchSnapshot >","title":"batchesToRunSnapshot"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/complete/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / complete complete \u00b6 abstract fun complete(): Boolean","title":"complete - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/complete/#complete","text":"abstract fun complete(): Boolean","title":"complete"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/compute-count-limit/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / computeCountLimit computeCountLimit \u00b6 abstract var computeCountLimit: Long","title":"computeCountLimit - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/compute-count-limit/#computecountlimit","text":"abstract var computeCountLimit: Long","title":"computeCountLimit"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/dry-run/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / dryRun dryRun \u00b6 abstract val dryRun: Boolean","title":"dryRun - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/dry-run/#dryrun","text":"abstract val dryRun: Boolean","title":"dryRun"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/execute/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / execute execute \u00b6 open fun execute(): Unit Prepares, scans and runs the whole backfill.","title":"execute - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/execute/#execute","text":"open fun execute(): Unit Prepares, scans and runs the whole backfill.","title":"execute"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/finished-precomputing/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / finishedPrecomputing finishedPrecomputing \u00b6 abstract fun finishedPrecomputing(): Boolean","title":"finishedPrecomputing - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/finished-precomputing/#finishedprecomputing","text":"abstract fun finishedPrecomputing(): Boolean","title":"finishedPrecomputing"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/finished-scanning/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / finishedScanning finishedScanning \u00b6 abstract fun finishedScanning(): Boolean","title":"finishedScanning - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/finished-scanning/#finishedscanning","text":"abstract fun finishedScanning(): Boolean","title":"finishedScanning"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/parameters/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / parameters parameters \u00b6 abstract val parameters: Map < String , ByteString>","title":"parameters - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/parameters/#parameters","text":"abstract val parameters: Map < String , ByteString>","title":"parameters"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/partition-progress-snapshot/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / partitionProgressSnapshot partitionProgressSnapshot \u00b6 abstract val partitionProgressSnapshot: Map < String , PartitionCursor >","title":"partitionProgressSnapshot - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/partition-progress-snapshot/#partitionprogresssnapshot","text":"abstract val partitionProgressSnapshot: Map < String , PartitionCursor >","title":"partitionProgressSnapshot"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/partition-scan/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / partitionScan partitionScan \u00b6 abstract fun partitionScan(partitionName: String ): GetNextBatchRangeResponse Does a single scan for batches on the partition provided.","title":"partitionScan - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/partition-scan/#partitionscan","text":"abstract fun partitionScan(partitionName: String ): GetNextBatchRangeResponse Does a single scan for batches on the partition provided.","title":"partitionScan"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-matching-count/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / precomputeMatchingCount precomputeMatchingCount \u00b6 abstract val precomputeMatchingCount: Long","title":"precomputeMatchingCount - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-matching-count/#precomputematchingcount","text":"abstract val precomputeMatchingCount: Long","title":"precomputeMatchingCount"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-remaining/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / precomputeRemaining precomputeRemaining \u00b6 abstract fun precomputeRemaining(): Unit","title":"precomputeRemaining - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-remaining/#precomputeremaining","text":"abstract fun precomputeRemaining(): Unit","title":"precomputeRemaining"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-scan/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / precomputeScan precomputeScan \u00b6 abstract fun precomputeScan(): GetNextBatchRangeResponse","title":"precomputeScan - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-scan/#precomputescan","text":"abstract fun precomputeScan(): GetNextBatchRangeResponse","title":"precomputeScan"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-scanned-count/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / precomputeScannedCount precomputeScannedCount \u00b6 abstract val precomputeScannedCount: Long","title":"precomputeScannedCount - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/precompute-scanned-count/#precomputescannedcount","text":"abstract val precomputeScannedCount: Long","title":"precomputeScannedCount"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/prepare-backfill-response/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / prepareBackfillResponse prepareBackfillResponse \u00b6 abstract val prepareBackfillResponse: PrepareBackfillResponse","title":"prepareBackfillResponse - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/prepare-backfill-response/#preparebackfillresponse","text":"abstract val prepareBackfillResponse: PrepareBackfillResponse","title":"prepareBackfillResponse"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/range-end/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / rangeEnd rangeEnd \u00b6 abstract val rangeEnd: String ?","title":"rangeEnd - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/range-end/#rangeend","text":"abstract val rangeEnd: String ?","title":"rangeEnd"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/range-start/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / rangeStart rangeStart \u00b6 abstract val rangeStart: String ?","title":"rangeStart - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/range-start/#rangestart","text":"abstract val rangeStart: String ?","title":"rangeStart"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/run-all-scanned/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / runAllScanned runAllScanned \u00b6 abstract fun runAllScanned(): Unit Runs all the batches that are scanned and ready to run.","title":"runAllScanned - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/run-all-scanned/#runallscanned","text":"abstract fun runAllScanned(): Unit Runs all the batches that are scanned and ready to run.","title":"runAllScanned"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/run-batch/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / runBatch runBatch \u00b6 abstract fun runBatch(): Unit Throws an error if there is no batch to run.","title":"runBatch - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/run-batch/#runbatch","text":"abstract fun runBatch(): Unit Throws an error if there is no batch to run.","title":"runBatch"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/scan-remaining/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / scanRemaining scanRemaining \u00b6 abstract fun scanRemaining(): Unit Scans all the remaining batches and places them in the queue to run.","title":"scanRemaining - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/scan-remaining/#scanremaining","text":"abstract fun scanRemaining(): Unit Scans all the remaining batches and places them in the queue to run.","title":"scanRemaining"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/scan-size/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / scanSize scanSize \u00b6 abstract var scanSize: Long","title":"scanSize - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/scan-size/#scansize","text":"abstract var scanSize: Long","title":"scanSize"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/single-scan/","text":"client-misk / app.cash.backfila.client.misk.embedded / BackfillRun / singleScan singleScan \u00b6 abstract fun singleScan(): GetNextBatchRangeResponse Does a single scan for batches on any partition.","title":"singleScan - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-backfill-run/single-scan/#singlescan","text":"abstract fun singleScan(): GetNextBatchRangeResponse Does a single scan for batches on any partition.","title":"singleScan"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/","text":"client-misk / app.cash.backfila.client.misk.embedded / EmbeddedBackfilaModule EmbeddedBackfilaModule \u00b6 class EmbeddedBackfilaModule : KAbstractModule Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule . Constructors \u00b6 Name Summary <init> EmbeddedBackfilaModule() Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule . Functions \u00b6 Name Summary configure fun configure(): Unit","title":"EmbeddedBackfilaModule - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/#embeddedbackfilamodule","text":"class EmbeddedBackfilaModule : KAbstractModule Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule .","title":"EmbeddedBackfilaModule"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/#constructors","text":"Name Summary <init> EmbeddedBackfilaModule() Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule .","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/#functions","text":"Name Summary configure fun configure(): Unit","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/-init-/","text":"client-misk / app.cash.backfila.client.misk.embedded / EmbeddedBackfilaModule / <init> <init> \u00b6 EmbeddedBackfilaModule() Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule .","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/-init-/#init","text":"EmbeddedBackfilaModule() Use this to connect to an embedded Backfila implementation in development or testing. You will also need to install a BackfillModule .","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/configure/","text":"client-misk / app.cash.backfila.client.misk.embedded / EmbeddedBackfilaModule / configure configure \u00b6 protected fun configure(): Unit","title":"configure - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.embedded/-embedded-backfila-module/configure/#configure","text":"protected fun configure(): Unit","title":"configure"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/","text":"client-misk / app.cash.backfila.client.misk.internal Package app.cash.backfila.client.misk.internal \u00b6 Types \u00b6 Name Summary BackfillOperatorFactory class BackfillOperatorFactory Creates BackfillOperators using the registered Backends. BatchSnapshot data class BatchSnapshot EmptyBackend class EmptyBackend : BackfillBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one. PartitionCursor data class PartitionCursor Immutable snapshot of a cursor.","title":"Package app.cash.backfila.client.misk.internal - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/#package-appcashbackfilaclientmiskinternal","text":"","title":"Package app.cash.backfila.client.misk.internal"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/#types","text":"Name Summary BackfillOperatorFactory class BackfillOperatorFactory Creates BackfillOperators using the registered Backends. BatchSnapshot data class BatchSnapshot EmptyBackend class EmptyBackend : BackfillBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one. PartitionCursor data class PartitionCursor Immutable snapshot of a cursor.","title":"Types"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/","text":"client-misk / app.cash.backfila.client.misk.internal / BackfillOperatorFactory BackfillOperatorFactory \u00b6 @Singleton class BackfillOperatorFactory Creates BackfillOperators using the registered Backends. Constructors \u00b6 Name Summary <init> BackfillOperatorFactory(backends: Set < BackfillBackend >) Creates BackfillOperators using the registered Backends. Functions \u00b6 Name Summary create fun create(backfillName: String , backfillId: String ): BackfillOperator","title":"BackfillOperatorFactory - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/#backfilloperatorfactory","text":"@Singleton class BackfillOperatorFactory Creates BackfillOperators using the registered Backends.","title":"BackfillOperatorFactory"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/#constructors","text":"Name Summary <init> BackfillOperatorFactory(backends: Set < BackfillBackend >) Creates BackfillOperators using the registered Backends.","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/#functions","text":"Name Summary create fun create(backfillName: String , backfillId: String ): BackfillOperator","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/-init-/","text":"client-misk / app.cash.backfila.client.misk.internal / BackfillOperatorFactory / <init> <init> \u00b6 BackfillOperatorFactory(backends: Set < BackfillBackend >) Creates BackfillOperators using the registered Backends.","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/-init-/#init","text":"BackfillOperatorFactory(backends: Set < BackfillBackend >) Creates BackfillOperators using the registered Backends.","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/create/","text":"client-misk / app.cash.backfila.client.misk.internal / BackfillOperatorFactory / create create \u00b6 fun create(backfillName: String , backfillId: String ): BackfillOperator","title":"create - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-backfill-operator-factory/create/#create","text":"fun create(backfillName: String , backfillId: String ): BackfillOperator","title":"create"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot BatchSnapshot \u00b6 data class BatchSnapshot Constructors \u00b6 Name Summary <init> BatchSnapshot(partitionName: String , batchRange: KeyRange, scannedRecordCount: Long , matchingRecordCount: Long ) Properties \u00b6 Name Summary batchRange val batchRange: KeyRange matchingRecordCount val matchingRecordCount: Long partitionName val partitionName: String scannedRecordCount val scannedRecordCount: Long Functions \u00b6 Name Summary utf8RangeEnd fun utf8RangeEnd(): String utf8RangeStart fun utf8RangeStart(): String","title":"BatchSnapshot - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/#batchsnapshot","text":"data class BatchSnapshot","title":"BatchSnapshot"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/#constructors","text":"Name Summary <init> BatchSnapshot(partitionName: String , batchRange: KeyRange, scannedRecordCount: Long , matchingRecordCount: Long )","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/#properties","text":"Name Summary batchRange val batchRange: KeyRange matchingRecordCount val matchingRecordCount: Long partitionName val partitionName: String scannedRecordCount val scannedRecordCount: Long","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/#functions","text":"Name Summary utf8RangeEnd fun utf8RangeEnd(): String utf8RangeStart fun utf8RangeStart(): String","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/-init-/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot / <init> <init> \u00b6 BatchSnapshot(partitionName: String , batchRange: KeyRange, scannedRecordCount: Long , matchingRecordCount: Long )","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/-init-/#init","text":"BatchSnapshot(partitionName: String , batchRange: KeyRange, scannedRecordCount: Long , matchingRecordCount: Long )","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/batch-range/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot / batchRange batchRange \u00b6 val batchRange: KeyRange","title":"batchRange - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/batch-range/#batchrange","text":"val batchRange: KeyRange","title":"batchRange"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/matching-record-count/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot / matchingRecordCount matchingRecordCount \u00b6 val matchingRecordCount: Long","title":"matchingRecordCount - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/matching-record-count/#matchingrecordcount","text":"val matchingRecordCount: Long","title":"matchingRecordCount"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/partition-name/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot / partitionName partitionName \u00b6 val partitionName: String","title":"partitionName - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/partition-name/#partitionname","text":"val partitionName: String","title":"partitionName"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/scanned-record-count/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot / scannedRecordCount scannedRecordCount \u00b6 val scannedRecordCount: Long","title":"scannedRecordCount - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/scanned-record-count/#scannedrecordcount","text":"val scannedRecordCount: Long","title":"scannedRecordCount"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/utf8-range-end/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot / utf8RangeEnd utf8RangeEnd \u00b6 fun utf8RangeEnd(): String","title":"utf8RangeEnd - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/utf8-range-end/#utf8rangeend","text":"fun utf8RangeEnd(): String","title":"utf8RangeEnd"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/utf8-range-start/","text":"client-misk / app.cash.backfila.client.misk.internal / BatchSnapshot / utf8RangeStart utf8RangeStart \u00b6 fun utf8RangeStart(): String","title":"utf8RangeStart - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-batch-snapshot/utf8-range-start/#utf8rangestart","text":"fun utf8RangeStart(): String","title":"utf8RangeStart"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/","text":"client-misk / app.cash.backfila.client.misk.internal / EmptyBackend EmptyBackend \u00b6 @Singleton class EmptyBackend : BackfillBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one. Constructors \u00b6 Name Summary <init> EmptyBackend() Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one. Functions \u00b6 Name Summary backfills fun backfills(): Set < BackfillRegistration > create fun create(backfillName: String , backfillId: String ): BackfillOperator ?","title":"EmptyBackend - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/#emptybackend","text":"@Singleton class EmptyBackend : BackfillBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one.","title":"EmptyBackend"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/#constructors","text":"Name Summary <init> EmptyBackend() Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one.","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/#functions","text":"Name Summary backfills fun backfills(): Set < BackfillRegistration > create fun create(backfillName: String , backfillId: String ): BackfillOperator ?","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/-init-/","text":"client-misk / app.cash.backfila.client.misk.internal / EmptyBackend / <init> <init> \u00b6 EmptyBackend() Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one.","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/-init-/#init","text":"EmptyBackend() Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one.","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/backfills/","text":"client-misk / app.cash.backfila.client.misk.internal / EmptyBackend / backfills backfills \u00b6 fun backfills(): Set < BackfillRegistration > Overrides BackfillBackend.backfills","title":"backfills - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/backfills/#backfills","text":"fun backfills(): Set < BackfillRegistration > Overrides BackfillBackend.backfills","title":"backfills"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/create/","text":"client-misk / app.cash.backfila.client.misk.internal / EmptyBackend / create create \u00b6 fun create(backfillName: String , backfillId: String ): BackfillOperator ? Overrides BackfillBackend.create","title":"create - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-empty-backend/create/#create","text":"fun create(backfillName: String , backfillId: String ): BackfillOperator ? Overrides BackfillBackend.create","title":"create"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor PartitionCursor \u00b6 data class PartitionCursor Immutable snapshot of a cursor. Constructors \u00b6 Name Summary <init> PartitionCursor(partitionName: String , keyRange: KeyRange, previousEndKey: ByteString?, done: Boolean ) Immutable snapshot of a cursor. Properties \u00b6 Name Summary done val done: Boolean keyRange val keyRange: KeyRange partitionName val partitionName: String previousEndKey val previousEndKey: ByteString? Functions \u00b6 Name Summary utf8PreviousEndKey fun utf8PreviousEndKey(): String ? utf8RangeEnd fun utf8RangeEnd(): String ? utf8RangeStart fun utf8RangeStart(): String ?","title":"PartitionCursor - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/#partitioncursor","text":"data class PartitionCursor Immutable snapshot of a cursor.","title":"PartitionCursor"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/#constructors","text":"Name Summary <init> PartitionCursor(partitionName: String , keyRange: KeyRange, previousEndKey: ByteString?, done: Boolean ) Immutable snapshot of a cursor.","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/#properties","text":"Name Summary done val done: Boolean keyRange val keyRange: KeyRange partitionName val partitionName: String previousEndKey val previousEndKey: ByteString?","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/#functions","text":"Name Summary utf8PreviousEndKey fun utf8PreviousEndKey(): String ? utf8RangeEnd fun utf8RangeEnd(): String ? utf8RangeStart fun utf8RangeStart(): String ?","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/-init-/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / <init> <init> \u00b6 PartitionCursor(partitionName: String , keyRange: KeyRange, previousEndKey: ByteString?, done: Boolean ) Immutable snapshot of a cursor.","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/-init-/#init","text":"PartitionCursor(partitionName: String , keyRange: KeyRange, previousEndKey: ByteString?, done: Boolean ) Immutable snapshot of a cursor.","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/done/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / done done \u00b6 val done: Boolean","title":"done - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/done/#done","text":"val done: Boolean","title":"done"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/key-range/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / keyRange keyRange \u00b6 val keyRange: KeyRange","title":"keyRange - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/key-range/#keyrange","text":"val keyRange: KeyRange","title":"keyRange"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/partition-name/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / partitionName partitionName \u00b6 val partitionName: String","title":"partitionName - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/partition-name/#partitionname","text":"val partitionName: String","title":"partitionName"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/previous-end-key/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / previousEndKey previousEndKey \u00b6 val previousEndKey: ByteString?","title":"previousEndKey - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/previous-end-key/#previousendkey","text":"val previousEndKey: ByteString?","title":"previousEndKey"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/utf8-previous-end-key/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / utf8PreviousEndKey utf8PreviousEndKey \u00b6 fun utf8PreviousEndKey(): String ?","title":"utf8PreviousEndKey - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/utf8-previous-end-key/#utf8previousendkey","text":"fun utf8PreviousEndKey(): String ?","title":"utf8PreviousEndKey"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/utf8-range-end/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / utf8RangeEnd utf8RangeEnd \u00b6 fun utf8RangeEnd(): String ?","title":"utf8RangeEnd - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/utf8-range-end/#utf8rangeend","text":"fun utf8RangeEnd(): String ?","title":"utf8RangeEnd"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/utf8-range-start/","text":"client-misk / app.cash.backfila.client.misk.internal / PartitionCursor / utf8RangeStart utf8RangeStart \u00b6 fun utf8RangeStart(): String ?","title":"utf8RangeStart - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.internal/-partition-cursor/utf8-range-start/#utf8rangestart","text":"fun utf8RangeStart(): String ?","title":"utf8RangeStart"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/","text":"client-misk / app.cash.backfila.client.misk.spi Package app.cash.backfila.client.misk.spi \u00b6 Types \u00b6 Name Summary BackfilaParametersOperator class BackfilaParametersOperator<T : Any > BackfillBackend interface BackfillBackend Service provider interface for backends like Hibernate and DynamoDb. Backends construct operators that actually run the backfill. BackfillOperator interface BackfillOperator Backends provide these operators that are invoked to run the underlying backfill logic. BackfillRegistration data class BackfillRegistration Functions \u00b6 Name Summary parametersToBytes fun parametersToBytes(parameters: Any ): Map < String , ByteString>","title":"Package app.cash.backfila.client.misk.spi - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/#package-appcashbackfilaclientmiskspi","text":"","title":"Package app.cash.backfila.client.misk.spi"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/#types","text":"Name Summary BackfilaParametersOperator class BackfilaParametersOperator<T : Any > BackfillBackend interface BackfillBackend Service provider interface for backends like Hibernate and DynamoDb. Backends construct operators that actually run the backfill. BackfillOperator interface BackfillOperator Backends provide these operators that are invoked to run the underlying backfill logic. BackfillRegistration data class BackfillRegistration","title":"Types"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/#functions","text":"Name Summary parametersToBytes fun parametersToBytes(parameters: Any ): Map < String , ByteString>","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/parameters-to-bytes/","text":"client-misk / app.cash.backfila.client.misk.spi / parametersToBytes parametersToBytes \u00b6 fun parametersToBytes(parameters: Any ): Map < String , ByteString>","title":"parametersToBytes - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/parameters-to-bytes/#parameterstobytes","text":"fun parametersToBytes(parameters: Any ): Map < String , ByteString>","title":"parametersToBytes"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfilaParametersOperator BackfilaParametersOperator \u00b6 class BackfilaParametersOperator<T : Any > Constructors \u00b6 Name Summary <init> BackfilaParametersOperator(parametersClass: KClass < T >) Properties \u00b6 Name Summary parametersClass val parametersClass: KClass < T > Functions \u00b6 Name Summary constructBackfillConfig fun constructBackfillConfig(parameters: MutableMap < String , ByteString>, dryRun: Boolean ): BackfillConfig < T > Companion Object Properties \u00b6 Name Summary TYPE_CONVERTERS val TYPE_CONVERTERS: Map < KClass <out Any >, (ByteString) -> Any >","title":"BackfilaParametersOperator - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/#backfilaparametersoperator","text":"class BackfilaParametersOperator<T : Any >","title":"BackfilaParametersOperator"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/#constructors","text":"Name Summary <init> BackfilaParametersOperator(parametersClass: KClass < T >)","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/#properties","text":"Name Summary parametersClass val parametersClass: KClass < T >","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/#functions","text":"Name Summary constructBackfillConfig fun constructBackfillConfig(parameters: MutableMap < String , ByteString>, dryRun: Boolean ): BackfillConfig < T >","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/#companion-object-properties","text":"Name Summary TYPE_CONVERTERS val TYPE_CONVERTERS: Map < KClass <out Any >, (ByteString) -> Any >","title":"Companion Object Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/-init-/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfilaParametersOperator / <init> <init> \u00b6 BackfilaParametersOperator(parametersClass: KClass < T >)","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/-init-/#init","text":"BackfilaParametersOperator(parametersClass: KClass < T >)","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/-t-y-p-e_-c-o-n-v-e-r-t-e-r-s/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfilaParametersOperator / TYPE_CONVERTERS TYPE_CONVERTERS \u00b6 val TYPE_CONVERTERS: Map < KClass <out Any >, (ByteString) -> Any >","title":"TYPE_CONVERTERS - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/-t-y-p-e_-c-o-n-v-e-r-t-e-r-s/#type_converters","text":"val TYPE_CONVERTERS: Map < KClass <out Any >, (ByteString) -> Any >","title":"TYPE_CONVERTERS"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/construct-backfill-config/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfilaParametersOperator / constructBackfillConfig constructBackfillConfig \u00b6 fun constructBackfillConfig(parameters: MutableMap < String , ByteString>, dryRun: Boolean ): BackfillConfig < T >","title":"constructBackfillConfig - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/construct-backfill-config/#constructbackfillconfig","text":"fun constructBackfillConfig(parameters: MutableMap < String , ByteString>, dryRun: Boolean ): BackfillConfig < T >","title":"constructBackfillConfig"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/parameters-class/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfilaParametersOperator / parametersClass parametersClass \u00b6 val parametersClass: KClass < T >","title":"parametersClass - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfila-parameters-operator/parameters-class/#parametersclass","text":"val parametersClass: KClass < T >","title":"parametersClass"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillBackend BackfillBackend \u00b6 interface BackfillBackend Service provider interface for backends like Hibernate and DynamoDb. Backends construct operators that actually run the backfill. Functions \u00b6 Name Summary backfills abstract fun backfills(): Set < BackfillRegistration > create abstract fun create(backfillName: String , backfillId: String ): BackfillOperator ? Inheritors \u00b6 Name Summary EmptyBackend class EmptyBackend : BackfillBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one.","title":"BackfillBackend - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/#backfillbackend","text":"interface BackfillBackend Service provider interface for backends like Hibernate and DynamoDb. Backends construct operators that actually run the backfill.","title":"BackfillBackend"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/#functions","text":"Name Summary backfills abstract fun backfills(): Set < BackfillRegistration > create abstract fun create(backfillName: String , backfillId: String ): BackfillOperator ?","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/#inheritors","text":"Name Summary EmptyBackend class EmptyBackend : BackfillBackend Basic backend that registers no backfills. Allows for Backfila to be setup but with no registered backfills. This will encourage people to remove old backfills even if it is the last one.","title":"Inheritors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/backfills/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillBackend / backfills backfills \u00b6 abstract fun backfills(): Set < BackfillRegistration >","title":"backfills - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/backfills/#backfills","text":"abstract fun backfills(): Set < BackfillRegistration >","title":"backfills"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/create/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillBackend / create create \u00b6 abstract fun create(backfillName: String , backfillId: String ): BackfillOperator ?","title":"create - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-backend/create/#create","text":"abstract fun create(backfillName: String , backfillId: String ): BackfillOperator ?","title":"create"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillOperator BackfillOperator \u00b6 interface BackfillOperator Backends provide these operators that are invoked to run the underlying backfill logic. Properties \u00b6 Name Summary backfill abstract val backfill: Backfill Functions \u00b6 Name Summary getNextBatchRange abstract fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse name abstract fun name(): String prepareBackfill abstract fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse runBatch abstract fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"BackfillOperator - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/#backfilloperator","text":"interface BackfillOperator Backends provide these operators that are invoked to run the underlying backfill logic.","title":"BackfillOperator"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/#properties","text":"Name Summary backfill abstract val backfill: Backfill","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/#functions","text":"Name Summary getNextBatchRange abstract fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse name abstract fun name(): String prepareBackfill abstract fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse runBatch abstract fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"Functions"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/backfill/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillOperator / backfill backfill \u00b6 abstract val backfill: Backfill","title":"backfill - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/backfill/#backfill","text":"abstract val backfill: Backfill","title":"backfill"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/get-next-batch-range/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillOperator / getNextBatchRange getNextBatchRange \u00b6 abstract fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse","title":"getNextBatchRange - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/get-next-batch-range/#getnextbatchrange","text":"abstract fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse","title":"getNextBatchRange"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/name/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillOperator / name name \u00b6 abstract fun name(): String","title":"name - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/name/#name","text":"abstract fun name(): String","title":"name"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/prepare-backfill/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillOperator / prepareBackfill prepareBackfill \u00b6 abstract fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse","title":"prepareBackfill - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/prepare-backfill/#preparebackfill","text":"abstract fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse","title":"prepareBackfill"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/run-batch/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillOperator / runBatch runBatch \u00b6 abstract fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"runBatch - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-operator/run-batch/#runbatch","text":"abstract fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"runBatch"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillRegistration BackfillRegistration \u00b6 data class BackfillRegistration Constructors \u00b6 Name Summary <init> BackfillRegistration(name: String , description: String ?, parametersClass: KClass < Any >) Properties \u00b6 Name Summary description val description: String ? name val name: String parametersClass val parametersClass: KClass < Any >","title":"BackfillRegistration - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/#backfillregistration","text":"data class BackfillRegistration","title":"BackfillRegistration"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/#constructors","text":"Name Summary <init> BackfillRegistration(name: String , description: String ?, parametersClass: KClass < Any >)","title":"Constructors"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/#properties","text":"Name Summary description val description: String ? name val name: String parametersClass val parametersClass: KClass < Any >","title":"Properties"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/-init-/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillRegistration / <init> <init> \u00b6 BackfillRegistration(name: String , description: String ?, parametersClass: KClass < Any >)","title":" init "},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/-init-/#init","text":"BackfillRegistration(name: String , description: String ?, parametersClass: KClass < Any >)","title":"&lt;init&gt;"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/description/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillRegistration / description description \u00b6 val description: String ?","title":"description - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/description/#description","text":"val description: String ?","title":"description"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/name/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillRegistration / name name \u00b6 val name: String","title":"name - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/name/#name","text":"val name: String","title":"name"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/parameters-class/","text":"client-misk / app.cash.backfila.client.misk.spi / BackfillRegistration / parametersClass parametersClass \u00b6 val parametersClass: KClass < Any >","title":"parametersClass - Backfila"},{"location":"0.x/client-misk/app.cash.backfila.client.misk.spi/-backfill-registration/parameters-class/#parametersclass","text":"val parametersClass: KClass < Any >","title":"parametersClass"},{"location":"0.x/client-misk-dynamodb/","text":"client-misk-dynamodb Packages \u00b6 Name Summary app.cash.backfila.client.misk.dynamodb app.cash.backfila.client.misk.dynamodb.internal Index \u00b6 All Types","title":"Packages - Backfila"},{"location":"0.x/client-misk-dynamodb/#packages","text":"Name Summary app.cash.backfila.client.misk.dynamodb app.cash.backfila.client.misk.dynamodb.internal","title":"Packages"},{"location":"0.x/client-misk-dynamodb/#index","text":"All Types","title":"Index"},{"location":"0.x/client-misk-dynamodb/alltypes/","text":"All Types \u00b6 Name Summary app.cash.backfila.client.misk.dynamodb.internal.AwsAttributeValueAdapter app.cash.backfila.client.misk.dynamodb.internal.DynamoDbBackend app.cash.backfila.client.misk.dynamodb.DynamoDbBackfill app.cash.backfila.client.misk.dynamodb.DynamoDbBackfillModule app.cash.backfila.client.misk.dynamodb.internal.DynamoDbBackfillOperator app.cash.backfila.client.misk.dynamodb.internal.DynamoDbKeyRangeCodec It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c app.cash.backfila.client.misk.dynamodb.UpdateInPlaceDynamoDbBackfill A base class that may make it easier to mutate the items in the DynamoDB store.","title":"All Types - Backfila"},{"location":"0.x/client-misk-dynamodb/alltypes/#all-types","text":"Name Summary app.cash.backfila.client.misk.dynamodb.internal.AwsAttributeValueAdapter app.cash.backfila.client.misk.dynamodb.internal.DynamoDbBackend app.cash.backfila.client.misk.dynamodb.DynamoDbBackfill app.cash.backfila.client.misk.dynamodb.DynamoDbBackfillModule app.cash.backfila.client.misk.dynamodb.internal.DynamoDbBackfillOperator app.cash.backfila.client.misk.dynamodb.internal.DynamoDbKeyRangeCodec It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c app.cash.backfila.client.misk.dynamodb.UpdateInPlaceDynamoDbBackfill A base class that may make it easier to mutate the items in the DynamoDB store.","title":"All Types"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb Package app.cash.backfila.client.misk.dynamodb \u00b6 Types \u00b6 Name Summary DynamoDbBackfill abstract class DynamoDbBackfill<I : Any , P : Any > : Backfill DynamoDbBackfillModule class DynamoDbBackfillModule<T : DynamoDbBackfill <*, *>> : KAbstractModule UpdateInPlaceDynamoDbBackfill abstract class UpdateInPlaceDynamoDbBackfill<I : Any , P : Any > : DynamoDbBackfill < I , P > A base class that may make it easier to mutate the items in the DynamoDB store.","title":"Package app.cash.backfila.client.misk.dynamodb - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/#package-appcashbackfilaclientmiskdynamodb","text":"","title":"Package app.cash.backfila.client.misk.dynamodb"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/#types","text":"Name Summary DynamoDbBackfill abstract class DynamoDbBackfill<I : Any , P : Any > : Backfill DynamoDbBackfillModule class DynamoDbBackfillModule<T : DynamoDbBackfill <*, *>> : KAbstractModule UpdateInPlaceDynamoDbBackfill abstract class UpdateInPlaceDynamoDbBackfill<I : Any , P : Any > : DynamoDbBackfill < I , P > A base class that may make it easier to mutate the items in the DynamoDB store.","title":"Types"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill DynamoDbBackfill \u00b6 abstract class DynamoDbBackfill<I : Any , P : Any > : Backfill Constructors \u00b6 Name Summary <init> DynamoDbBackfill() Properties \u00b6 Name Summary itemType val itemType: KClass < I > Functions \u00b6 Name Summary expressionAttributeValues open fun expressionAttributeValues(config: BackfillConfig< P >): Map < String , AttributeValue>? See ScanRequest.setExpressionAttributeValues . filterExpression open fun filterExpression(config: BackfillConfig< P >): String ? See ScanRequest.setFilterExpression . fixedSegmentCount open fun fixedSegmentCount(config: BackfillConfig< P >): Int ? Override this to force Backfila to run this number of batches in total, divided among the partitions. mustHaveProvisionedBillingMode open fun mustHaveProvisionedBillingMode(): Boolean It is rather easy to run a backfill against a dynamo instance that is configured expensively. Update dynamo so the billing mode is PROVISIONED rather than PAY_PER_REQUEST as the latter can be very expensive. partitionCount open fun partitionCount(config: BackfillConfig< P >): Int The number of independent workers to perform the backfill. When the Backfill is executing, each worker runs 1 or more batches concurrently. Set a low number here to reduce the total tracking overhead in Backfila; set a higher number for more concurrency. The default of 8 means that the Backfill will run at least 8 batches concurrently. runBatch abstract fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch. validate open fun validate(config: BackfillConfig< P >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run. Inheritors \u00b6 Name Summary UpdateInPlaceDynamoDbBackfill abstract class UpdateInPlaceDynamoDbBackfill<I : Any , P : Any > : DynamoDbBackfill < I , P > A base class that may make it easier to mutate the items in the DynamoDB store.","title":"DynamoDbBackfill - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/#dynamodbbackfill","text":"abstract class DynamoDbBackfill<I : Any , P : Any > : Backfill","title":"DynamoDbBackfill"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/#constructors","text":"Name Summary <init> DynamoDbBackfill()","title":"Constructors"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/#properties","text":"Name Summary itemType val itemType: KClass < I >","title":"Properties"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/#functions","text":"Name Summary expressionAttributeValues open fun expressionAttributeValues(config: BackfillConfig< P >): Map < String , AttributeValue>? See ScanRequest.setExpressionAttributeValues . filterExpression open fun filterExpression(config: BackfillConfig< P >): String ? See ScanRequest.setFilterExpression . fixedSegmentCount open fun fixedSegmentCount(config: BackfillConfig< P >): Int ? Override this to force Backfila to run this number of batches in total, divided among the partitions. mustHaveProvisionedBillingMode open fun mustHaveProvisionedBillingMode(): Boolean It is rather easy to run a backfill against a dynamo instance that is configured expensively. Update dynamo so the billing mode is PROVISIONED rather than PAY_PER_REQUEST as the latter can be very expensive. partitionCount open fun partitionCount(config: BackfillConfig< P >): Int The number of independent workers to perform the backfill. When the Backfill is executing, each worker runs 1 or more batches concurrently. Set a low number here to reduce the total tracking overhead in Backfila; set a higher number for more concurrency. The default of 8 means that the Backfill will run at least 8 batches concurrently. runBatch abstract fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch. validate open fun validate(config: BackfillConfig< P >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"Functions"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/#inheritors","text":"Name Summary UpdateInPlaceDynamoDbBackfill abstract class UpdateInPlaceDynamoDbBackfill<I : Any , P : Any > : DynamoDbBackfill < I , P > A base class that may make it easier to mutate the items in the DynamoDB store.","title":"Inheritors"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/-init-/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / <init> <init> \u00b6 DynamoDbBackfill()","title":" init "},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/-init-/#init","text":"DynamoDbBackfill()","title":"&lt;init&gt;"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/expression-attribute-values/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / expressionAttributeValues expressionAttributeValues \u00b6 open fun expressionAttributeValues(config: BackfillConfig< P >): Map < String , AttributeValue>? See ScanRequest.setExpressionAttributeValues .","title":"expressionAttributeValues - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/expression-attribute-values/#expressionattributevalues","text":"open fun expressionAttributeValues(config: BackfillConfig< P >): Map < String , AttributeValue>? See ScanRequest.setExpressionAttributeValues .","title":"expressionAttributeValues"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/filter-expression/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / filterExpression filterExpression \u00b6 open fun filterExpression(config: BackfillConfig< P >): String ? See ScanRequest.setFilterExpression .","title":"filterExpression - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/filter-expression/#filterexpression","text":"open fun filterExpression(config: BackfillConfig< P >): String ? See ScanRequest.setFilterExpression .","title":"filterExpression"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/fixed-segment-count/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / fixedSegmentCount fixedSegmentCount \u00b6 open fun fixedSegmentCount(config: BackfillConfig< P >): Int ? Override this to force Backfila to run this number of batches in total, divided among the partitions. If null, Backfila will use a dynamic segment count. This automatically guesses the segment count to fit the requested batch size. Override this if the guess is bad, such as when your data is not uniformly distributed.","title":"fixedSegmentCount - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/fixed-segment-count/#fixedsegmentcount","text":"open fun fixedSegmentCount(config: BackfillConfig< P >): Int ? Override this to force Backfila to run this number of batches in total, divided among the partitions. If null, Backfila will use a dynamic segment count. This automatically guesses the segment count to fit the requested batch size. Override this if the guess is bad, such as when your data is not uniformly distributed.","title":"fixedSegmentCount"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/item-type/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / itemType itemType \u00b6 val itemType: KClass < I >","title":"itemType - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/item-type/#itemtype","text":"val itemType: KClass < I >","title":"itemType"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/must-have-provisioned-billing-mode/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / mustHaveProvisionedBillingMode mustHaveProvisionedBillingMode \u00b6 open fun mustHaveProvisionedBillingMode(): Boolean It is rather easy to run a backfill against a dynamo instance that is configured expensively. Update dynamo so the billing mode is PROVISIONED rather than PAY_PER_REQUEST as the latter can be very expensive.","title":"mustHaveProvisionedBillingMode - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/must-have-provisioned-billing-mode/#musthaveprovisionedbillingmode","text":"open fun mustHaveProvisionedBillingMode(): Boolean It is rather easy to run a backfill against a dynamo instance that is configured expensively. Update dynamo so the billing mode is PROVISIONED rather than PAY_PER_REQUEST as the latter can be very expensive.","title":"mustHaveProvisionedBillingMode"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/partition-count/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / partitionCount partitionCount \u00b6 open fun partitionCount(config: BackfillConfig< P >): Int The number of independent workers to perform the backfill. When the Backfill is executing, each worker runs 1 or more batches concurrently. Set a low number here to reduce the total tracking overhead in Backfila; set a higher number for more concurrency. The default of 8 means that the Backfill will run at least 8 batches concurrently.","title":"partitionCount - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/partition-count/#partitioncount","text":"open fun partitionCount(config: BackfillConfig< P >): Int The number of independent workers to perform the backfill. When the Backfill is executing, each worker runs 1 or more batches concurrently. Set a low number here to reduce the total tracking overhead in Backfila; set a higher number for more concurrency. The default of 8 means that the Backfill will run at least 8 batches concurrently.","title":"partitionCount"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/run-batch/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / runBatch runBatch \u00b6 abstract fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch.","title":"runBatch - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/run-batch/#runbatch","text":"abstract fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch.","title":"runBatch"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/validate/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfill / validate validate \u00b6 open fun validate(config: BackfillConfig< P >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"validate - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill/validate/#validate","text":"open fun validate(config: BackfillConfig< P >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"validate"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfillModule DynamoDbBackfillModule \u00b6 class DynamoDbBackfillModule<T : DynamoDbBackfill <*, *>> : KAbstractModule Functions \u00b6 Name Summary configure fun configure(): Unit Companion Object Functions \u00b6 Name Summary create fun <T : DynamoDbBackfill <*, *>> create(): DynamoDbBackfillModule < T > fun <T : DynamoDbBackfill <*, *>> create(backfillClass: KClass < T >): DynamoDbBackfillModule < T >","title":"DynamoDbBackfillModule - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/#dynamodbbackfillmodule","text":"class DynamoDbBackfillModule<T : DynamoDbBackfill <*, *>> : KAbstractModule","title":"DynamoDbBackfillModule"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/#functions","text":"Name Summary configure fun configure(): Unit","title":"Functions"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/#companion-object-functions","text":"Name Summary create fun <T : DynamoDbBackfill <*, *>> create(): DynamoDbBackfillModule < T > fun <T : DynamoDbBackfill <*, *>> create(backfillClass: KClass < T >): DynamoDbBackfillModule < T >","title":"Companion Object Functions"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/configure/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfillModule / configure configure \u00b6 protected fun configure(): Unit","title":"configure - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/configure/#configure","text":"protected fun configure(): Unit","title":"configure"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/create/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / DynamoDbBackfillModule / create create \u00b6 inline fun <reified T : DynamoDbBackfill <*, *>> create(): DynamoDbBackfillModule < T > @JvmStatic fun <T : DynamoDbBackfill <*, *>> create(backfillClass: KClass < T >): DynamoDbBackfillModule < T >","title":"create - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-dynamo-db-backfill-module/create/#create","text":"inline fun <reified T : DynamoDbBackfill <*, *>> create(): DynamoDbBackfillModule < T > @JvmStatic fun <T : DynamoDbBackfill <*, *>> create(backfillClass: KClass < T >): DynamoDbBackfillModule < T >","title":"create"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / UpdateInPlaceDynamoDbBackfill UpdateInPlaceDynamoDbBackfill \u00b6 abstract class UpdateInPlaceDynamoDbBackfill<I : Any , P : Any > : DynamoDbBackfill < I , P > A base class that may make it easier to mutate the items in the DynamoDB store. If saving fails the batch will fail. If succeeded rows are part of a failed batch they will be retried so implementations must be idempotent. Constructors \u00b6 Name Summary <init> UpdateInPlaceDynamoDbBackfill(dynamoDb: DynamoDBMapper) A base class that may make it easier to mutate the items in the DynamoDB store. Properties \u00b6 Name Summary dynamoDb val dynamoDb: DynamoDBMapper Inherited Properties \u00b6 Name Summary itemType val itemType: KClass < I > Functions \u00b6 Name Summary runBatch open fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch. runOne abstract fun runOne(item: I , config: BackfillConfig< P >): Boolean Called for each matching record. Returns true to save the item after returning; false to not save the item. Inherited Functions \u00b6 Name Summary expressionAttributeValues open fun expressionAttributeValues(config: BackfillConfig< P >): Map < String , AttributeValue>? See ScanRequest.setExpressionAttributeValues . filterExpression open fun filterExpression(config: BackfillConfig< P >): String ? See ScanRequest.setFilterExpression . fixedSegmentCount open fun fixedSegmentCount(config: BackfillConfig< P >): Int ? Override this to force Backfila to run this number of batches in total, divided among the partitions. mustHaveProvisionedBillingMode open fun mustHaveProvisionedBillingMode(): Boolean It is rather easy to run a backfill against a dynamo instance that is configured expensively. Update dynamo so the billing mode is PROVISIONED rather than PAY_PER_REQUEST as the latter can be very expensive. partitionCount open fun partitionCount(config: BackfillConfig< P >): Int The number of independent workers to perform the backfill. When the Backfill is executing, each worker runs 1 or more batches concurrently. Set a low number here to reduce the total tracking overhead in Backfila; set a higher number for more concurrency. The default of 8 means that the Backfill will run at least 8 batches concurrently. validate open fun validate(config: BackfillConfig< P >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"UpdateInPlaceDynamoDbBackfill - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/#updateinplacedynamodbbackfill","text":"abstract class UpdateInPlaceDynamoDbBackfill<I : Any , P : Any > : DynamoDbBackfill < I , P > A base class that may make it easier to mutate the items in the DynamoDB store. If saving fails the batch will fail. If succeeded rows are part of a failed batch they will be retried so implementations must be idempotent.","title":"UpdateInPlaceDynamoDbBackfill"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/#constructors","text":"Name Summary <init> UpdateInPlaceDynamoDbBackfill(dynamoDb: DynamoDBMapper) A base class that may make it easier to mutate the items in the DynamoDB store.","title":"Constructors"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/#properties","text":"Name Summary dynamoDb val dynamoDb: DynamoDBMapper","title":"Properties"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/#inherited-properties","text":"Name Summary itemType val itemType: KClass < I >","title":"Inherited Properties"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/#functions","text":"Name Summary runBatch open fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch. runOne abstract fun runOne(item: I , config: BackfillConfig< P >): Boolean Called for each matching record. Returns true to save the item after returning; false to not save the item.","title":"Functions"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/#inherited-functions","text":"Name Summary expressionAttributeValues open fun expressionAttributeValues(config: BackfillConfig< P >): Map < String , AttributeValue>? See ScanRequest.setExpressionAttributeValues . filterExpression open fun filterExpression(config: BackfillConfig< P >): String ? See ScanRequest.setFilterExpression . fixedSegmentCount open fun fixedSegmentCount(config: BackfillConfig< P >): Int ? Override this to force Backfila to run this number of batches in total, divided among the partitions. mustHaveProvisionedBillingMode open fun mustHaveProvisionedBillingMode(): Boolean It is rather easy to run a backfill against a dynamo instance that is configured expensively. Update dynamo so the billing mode is PROVISIONED rather than PAY_PER_REQUEST as the latter can be very expensive. partitionCount open fun partitionCount(config: BackfillConfig< P >): Int The number of independent workers to perform the backfill. When the Backfill is executing, each worker runs 1 or more batches concurrently. Set a low number here to reduce the total tracking overhead in Backfila; set a higher number for more concurrency. The default of 8 means that the Backfill will run at least 8 batches concurrently. validate open fun validate(config: BackfillConfig< P >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"Inherited Functions"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/-init-/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / UpdateInPlaceDynamoDbBackfill / <init> <init> \u00b6 UpdateInPlaceDynamoDbBackfill(dynamoDb: DynamoDBMapper) A base class that may make it easier to mutate the items in the DynamoDB store. If saving fails the batch will fail. If succeeded rows are part of a failed batch they will be retried so implementations must be idempotent.","title":" init "},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/-init-/#init","text":"UpdateInPlaceDynamoDbBackfill(dynamoDb: DynamoDBMapper) A base class that may make it easier to mutate the items in the DynamoDB store. If saving fails the batch will fail. If succeeded rows are part of a failed batch they will be retried so implementations must be idempotent.","title":"&lt;init&gt;"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/dynamo-db/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / UpdateInPlaceDynamoDbBackfill / dynamoDb dynamoDb \u00b6 val dynamoDb: DynamoDBMapper","title":"dynamoDb - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/dynamo-db/#dynamodb","text":"val dynamoDb: DynamoDBMapper","title":"dynamoDb"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/run-batch/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / UpdateInPlaceDynamoDbBackfill / runBatch runBatch \u00b6 open fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Overrides DynamoDbBackfill.runBatch Called for each batch of matching records. Override in a backfill to process all records in a batch.","title":"runBatch - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/run-batch/#runbatch","text":"open fun runBatch(items: List < I >, config: BackfillConfig< P >): Unit Overrides DynamoDbBackfill.runBatch Called for each batch of matching records. Override in a backfill to process all records in a batch.","title":"runBatch"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/run-one/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb / UpdateInPlaceDynamoDbBackfill / runOne runOne \u00b6 abstract fun runOne(item: I , config: BackfillConfig< P >): Boolean Called for each matching record. Returns true to save the item after returning; false to not save the item.","title":"runOne - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb/-update-in-place-dynamo-db-backfill/run-one/#runone","text":"abstract fun runOne(item: I , config: BackfillConfig< P >): Boolean Called for each matching record. Returns true to save the item after returning; false to not save the item.","title":"runOne"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal Package app.cash.backfila.client.misk.dynamodb.internal \u00b6 Types \u00b6 Name Summary AwsAttributeValueAdapter object AwsAttributeValueAdapter DynamoDbBackend class DynamoDbBackend : BackfillBackend DynamoDbBackfillOperator class DynamoDbBackfillOperator<I : Any , P : Any > : BackfillOperator DynamoDbKeyRangeCodec class DynamoDbKeyRangeCodec It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c","title":"Package app.cash.backfila.client.misk.dynamodb.internal - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/#package-appcashbackfilaclientmiskdynamodbinternal","text":"","title":"Package app.cash.backfila.client.misk.dynamodb.internal"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/#types","text":"Name Summary AwsAttributeValueAdapter object AwsAttributeValueAdapter DynamoDbBackend class DynamoDbBackend : BackfillBackend DynamoDbBackfillOperator class DynamoDbBackfillOperator<I : Any , P : Any > : BackfillOperator DynamoDbKeyRangeCodec class DynamoDbKeyRangeCodec It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c","title":"Types"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-aws-attribute-value-adapter/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / AwsAttributeValueAdapter AwsAttributeValueAdapter \u00b6 object AwsAttributeValueAdapter","title":"AwsAttributeValueAdapter - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-aws-attribute-value-adapter/#awsattributevalueadapter","text":"object AwsAttributeValueAdapter","title":"AwsAttributeValueAdapter"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackend DynamoDbBackend \u00b6 @Singleton class DynamoDbBackend : BackfillBackend Constructors \u00b6 Name Summary <init> DynamoDbBackend(injector: Injector, backfills: MutableMap < String , KClass <out DynamoDbBackfill <*, *>>>, dynamoDb: DynamoDBMapper, keyRangeCodec: DynamoDbKeyRangeCodec ) Properties \u00b6 Name Summary dynamoDb val dynamoDb: DynamoDBMapper keyRangeCodec val keyRangeCodec: DynamoDbKeyRangeCodec Functions \u00b6 Name Summary backfills fun backfills(): Set <BackfillRegistration> create fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"DynamoDbBackend - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/#dynamodbbackend","text":"@Singleton class DynamoDbBackend : BackfillBackend","title":"DynamoDbBackend"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/#constructors","text":"Name Summary <init> DynamoDbBackend(injector: Injector, backfills: MutableMap < String , KClass <out DynamoDbBackfill <*, *>>>, dynamoDb: DynamoDBMapper, keyRangeCodec: DynamoDbKeyRangeCodec )","title":"Constructors"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/#properties","text":"Name Summary dynamoDb val dynamoDb: DynamoDBMapper keyRangeCodec val keyRangeCodec: DynamoDbKeyRangeCodec","title":"Properties"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/#functions","text":"Name Summary backfills fun backfills(): Set <BackfillRegistration> create fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"Functions"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/-init-/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackend / <init> <init> \u00b6 DynamoDbBackend(injector: Injector, backfills: MutableMap < String , KClass <out DynamoDbBackfill <*, *>>>, dynamoDb: DynamoDBMapper, keyRangeCodec: DynamoDbKeyRangeCodec )","title":" init "},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/-init-/#init","text":"DynamoDbBackend(injector: Injector, backfills: MutableMap < String , KClass <out DynamoDbBackfill <*, *>>>, dynamoDb: DynamoDBMapper, keyRangeCodec: DynamoDbKeyRangeCodec )","title":"&lt;init&gt;"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/backfills/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackend / backfills backfills \u00b6 fun backfills(): Set <BackfillRegistration>","title":"backfills - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/backfills/#backfills","text":"fun backfills(): Set <BackfillRegistration>","title":"backfills"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/create/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackend / create create \u00b6 fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"create - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/create/#create","text":"fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"create"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/dynamo-db/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackend / dynamoDb dynamoDb \u00b6 val dynamoDb: DynamoDBMapper","title":"dynamoDb - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/dynamo-db/#dynamodb","text":"val dynamoDb: DynamoDBMapper","title":"dynamoDb"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/key-range-codec/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackend / keyRangeCodec keyRangeCodec \u00b6 val keyRangeCodec: DynamoDbKeyRangeCodec","title":"keyRangeCodec - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backend/key-range-codec/#keyrangecodec","text":"val keyRangeCodec: DynamoDbKeyRangeCodec","title":"keyRangeCodec"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator DynamoDbBackfillOperator \u00b6 class DynamoDbBackfillOperator<I : Any , P : Any > : BackfillOperator Constructors \u00b6 Name Summary <init> DynamoDbBackfillOperator(dynamoDb: DynamoDBMapper, backfill: DynamoDbBackfill < I , P >, parametersOperator: BackfilaParametersOperator< P >, keyRangeCodec: DynamoDbKeyRangeCodec ) Properties \u00b6 Name Summary backfill val backfill: DynamoDbBackfill < I , P > dynamoDb val dynamoDb: DynamoDBMapper keyRangeCodec val keyRangeCodec: DynamoDbKeyRangeCodec parametersOperator val parametersOperator: BackfilaParametersOperator< P > Functions \u00b6 Name Summary getNextBatchRange fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse name fun name(): String prepareBackfill fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse runBatch fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"DynamoDbBackfillOperator - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/#dynamodbbackfilloperator","text":"class DynamoDbBackfillOperator<I : Any , P : Any > : BackfillOperator","title":"DynamoDbBackfillOperator"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/#constructors","text":"Name Summary <init> DynamoDbBackfillOperator(dynamoDb: DynamoDBMapper, backfill: DynamoDbBackfill < I , P >, parametersOperator: BackfilaParametersOperator< P >, keyRangeCodec: DynamoDbKeyRangeCodec )","title":"Constructors"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/#properties","text":"Name Summary backfill val backfill: DynamoDbBackfill < I , P > dynamoDb val dynamoDb: DynamoDBMapper keyRangeCodec val keyRangeCodec: DynamoDbKeyRangeCodec parametersOperator val parametersOperator: BackfilaParametersOperator< P >","title":"Properties"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/#functions","text":"Name Summary getNextBatchRange fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse name fun name(): String prepareBackfill fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse runBatch fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"Functions"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/-init-/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / <init> <init> \u00b6 DynamoDbBackfillOperator(dynamoDb: DynamoDBMapper, backfill: DynamoDbBackfill < I , P >, parametersOperator: BackfilaParametersOperator< P >, keyRangeCodec: DynamoDbKeyRangeCodec )","title":" init "},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/-init-/#init","text":"DynamoDbBackfillOperator(dynamoDb: DynamoDBMapper, backfill: DynamoDbBackfill < I , P >, parametersOperator: BackfilaParametersOperator< P >, keyRangeCodec: DynamoDbKeyRangeCodec )","title":"&lt;init&gt;"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/backfill/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / backfill backfill \u00b6 val backfill: DynamoDbBackfill < I , P >","title":"backfill - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/backfill/#backfill","text":"val backfill: DynamoDbBackfill < I , P >","title":"backfill"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/dynamo-db/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / dynamoDb dynamoDb \u00b6 val dynamoDb: DynamoDBMapper","title":"dynamoDb - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/dynamo-db/#dynamodb","text":"val dynamoDb: DynamoDBMapper","title":"dynamoDb"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/get-next-batch-range/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / getNextBatchRange getNextBatchRange \u00b6 fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse","title":"getNextBatchRange - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/get-next-batch-range/#getnextbatchrange","text":"fun getNextBatchRange(request: GetNextBatchRangeRequest): GetNextBatchRangeResponse","title":"getNextBatchRange"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/key-range-codec/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / keyRangeCodec keyRangeCodec \u00b6 val keyRangeCodec: DynamoDbKeyRangeCodec","title":"keyRangeCodec - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/key-range-codec/#keyrangecodec","text":"val keyRangeCodec: DynamoDbKeyRangeCodec","title":"keyRangeCodec"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/name/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / name name \u00b6 fun name(): String","title":"name - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/name/#name","text":"fun name(): String","title":"name"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/parameters-operator/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / parametersOperator parametersOperator \u00b6 val parametersOperator: BackfilaParametersOperator< P >","title":"parametersOperator - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/parameters-operator/#parametersoperator","text":"val parametersOperator: BackfilaParametersOperator< P >","title":"parametersOperator"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/prepare-backfill/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / prepareBackfill prepareBackfill \u00b6 fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse","title":"prepareBackfill - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/prepare-backfill/#preparebackfill","text":"fun prepareBackfill(request: PrepareBackfillRequest): PrepareBackfillResponse","title":"prepareBackfill"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/run-batch/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbBackfillOperator / runBatch runBatch \u00b6 fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"runBatch - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-backfill-operator/run-batch/#runbatch","text":"fun runBatch(request: RunBatchRequest): RunBatchResponse","title":"runBatch"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbKeyRangeCodec DynamoDbKeyRangeCodec \u00b6 @Singleton class DynamoDbKeyRangeCodec It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c Constructors \u00b6 Name Summary <init> DynamoDbKeyRangeCodec(moshi: Moshi) It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c Companion Object Properties \u00b6 Name Summary INT_FORMAT const val INT_FORMAT: String VERSION const val VERSION: String","title":"DynamoDbKeyRangeCodec - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/#dynamodbkeyrangecodec","text":"@Singleton class DynamoDbKeyRangeCodec It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c","title":"DynamoDbKeyRangeCodec"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/#constructors","text":"Name Summary <init> DynamoDbKeyRangeCodec(moshi: Moshi) It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c","title":"Constructors"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/#companion-object-properties","text":"Name Summary INT_FORMAT const val INT_FORMAT: String VERSION const val VERSION: String","title":"Companion Object Properties"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/-i-n-t_-f-o-r-m-a-t/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbKeyRangeCodec / INT_FORMAT INT_FORMAT \u00b6 const val INT_FORMAT: String","title":"INT_FORMAT - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/-i-n-t_-f-o-r-m-a-t/#int_format","text":"const val INT_FORMAT: String","title":"INT_FORMAT"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/-init-/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbKeyRangeCodec / <init> <init> \u00b6 DynamoDbKeyRangeCodec(moshi: Moshi) It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c","title":" init "},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/-init-/#init","text":"DynamoDbKeyRangeCodec(moshi: Moshi) It encodes the key range in utf8 for better cursor visibility in backfila. It\u2019s form: start = \u201cv2:<segment_offset>/<segment_count>:<last_evaluated_key_json>\u201d end = \u201cv2:<segment_offset>/<segment_count>\u201c","title":"&lt;init&gt;"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/-v-e-r-s-i-o-n/","text":"client-misk-dynamodb / app.cash.backfila.client.misk.dynamodb.internal / DynamoDbKeyRangeCodec / VERSION VERSION \u00b6 const val VERSION: String","title":"VERSION - Backfila"},{"location":"0.x/client-misk-dynamodb/app.cash.backfila.client.misk.dynamodb.internal/-dynamo-db-key-range-codec/-v-e-r-s-i-o-n/#version","text":"const val VERSION: String","title":"VERSION"},{"location":"0.x/client-misk-hibernate/","text":"client-misk-hibernate Packages \u00b6 Name Summary app.cash.backfila.client.misk.hibernate app.cash.backfila.client.misk.hibernate.internal Index \u00b6 All Types","title":"Packages - Backfila"},{"location":"0.x/client-misk-hibernate/#packages","text":"Name Summary app.cash.backfila.client.misk.hibernate app.cash.backfila.client.misk.hibernate.internal","title":"Packages"},{"location":"0.x/client-misk-hibernate/#index","text":"All Types","title":"Index"},{"location":"0.x/client-misk-hibernate/alltypes/","text":"All Types \u00b6 Name Summary app.cash.backfila.client.misk.hibernate.internal.BoundingRangeStrategy app.cash.backfila.client.misk.hibernate.internal.HibernateBackend app.cash.backfila.client.misk.hibernate.HibernateBackfill Implement this for each of your backfills. Install using HibernateBackfillModule.create . app.cash.backfila.client.misk.hibernate.HibernateBackfillModule Installs the BackfillBackend for Hibernate backfills. See the java doc for BackfillModule . app.cash.backfila.client.misk.hibernate.PartitionProvider Provides connectivity to a singleton database or a set of database shards. app.cash.backfila.client.misk.hibernate.PkeySqlAdapter app.cash.backfila.client.misk.hibernate.internal.SingleCursorVitess app.cash.backfila.client.misk.hibernate.internal.UnshardedHibernateBoundingRangeStrategy app.cash.backfila.client.misk.hibernate.UnshardedPartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider app.cash.backfila.client.misk.hibernate.internal.VitessShardedBoundingRangeStrategy app.cash.backfila.client.misk.hibernate.VitessShardedPartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. app.cash.backfila.client.misk.hibernate.internal.VitessSingleCursorBoundingRangeStrategy app.cash.backfila.client.misk.hibernate.VitessSingleCursorPartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence.","title":"All Types - Backfila"},{"location":"0.x/client-misk-hibernate/alltypes/#all-types","text":"Name Summary app.cash.backfila.client.misk.hibernate.internal.BoundingRangeStrategy app.cash.backfila.client.misk.hibernate.internal.HibernateBackend app.cash.backfila.client.misk.hibernate.HibernateBackfill Implement this for each of your backfills. Install using HibernateBackfillModule.create . app.cash.backfila.client.misk.hibernate.HibernateBackfillModule Installs the BackfillBackend for Hibernate backfills. See the java doc for BackfillModule . app.cash.backfila.client.misk.hibernate.PartitionProvider Provides connectivity to a singleton database or a set of database shards. app.cash.backfila.client.misk.hibernate.PkeySqlAdapter app.cash.backfila.client.misk.hibernate.internal.SingleCursorVitess app.cash.backfila.client.misk.hibernate.internal.UnshardedHibernateBoundingRangeStrategy app.cash.backfila.client.misk.hibernate.UnshardedPartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider app.cash.backfila.client.misk.hibernate.internal.VitessShardedBoundingRangeStrategy app.cash.backfila.client.misk.hibernate.VitessShardedPartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. app.cash.backfila.client.misk.hibernate.internal.VitessSingleCursorBoundingRangeStrategy app.cash.backfila.client.misk.hibernate.VitessSingleCursorPartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence.","title":"All Types"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate Package app.cash.backfila.client.misk.hibernate \u00b6 Types \u00b6 Name Summary HibernateBackfill abstract class HibernateBackfill<E : DbEntity< E >, Pkey : Any , Param : Any > : Backfill Implement this for each of your backfills. Install using HibernateBackfillModule.create . HibernateBackfillModule class HibernateBackfillModule<T : HibernateBackfill <*, *, *>> : KAbstractModule Installs the BackfillBackend for Hibernate backfills. See the java doc for BackfillModule . PartitionProvider interface PartitionProvider Provides connectivity to a singleton database or a set of database shards. PkeySqlAdapter class PkeySqlAdapter UnshardedPartitionProvider class UnshardedPartitionProvider : PartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider VitessShardedPartitionProvider class VitessShardedPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. VitessSingleCursorPartitionProvider class VitessSingleCursorPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence.","title":"Package app.cash.backfila.client.misk.hibernate - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/#package-appcashbackfilaclientmiskhibernate","text":"","title":"Package app.cash.backfila.client.misk.hibernate"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/#types","text":"Name Summary HibernateBackfill abstract class HibernateBackfill<E : DbEntity< E >, Pkey : Any , Param : Any > : Backfill Implement this for each of your backfills. Install using HibernateBackfillModule.create . HibernateBackfillModule class HibernateBackfillModule<T : HibernateBackfill <*, *, *>> : KAbstractModule Installs the BackfillBackend for Hibernate backfills. See the java doc for BackfillModule . PartitionProvider interface PartitionProvider Provides connectivity to a singleton database or a set of database shards. PkeySqlAdapter class PkeySqlAdapter UnshardedPartitionProvider class UnshardedPartitionProvider : PartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider VitessShardedPartitionProvider class VitessShardedPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. VitessSingleCursorPartitionProvider class VitessSingleCursorPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence.","title":"Types"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill HibernateBackfill \u00b6 abstract class HibernateBackfill<E : DbEntity< E >, Pkey : Any , Param : Any > : Backfill Implement this for each of your backfills. Install using HibernateBackfillModule.create . Constructors \u00b6 Name Summary <init> HibernateBackfill() Implement this for each of your backfills. Install using HibernateBackfillModule.create . Properties \u00b6 Name Summary entityClass val entityClass: KClass < E > pkeyClass val pkeyClass: KClass < Pkey > Functions \u00b6 Name Summary backfillCriteria abstract fun backfillCriteria(config: BackfillConfig< Param >): Query< E > Criteria that filters which records are selected to backfill from the table. partitionProvider abstract fun partitionProvider(): PartitionProvider Returns an partition provider that is used for database connectivity. primaryKeyHibernateName open fun primaryKeyHibernateName(): String The name of the hibernate property that the backfill is keyed off of. Separate from primaryKeyName() as the casing is usually different. primaryKeyName open fun primaryKeyName(): String The name of the column that the backfill is keyed off of. Usually the primary key of the table. Column must be unique and define an ordering. runBatch open fun runBatch(pkeys: List < Pkey >, config: BackfillConfig< Param >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch. runOne open fun runOne(pkey: Pkey , config: BackfillConfig< Param >): Unit Called for each matching record. Override in a backfill to process one record at a time. validate open fun validate(config: BackfillConfig< Param >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"HibernateBackfill - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/#hibernatebackfill","text":"abstract class HibernateBackfill<E : DbEntity< E >, Pkey : Any , Param : Any > : Backfill Implement this for each of your backfills. Install using HibernateBackfillModule.create .","title":"HibernateBackfill"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/#constructors","text":"Name Summary <init> HibernateBackfill() Implement this for each of your backfills. Install using HibernateBackfillModule.create .","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/#properties","text":"Name Summary entityClass val entityClass: KClass < E > pkeyClass val pkeyClass: KClass < Pkey >","title":"Properties"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/#functions","text":"Name Summary backfillCriteria abstract fun backfillCriteria(config: BackfillConfig< Param >): Query< E > Criteria that filters which records are selected to backfill from the table. partitionProvider abstract fun partitionProvider(): PartitionProvider Returns an partition provider that is used for database connectivity. primaryKeyHibernateName open fun primaryKeyHibernateName(): String The name of the hibernate property that the backfill is keyed off of. Separate from primaryKeyName() as the casing is usually different. primaryKeyName open fun primaryKeyName(): String The name of the column that the backfill is keyed off of. Usually the primary key of the table. Column must be unique and define an ordering. runBatch open fun runBatch(pkeys: List < Pkey >, config: BackfillConfig< Param >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch. runOne open fun runOne(pkey: Pkey , config: BackfillConfig< Param >): Unit Called for each matching record. Override in a backfill to process one record at a time. validate open fun validate(config: BackfillConfig< Param >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / <init> <init> \u00b6 HibernateBackfill() Implement this for each of your backfills. Install using HibernateBackfillModule.create .","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/-init-/#init","text":"HibernateBackfill() Implement this for each of your backfills. Install using HibernateBackfillModule.create .","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/backfill-criteria/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / backfillCriteria backfillCriteria \u00b6 abstract fun backfillCriteria(config: BackfillConfig< Param >): Query< E > Criteria that filters which records are selected to backfill from the table. This must return a new instance of Query in every invocation.","title":"backfillCriteria - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/backfill-criteria/#backfillcriteria","text":"abstract fun backfillCriteria(config: BackfillConfig< Param >): Query< E > Criteria that filters which records are selected to backfill from the table. This must return a new instance of Query in every invocation.","title":"backfillCriteria"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/entity-class/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / entityClass entityClass \u00b6 val entityClass: KClass < E >","title":"entityClass - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/entity-class/#entityclass","text":"val entityClass: KClass < E >","title":"entityClass"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/partition-provider/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / partitionProvider partitionProvider \u00b6 abstract fun partitionProvider(): PartitionProvider Returns an partition provider that is used for database connectivity.","title":"partitionProvider - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/partition-provider/#partitionprovider","text":"abstract fun partitionProvider(): PartitionProvider Returns an partition provider that is used for database connectivity.","title":"partitionProvider"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/pkey-class/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / pkeyClass pkeyClass \u00b6 val pkeyClass: KClass < Pkey >","title":"pkeyClass - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/pkey-class/#pkeyclass","text":"val pkeyClass: KClass < Pkey >","title":"pkeyClass"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/primary-key-hibernate-name/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / primaryKeyHibernateName primaryKeyHibernateName \u00b6 open fun primaryKeyHibernateName(): String The name of the hibernate property that the backfill is keyed off of. Separate from primaryKeyName() as the casing is usually different.","title":"primaryKeyHibernateName - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/primary-key-hibernate-name/#primarykeyhibernatename","text":"open fun primaryKeyHibernateName(): String The name of the hibernate property that the backfill is keyed off of. Separate from primaryKeyName() as the casing is usually different.","title":"primaryKeyHibernateName"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/primary-key-name/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / primaryKeyName primaryKeyName \u00b6 open fun primaryKeyName(): String The name of the column that the backfill is keyed off of. Usually the primary key of the table. Column must be unique and define an ordering.","title":"primaryKeyName - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/primary-key-name/#primarykeyname","text":"open fun primaryKeyName(): String The name of the column that the backfill is keyed off of. Usually the primary key of the table. Column must be unique and define an ordering.","title":"primaryKeyName"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/run-batch/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / runBatch runBatch \u00b6 open fun runBatch(pkeys: List < Pkey >, config: BackfillConfig< Param >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch.","title":"runBatch - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/run-batch/#runbatch","text":"open fun runBatch(pkeys: List < Pkey >, config: BackfillConfig< Param >): Unit Called for each batch of matching records. Override in a backfill to process all records in a batch.","title":"runBatch"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/run-one/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / runOne runOne \u00b6 open fun runOne(pkey: Pkey , config: BackfillConfig< Param >): Unit Called for each matching record. Override in a backfill to process one record at a time.","title":"runOne - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/run-one/#runone","text":"open fun runOne(pkey: Pkey , config: BackfillConfig< Param >): Unit Called for each matching record. Override in a backfill to process one record at a time.","title":"runOne"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/validate/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfill / validate validate \u00b6 open fun validate(config: BackfillConfig< Param >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"validate - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill/validate/#validate","text":"open fun validate(config: BackfillConfig< Param >): Unit Override this and throw an exception to prevent the backfill from being created. This is also a good place to do any prep work before batches are run.","title":"validate"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfillModule HibernateBackfillModule \u00b6 class HibernateBackfillModule<T : HibernateBackfill <*, *, *>> : KAbstractModule Installs the BackfillBackend for Hibernate backfills. See the java doc for BackfillModule . Functions \u00b6 Name Summary configure fun configure(): Unit Companion Object Functions \u00b6 Name Summary create fun <T : HibernateBackfill <*, *, *>> create(): HibernateBackfillModule < T > fun <T : HibernateBackfill <*, *, *>> create(backfillClass: KClass < T >): HibernateBackfillModule < T >","title":"HibernateBackfillModule - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/#hibernatebackfillmodule","text":"class HibernateBackfillModule<T : HibernateBackfill <*, *, *>> : KAbstractModule Installs the BackfillBackend for Hibernate backfills. See the java doc for BackfillModule .","title":"HibernateBackfillModule"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/#functions","text":"Name Summary configure fun configure(): Unit","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/#companion-object-functions","text":"Name Summary create fun <T : HibernateBackfill <*, *, *>> create(): HibernateBackfillModule < T > fun <T : HibernateBackfill <*, *, *>> create(backfillClass: KClass < T >): HibernateBackfillModule < T >","title":"Companion Object Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/configure/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfillModule / configure configure \u00b6 protected fun configure(): Unit","title":"configure - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/configure/#configure","text":"protected fun configure(): Unit","title":"configure"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/create/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / HibernateBackfillModule / create create \u00b6 inline fun <reified T : HibernateBackfill <*, *, *>> create(): HibernateBackfillModule < T > @JvmStatic fun <T : HibernateBackfill <*, *, *>> create(backfillClass: KClass < T >): HibernateBackfillModule < T >","title":"create - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-hibernate-backfill-module/create/#create","text":"inline fun <reified T : HibernateBackfill <*, *, *>> create(): HibernateBackfillModule < T > @JvmStatic fun <T : HibernateBackfill <*, *, *>> create(backfillClass: KClass < T >): HibernateBackfillModule < T >","title":"create"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / PartitionProvider PartitionProvider \u00b6 interface PartitionProvider Provides connectivity to a singleton database or a set of database shards. Functions \u00b6 Name Summary boundingRangeStrategy abstract fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names abstract fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction abstract fun <T> transaction(partitionName: String , task: (Session) -> T ): T Inheritors \u00b6 Name Summary UnshardedPartitionProvider class UnshardedPartitionProvider : PartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider VitessShardedPartitionProvider class VitessShardedPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. VitessSingleCursorPartitionProvider class VitessSingleCursorPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence.","title":"PartitionProvider - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/#partitionprovider","text":"interface PartitionProvider Provides connectivity to a singleton database or a set of database shards.","title":"PartitionProvider"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/#functions","text":"Name Summary boundingRangeStrategy abstract fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names abstract fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction abstract fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/#inheritors","text":"Name Summary UnshardedPartitionProvider class UnshardedPartitionProvider : PartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider VitessShardedPartitionProvider class VitessShardedPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. VitessSingleCursorPartitionProvider class VitessSingleCursorPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence.","title":"Inheritors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / PartitionProvider / boundingRangeStrategy boundingRangeStrategy \u00b6 abstract fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey >","title":"boundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/bounding-range-strategy/#boundingrangestrategy","text":"abstract fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey >","title":"boundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/names/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / PartitionProvider / names names \u00b6 abstract fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/names/#names","text":"abstract fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/transaction/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / PartitionProvider / transaction transaction \u00b6 abstract fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"transaction - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-partition-provider/transaction/#transaction","text":"abstract fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"transaction"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / PkeySqlAdapter PkeySqlAdapter \u00b6 class PkeySqlAdapter Constructors \u00b6 Name Summary <init> PkeySqlAdapter() Functions \u00b6 Name Summary pkeyFromString fun <Pkey> pkeyFromString(type: Class < Pkey >, sqlString: String ): Pkey","title":"PkeySqlAdapter - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/#pkeysqladapter","text":"class PkeySqlAdapter","title":"PkeySqlAdapter"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/#constructors","text":"Name Summary <init> PkeySqlAdapter()","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/#functions","text":"Name Summary pkeyFromString fun <Pkey> pkeyFromString(type: Class < Pkey >, sqlString: String ): Pkey","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / PkeySqlAdapter / <init> <init> \u00b6 PkeySqlAdapter()","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/-init-/#init","text":"PkeySqlAdapter()","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/pkey-from-string/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / PkeySqlAdapter / pkeyFromString pkeyFromString \u00b6 fun <Pkey> pkeyFromString(type: Class < Pkey >, sqlString: String ): Pkey","title":"pkeyFromString - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-pkey-sql-adapter/pkey-from-string/#pkeyfromstring","text":"fun <Pkey> pkeyFromString(type: Class < Pkey >, sqlString: String ): Pkey","title":"pkeyFromString"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / UnshardedPartitionProvider UnshardedPartitionProvider \u00b6 class UnshardedPartitionProvider : PartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider Constructors \u00b6 Name Summary <init> UnshardedPartitionProvider(transacter: Transacter) A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider Functions \u00b6 Name Summary boundingRangeStrategy fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"UnshardedPartitionProvider - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/#unshardedpartitionprovider","text":"class UnshardedPartitionProvider : PartitionProvider A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider","title":"UnshardedPartitionProvider"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/#constructors","text":"Name Summary <init> UnshardedPartitionProvider(transacter: Transacter) A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/#functions","text":"Name Summary boundingRangeStrategy fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / UnshardedPartitionProvider / <init> <init> \u00b6 UnshardedPartitionProvider(transacter: Transacter) A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/-init-/#init","text":"UnshardedPartitionProvider(transacter: Transacter) A simple unsharded partition provider that uses a single Backfila partition. If you are using a Vitess datasource you should almost certainly be using one of the Vitess partition providers. VitessShardedPartitionProvider","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / UnshardedPartitionProvider / boundingRangeStrategy boundingRangeStrategy \u00b6 fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > Overrides PartitionProvider.boundingRangeStrategy","title":"boundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/bounding-range-strategy/#boundingrangestrategy","text":"fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > Overrides PartitionProvider.boundingRangeStrategy","title":"boundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/names/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / UnshardedPartitionProvider / names names \u00b6 fun names(request: PrepareBackfillRequest): List < String > Overrides PartitionProvider.names Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/names/#names","text":"fun names(request: PrepareBackfillRequest): List < String > Overrides PartitionProvider.names Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/transaction/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / UnshardedPartitionProvider / transaction transaction \u00b6 fun <T> transaction(partitionName: String , task: (Session) -> T ): T Overrides PartitionProvider.transaction","title":"transaction - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-unsharded-partition-provider/transaction/#transaction","text":"fun <T> transaction(partitionName: String , task: (Session) -> T ): T Overrides PartitionProvider.transaction","title":"transaction"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessShardedPartitionProvider VitessShardedPartitionProvider \u00b6 class VitessShardedPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. Constructors \u00b6 Name Summary <init> VitessShardedPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead. Functions \u00b6 Name Summary boundingRangeStrategy fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"VitessShardedPartitionProvider - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/#vitessshardedpartitionprovider","text":"class VitessShardedPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead.","title":"VitessShardedPartitionProvider"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/#constructors","text":"Name Summary <init> VitessShardedPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead.","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/#functions","text":"Name Summary boundingRangeStrategy fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessShardedPartitionProvider / <init> <init> \u00b6 VitessShardedPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead.","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/-init-/#init","text":"VitessShardedPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A sharded partition provider that creates a backfila partition per Vitess shard. Since a cursor is maintained for each shard separately, if entities are moved between shards it\u2019s possible they will be missed by the backfill. Also at minimum one thread is used per shard since each shard is its own partition. If your entities can move, or if you need to run this backfill slower than one thread per shard, consider using VitessSingleCursorPartitionProvider instead.","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessShardedPartitionProvider / boundingRangeStrategy boundingRangeStrategy \u00b6 fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > Overrides PartitionProvider.boundingRangeStrategy","title":"boundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/bounding-range-strategy/#boundingrangestrategy","text":"fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > Overrides PartitionProvider.boundingRangeStrategy","title":"boundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/names/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessShardedPartitionProvider / names names \u00b6 fun names(request: PrepareBackfillRequest): List < String > Overrides PartitionProvider.names Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/names/#names","text":"fun names(request: PrepareBackfillRequest): List < String > Overrides PartitionProvider.names Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/transaction/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessShardedPartitionProvider / transaction transaction \u00b6 fun <T> transaction(partitionName: String , task: (Session) -> T ): T Overrides PartitionProvider.transaction","title":"transaction - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-sharded-partition-provider/transaction/#transaction","text":"fun <T> transaction(partitionName: String , task: (Session) -> T ): T Overrides PartitionProvider.transaction","title":"transaction"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessSingleCursorPartitionProvider VitessSingleCursorPartitionProvider \u00b6 class VitessSingleCursorPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence. Prefer VitessShardedPartitionProvider The benefits of this vs VitessShardedPartitionProvider is that if entities move from one customer to another, they will not be missed because one shard\u2019s cursor cannot get ahead of another\u2019s. It is also indifferent to shard splits and can run slower than one thread per shard. The disadvantage is less efficient concurrency, since batches are computed by scanning all shards each time, rather than splitting the work by shard. Constructors \u00b6 Name Summary <init> VitessSingleCursorPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence. Functions \u00b6 Name Summary boundingRangeStrategy fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"VitessSingleCursorPartitionProvider - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/#vitesssinglecursorpartitionprovider","text":"class VitessSingleCursorPartitionProvider<E : DbEntity< E >, Pkey : Any > : PartitionProvider A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence. Prefer VitessShardedPartitionProvider The benefits of this vs VitessShardedPartitionProvider is that if entities move from one customer to another, they will not be missed because one shard\u2019s cursor cannot get ahead of another\u2019s. It is also indifferent to shard splits and can run slower than one thread per shard. The disadvantage is less efficient concurrency, since batches are computed by scanning all shards each time, rather than splitting the work by shard.","title":"VitessSingleCursorPartitionProvider"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/#constructors","text":"Name Summary <init> VitessSingleCursorPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence.","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/#functions","text":"Name Summary boundingRangeStrategy fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > names fun names(request: PrepareBackfillRequest): List < String > Names the databases that will be connected with transaction . In a Vitess environment these are the shard names. transaction fun <T> transaction(partitionName: String , task: (Session) -> T ): T","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessSingleCursorPartitionProvider / <init> <init> \u00b6 VitessSingleCursorPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence. Prefer VitessShardedPartitionProvider The benefits of this vs VitessShardedPartitionProvider is that if entities move from one customer to another, they will not be missed because one shard\u2019s cursor cannot get ahead of another\u2019s. It is also indifferent to shard splits and can run slower than one thread per shard. The disadvantage is less efficient concurrency, since batches are computed by scanning all shards each time, rather than splitting the work by shard.","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/-init-/#init","text":"VitessSingleCursorPartitionProvider(transacter: Transacter, backfill: HibernateBackfill < E , Pkey , *>) A partition provider that iterates over sharded vitess using a single cursor. This can only be used if pkeys are unique across all shards, e.g. using a vitess sequence. Prefer VitessShardedPartitionProvider The benefits of this vs VitessShardedPartitionProvider is that if entities move from one customer to another, they will not be missed because one shard\u2019s cursor cannot get ahead of another\u2019s. It is also indifferent to shard splits and can run slower than one thread per shard. The disadvantage is less efficient concurrency, since batches are computed by scanning all shards each time, rather than splitting the work by shard.","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessSingleCursorPartitionProvider / boundingRangeStrategy boundingRangeStrategy \u00b6 fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > Overrides PartitionProvider.boundingRangeStrategy","title":"boundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/bounding-range-strategy/#boundingrangestrategy","text":"fun <E : DbEntity< E >, Pkey : Any > boundingRangeStrategy(): BoundingRangeStrategy < E , Pkey > Overrides PartitionProvider.boundingRangeStrategy","title":"boundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/names/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessSingleCursorPartitionProvider / names names \u00b6 fun names(request: PrepareBackfillRequest): List < String > Overrides PartitionProvider.names Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/names/#names","text":"fun names(request: PrepareBackfillRequest): List < String > Overrides PartitionProvider.names Names the databases that will be connected with transaction . In a Vitess environment these are the shard names.","title":"names"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/transaction/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate / VitessSingleCursorPartitionProvider / transaction transaction \u00b6 fun <T> transaction(partitionName: String , task: (Session) -> T ): T Overrides PartitionProvider.transaction","title":"transaction - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate/-vitess-single-cursor-partition-provider/transaction/#transaction","text":"fun <T> transaction(partitionName: String , task: (Session) -> T ): T Overrides PartitionProvider.transaction","title":"transaction"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal Package app.cash.backfila.client.misk.hibernate.internal \u00b6 Types \u00b6 Name Summary BoundingRangeStrategy interface BoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > HibernateBackend class HibernateBackend : BackfillBackend SingleCursorVitess class SingleCursorVitess UnshardedHibernateBoundingRangeStrategy class UnshardedHibernateBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessShardedBoundingRangeStrategy class VitessShardedBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessSingleCursorBoundingRangeStrategy class VitessSingleCursorBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey >","title":"Package app.cash.backfila.client.misk.hibernate.internal - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/#package-appcashbackfilaclientmiskhibernateinternal","text":"","title":"Package app.cash.backfila.client.misk.hibernate.internal"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/#types","text":"Name Summary BoundingRangeStrategy interface BoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > HibernateBackend class HibernateBackend : BackfillBackend SingleCursorVitess class SingleCursorVitess UnshardedHibernateBoundingRangeStrategy class UnshardedHibernateBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessShardedBoundingRangeStrategy class VitessShardedBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessSingleCursorBoundingRangeStrategy class VitessSingleCursorBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey >","title":"Types"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / BoundingRangeStrategy BoundingRangeStrategy \u00b6 interface BoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > Functions \u00b6 Name Summary computeBoundingRangeMax abstract fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table. Inheritors \u00b6 Name Summary UnshardedHibernateBoundingRangeStrategy class UnshardedHibernateBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessShardedBoundingRangeStrategy class VitessShardedBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessSingleCursorBoundingRangeStrategy class VitessSingleCursorBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey >","title":"BoundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-bounding-range-strategy/#boundingrangestrategy","text":"interface BoundingRangeStrategy<E : DbEntity< E >, Pkey : Any >","title":"BoundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-bounding-range-strategy/#functions","text":"Name Summary computeBoundingRangeMax abstract fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-bounding-range-strategy/#inheritors","text":"Name Summary UnshardedHibernateBoundingRangeStrategy class UnshardedHibernateBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessShardedBoundingRangeStrategy class VitessShardedBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > VitessSingleCursorBoundingRangeStrategy class VitessSingleCursorBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey >","title":"Inheritors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-bounding-range-strategy/compute-bounding-range-max/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / BoundingRangeStrategy / computeBoundingRangeMax computeBoundingRangeMax \u00b6 abstract fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"computeBoundingRangeMax - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-bounding-range-strategy/compute-bounding-range-max/#computeboundingrangemax","text":"abstract fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"computeBoundingRangeMax"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / HibernateBackend HibernateBackend \u00b6 @Singleton class HibernateBackend : BackfillBackend Constructors \u00b6 Name Summary <init> HibernateBackend(injector: Injector, backfills: MutableMap < String , KClass <out HibernateBackfill <*, *, *>>>, pkeySqlAdapter: PkeySqlAdapter , queryFactory: Factory) Functions \u00b6 Name Summary backfills fun backfills(): Set <BackfillRegistration> create fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"HibernateBackend - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/#hibernatebackend","text":"@Singleton class HibernateBackend : BackfillBackend","title":"HibernateBackend"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/#constructors","text":"Name Summary <init> HibernateBackend(injector: Injector, backfills: MutableMap < String , KClass <out HibernateBackfill <*, *, *>>>, pkeySqlAdapter: PkeySqlAdapter , queryFactory: Factory)","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/#functions","text":"Name Summary backfills fun backfills(): Set <BackfillRegistration> create fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / HibernateBackend / <init> <init> \u00b6 HibernateBackend(injector: Injector, backfills: MutableMap < String , KClass <out HibernateBackfill <*, *, *>>>, pkeySqlAdapter: PkeySqlAdapter , queryFactory: Factory)","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/-init-/#init","text":"HibernateBackend(injector: Injector, backfills: MutableMap < String , KClass <out HibernateBackfill <*, *, *>>>, pkeySqlAdapter: PkeySqlAdapter , queryFactory: Factory)","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/backfills/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / HibernateBackend / backfills backfills \u00b6 fun backfills(): Set <BackfillRegistration>","title":"backfills - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/backfills/#backfills","text":"fun backfills(): Set <BackfillRegistration>","title":"backfills"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/create/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / HibernateBackend / create create \u00b6 fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"create - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-hibernate-backend/create/#create","text":"fun create(backfillName: String , backfillId: String ): BackfillOperator?","title":"create"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-single-cursor-vitess/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / SingleCursorVitess SingleCursorVitess \u00b6 class SingleCursorVitess Constructors \u00b6 Name Summary <init> SingleCursorVitess()","title":"SingleCursorVitess - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-single-cursor-vitess/#singlecursorvitess","text":"class SingleCursorVitess","title":"SingleCursorVitess"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-single-cursor-vitess/#constructors","text":"Name Summary <init> SingleCursorVitess()","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-single-cursor-vitess/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / SingleCursorVitess / <init> <init> \u00b6 SingleCursorVitess()","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-single-cursor-vitess/-init-/#init","text":"SingleCursorVitess()","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / UnshardedHibernateBoundingRangeStrategy UnshardedHibernateBoundingRangeStrategy \u00b6 class UnshardedHibernateBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > Constructors \u00b6 Name Summary <init> UnshardedHibernateBoundingRangeStrategy(partitionProvider: PartitionProvider ) Functions \u00b6 Name Summary computeBoundingRangeMax fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"UnshardedHibernateBoundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/#unshardedhibernateboundingrangestrategy","text":"class UnshardedHibernateBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey >","title":"UnshardedHibernateBoundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/#constructors","text":"Name Summary <init> UnshardedHibernateBoundingRangeStrategy(partitionProvider: PartitionProvider )","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/#functions","text":"Name Summary computeBoundingRangeMax fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / UnshardedHibernateBoundingRangeStrategy / <init> <init> \u00b6 UnshardedHibernateBoundingRangeStrategy(partitionProvider: PartitionProvider )","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/-init-/#init","text":"UnshardedHibernateBoundingRangeStrategy(partitionProvider: PartitionProvider )","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/compute-bounding-range-max/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / UnshardedHibernateBoundingRangeStrategy / computeBoundingRangeMax computeBoundingRangeMax \u00b6 fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Overrides BoundingRangeStrategy.computeBoundingRangeMax Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"computeBoundingRangeMax - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-unsharded-hibernate-bounding-range-strategy/compute-bounding-range-max/#computeboundingrangemax","text":"fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Overrides BoundingRangeStrategy.computeBoundingRangeMax Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"computeBoundingRangeMax"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / VitessShardedBoundingRangeStrategy VitessShardedBoundingRangeStrategy \u00b6 class VitessShardedBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > Constructors \u00b6 Name Summary <init> VitessShardedBoundingRangeStrategy(partitionProvider: PartitionProvider ) Functions \u00b6 Name Summary computeBoundingRangeMax fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"VitessShardedBoundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/#vitessshardedboundingrangestrategy","text":"class VitessShardedBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey >","title":"VitessShardedBoundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/#constructors","text":"Name Summary <init> VitessShardedBoundingRangeStrategy(partitionProvider: PartitionProvider )","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/#functions","text":"Name Summary computeBoundingRangeMax fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / VitessShardedBoundingRangeStrategy / <init> <init> \u00b6 VitessShardedBoundingRangeStrategy(partitionProvider: PartitionProvider )","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/-init-/#init","text":"VitessShardedBoundingRangeStrategy(partitionProvider: PartitionProvider )","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/compute-bounding-range-max/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / VitessShardedBoundingRangeStrategy / computeBoundingRangeMax computeBoundingRangeMax \u00b6 fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Overrides BoundingRangeStrategy.computeBoundingRangeMax Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"computeBoundingRangeMax - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-sharded-bounding-range-strategy/compute-bounding-range-max/#computeboundingrangemax","text":"fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Overrides BoundingRangeStrategy.computeBoundingRangeMax Computes a bound of size request.scan_size, to get a set of records that can be scanned for records that match the criteria. Returns null if there is are no more records left in the table.","title":"computeBoundingRangeMax"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / VitessSingleCursorBoundingRangeStrategy VitessSingleCursorBoundingRangeStrategy \u00b6 class VitessSingleCursorBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey > Constructors \u00b6 Name Summary <init> VitessSingleCursorBoundingRangeStrategy(transacter: Transacter, keyspace: Keyspace) Functions \u00b6 Name Summary computeBoundingRangeMax fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bounding range by scanning all shards and returning the minimum of MAX(pkey).","title":"VitessSingleCursorBoundingRangeStrategy - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/#vitesssinglecursorboundingrangestrategy","text":"class VitessSingleCursorBoundingRangeStrategy<E : DbEntity< E >, Pkey : Any > : BoundingRangeStrategy < E , Pkey >","title":"VitessSingleCursorBoundingRangeStrategy"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/#constructors","text":"Name Summary <init> VitessSingleCursorBoundingRangeStrategy(transacter: Transacter, keyspace: Keyspace)","title":"Constructors"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/#functions","text":"Name Summary computeBoundingRangeMax fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Computes a bounding range by scanning all shards and returning the minimum of MAX(pkey).","title":"Functions"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/-init-/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / VitessSingleCursorBoundingRangeStrategy / <init> <init> \u00b6 VitessSingleCursorBoundingRangeStrategy(transacter: Transacter, keyspace: Keyspace)","title":" init "},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/-init-/#init","text":"VitessSingleCursorBoundingRangeStrategy(transacter: Transacter, keyspace: Keyspace)","title":"&lt;init&gt;"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/compute-bounding-range-max/","text":"client-misk-hibernate / app.cash.backfila.client.misk.hibernate.internal / VitessSingleCursorBoundingRangeStrategy / computeBoundingRangeMax computeBoundingRangeMax \u00b6 fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Overrides BoundingRangeStrategy.computeBoundingRangeMax Computes a bounding range by scanning all shards and returning the minimum of MAX(pkey). Vitess does not support the nested select in SELECT MAX(s.id) FROM (subquery) used in UnshardedHibernateBoundingRangeStrategy . This is fine for backfills that run on each shard independently, as in VitessShardedBoundingRangeStrategy . To workaround for all-shard backfills we have to call SELECT MAX per shard, then pick the minimum value, ensuring we have at least bound_size records in the bound, but up to shard_count*bound_size in the bound. The former when the next scan_size records are on one shard, and the latter when they are evenly distributed across all shards.","title":"computeBoundingRangeMax - Backfila"},{"location":"0.x/client-misk-hibernate/app.cash.backfila.client.misk.hibernate.internal/-vitess-single-cursor-bounding-range-strategy/compute-bounding-range-max/#computeboundingrangemax","text":"fun computeBoundingRangeMax(backfill: HibernateBackfill < E , Pkey , *>, partitionName: String , previousEndKey: ByteString?, backfillRange: KeyRange, scanSize: Long ?): Pkey ? Overrides BoundingRangeStrategy.computeBoundingRangeMax Computes a bounding range by scanning all shards and returning the minimum of MAX(pkey). Vitess does not support the nested select in SELECT MAX(s.id) FROM (subquery) used in UnshardedHibernateBoundingRangeStrategy . This is fine for backfills that run on each shard independently, as in VitessShardedBoundingRangeStrategy . To workaround for all-shard backfills we have to call SELECT MAX per shard, then pick the minimum value, ensuring we have at least bound_size records in the bound, but up to shard_count*bound_size in the bound. The former when the next scan_size records are on one shard, and the latter when they are evenly distributed across all shards.","title":"computeBoundingRangeMax"},{"location":"0.x/client-misk-testing/","text":"client-misk-testing Packages \u00b6 Name Summary app.cash.backfila.client.misk.testing Index \u00b6 All Types","title":"Packages - Backfila"},{"location":"0.x/client-misk-testing/#packages","text":"Name Summary app.cash.backfila.client.misk.testing","title":"Packages"},{"location":"0.x/client-misk-testing/#index","text":"All Types","title":"Index"},{"location":"0.x/client-misk-testing/alltypes/","text":"All Types \u00b6 Name Summary app.cash.backfila.client.misk.testing.BackfillRunAssert app.cash.backfila.client.misk.testing.PartitionCursorAssert","title":"All Types - Backfila"},{"location":"0.x/client-misk-testing/alltypes/#all-types","text":"Name Summary app.cash.backfila.client.misk.testing.BackfillRunAssert app.cash.backfila.client.misk.testing.PartitionCursorAssert","title":"All Types"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/","text":"client-misk-testing / app.cash.backfila.client.misk.testing Package app.cash.backfila.client.misk.testing \u00b6 Types \u00b6 Name Summary BackfillRunAssert class BackfillRunAssert : AbstractAssert< BackfillRunAssert , BackfillRun<*>> PartitionCursorAssert class PartitionCursorAssert : AbstractAssert< PartitionCursorAssert , PartitionCursor> Functions \u00b6 Name Summary assertThat fun <T : Backfill> assertThat(backfillRun: BackfillRun< T >): BackfillRunAssert fun assertThat(partitionCursor: PartitionCursor): PartitionCursorAssert","title":"Package app.cash.backfila.client.misk.testing - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/#package-appcashbackfilaclientmisktesting","text":"","title":"Package app.cash.backfila.client.misk.testing"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/#types","text":"Name Summary BackfillRunAssert class BackfillRunAssert : AbstractAssert< BackfillRunAssert , BackfillRun<*>> PartitionCursorAssert class PartitionCursorAssert : AbstractAssert< PartitionCursorAssert , PartitionCursor>","title":"Types"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/#functions","text":"Name Summary assertThat fun <T : Backfill> assertThat(backfillRun: BackfillRun< T >): BackfillRunAssert fun assertThat(partitionCursor: PartitionCursor): PartitionCursorAssert","title":"Functions"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/assert-that/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / assertThat assertThat \u00b6 fun <T : Backfill> assertThat(backfillRun: BackfillRun< T >): BackfillRunAssert fun assertThat(partitionCursor: PartitionCursor): PartitionCursorAssert","title":"assertThat - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/assert-that/#assertthat","text":"fun <T : Backfill> assertThat(backfillRun: BackfillRun< T >): BackfillRunAssert fun assertThat(partitionCursor: PartitionCursor): PartitionCursorAssert","title":"assertThat"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert BackfillRunAssert \u00b6 class BackfillRunAssert : AbstractAssert< BackfillRunAssert , BackfillRun<*>> Constructors \u00b6 Name Summary <init> BackfillRunAssert(backfillRun: BackfillRun<*>) Functions \u00b6 Name Summary hasBatchesToRun fun hasBatchesToRun(): BackfillRunAssert hasNoBatchesToRun fun hasNoBatchesToRun(): BackfillRunAssert isComplete fun isComplete(): BackfillRunAssert isFinishedPrecomputing fun isFinishedPrecomputing(): BackfillRunAssert isFinishedScanning fun isFinishedScanning(): BackfillRunAssert isNotComplete fun isNotComplete(): BackfillRunAssert","title":"BackfillRunAssert - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/#backfillrunassert","text":"class BackfillRunAssert : AbstractAssert< BackfillRunAssert , BackfillRun<*>>","title":"BackfillRunAssert"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/#constructors","text":"Name Summary <init> BackfillRunAssert(backfillRun: BackfillRun<*>)","title":"Constructors"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/#functions","text":"Name Summary hasBatchesToRun fun hasBatchesToRun(): BackfillRunAssert hasNoBatchesToRun fun hasNoBatchesToRun(): BackfillRunAssert isComplete fun isComplete(): BackfillRunAssert isFinishedPrecomputing fun isFinishedPrecomputing(): BackfillRunAssert isFinishedScanning fun isFinishedScanning(): BackfillRunAssert isNotComplete fun isNotComplete(): BackfillRunAssert","title":"Functions"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/-init-/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert / <init> <init> \u00b6 BackfillRunAssert(backfillRun: BackfillRun<*>)","title":" init "},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/-init-/#init","text":"BackfillRunAssert(backfillRun: BackfillRun<*>)","title":"&lt;init&gt;"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/has-batches-to-run/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert / hasBatchesToRun hasBatchesToRun \u00b6 fun hasBatchesToRun(): BackfillRunAssert","title":"hasBatchesToRun - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/has-batches-to-run/#hasbatchestorun","text":"fun hasBatchesToRun(): BackfillRunAssert","title":"hasBatchesToRun"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/has-no-batches-to-run/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert / hasNoBatchesToRun hasNoBatchesToRun \u00b6 fun hasNoBatchesToRun(): BackfillRunAssert","title":"hasNoBatchesToRun - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/has-no-batches-to-run/#hasnobatchestorun","text":"fun hasNoBatchesToRun(): BackfillRunAssert","title":"hasNoBatchesToRun"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-complete/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert / isComplete isComplete \u00b6 fun isComplete(): BackfillRunAssert","title":"isComplete - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-complete/#iscomplete","text":"fun isComplete(): BackfillRunAssert","title":"isComplete"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-finished-precomputing/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert / isFinishedPrecomputing isFinishedPrecomputing \u00b6 fun isFinishedPrecomputing(): BackfillRunAssert","title":"isFinishedPrecomputing - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-finished-precomputing/#isfinishedprecomputing","text":"fun isFinishedPrecomputing(): BackfillRunAssert","title":"isFinishedPrecomputing"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-finished-scanning/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert / isFinishedScanning isFinishedScanning \u00b6 fun isFinishedScanning(): BackfillRunAssert","title":"isFinishedScanning - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-finished-scanning/#isfinishedscanning","text":"fun isFinishedScanning(): BackfillRunAssert","title":"isFinishedScanning"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-not-complete/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / BackfillRunAssert / isNotComplete isNotComplete \u00b6 fun isNotComplete(): BackfillRunAssert","title":"isNotComplete - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-backfill-run-assert/is-not-complete/#isnotcomplete","text":"fun isNotComplete(): BackfillRunAssert","title":"isNotComplete"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / PartitionCursorAssert PartitionCursorAssert \u00b6 class PartitionCursorAssert : AbstractAssert< PartitionCursorAssert , PartitionCursor> Constructors \u00b6 Name Summary <init> PartitionCursorAssert(partitionCursor: PartitionCursor) Functions \u00b6 Name Summary isDone fun isDone(): PartitionCursorAssert isNotDone fun isNotDone(): PartitionCursorAssert","title":"PartitionCursorAssert - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/#partitioncursorassert","text":"class PartitionCursorAssert : AbstractAssert< PartitionCursorAssert , PartitionCursor>","title":"PartitionCursorAssert"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/#constructors","text":"Name Summary <init> PartitionCursorAssert(partitionCursor: PartitionCursor)","title":"Constructors"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/#functions","text":"Name Summary isDone fun isDone(): PartitionCursorAssert isNotDone fun isNotDone(): PartitionCursorAssert","title":"Functions"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/-init-/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / PartitionCursorAssert / <init> <init> \u00b6 PartitionCursorAssert(partitionCursor: PartitionCursor)","title":" init "},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/-init-/#init","text":"PartitionCursorAssert(partitionCursor: PartitionCursor)","title":"&lt;init&gt;"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/is-done/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / PartitionCursorAssert / isDone isDone \u00b6 fun isDone(): PartitionCursorAssert","title":"isDone - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/is-done/#isdone","text":"fun isDone(): PartitionCursorAssert","title":"isDone"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/is-not-done/","text":"client-misk-testing / app.cash.backfila.client.misk.testing / PartitionCursorAssert / isNotDone isNotDone \u00b6 fun isNotDone(): PartitionCursorAssert","title":"isNotDone - Backfila"},{"location":"0.x/client-misk-testing/app.cash.backfila.client.misk.testing/-partition-cursor-assert/is-not-done/#isnotdone","text":"fun isNotDone(): PartitionCursorAssert","title":"isNotDone"}]}